// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/argoproj/argo-cd/v3/pkg/apis/application/v1alpha1"
	mock "github.com/stretchr/testify/mock"
)

// NewRenderer creates a new instance of Renderer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRenderer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Renderer {
	mock := &Renderer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Renderer is an autogenerated mock type for the Renderer type
type Renderer struct {
	mock.Mock
}

type Renderer_Expecter struct {
	mock *mock.Mock
}

func (_m *Renderer) EXPECT() *Renderer_Expecter {
	return &Renderer_Expecter{mock: &_m.Mock}
}

// RenderTemplateParams provides a mock function for the type Renderer
func (_mock *Renderer) RenderTemplateParams(tmpl *v1alpha1.Application, syncPolicy *v1alpha1.ApplicationSetSyncPolicy, params map[string]any, useGoTemplate bool, goTemplateOptions []string) (*v1alpha1.Application, error) {
	ret := _mock.Called(tmpl, syncPolicy, params, useGoTemplate, goTemplateOptions)

	if len(ret) == 0 {
		panic("no return value specified for RenderTemplateParams")
	}

	var r0 *v1alpha1.Application
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*v1alpha1.Application, *v1alpha1.ApplicationSetSyncPolicy, map[string]any, bool, []string) (*v1alpha1.Application, error)); ok {
		return returnFunc(tmpl, syncPolicy, params, useGoTemplate, goTemplateOptions)
	}
	if returnFunc, ok := ret.Get(0).(func(*v1alpha1.Application, *v1alpha1.ApplicationSetSyncPolicy, map[string]any, bool, []string) *v1alpha1.Application); ok {
		r0 = returnFunc(tmpl, syncPolicy, params, useGoTemplate, goTemplateOptions)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.Application)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*v1alpha1.Application, *v1alpha1.ApplicationSetSyncPolicy, map[string]any, bool, []string) error); ok {
		r1 = returnFunc(tmpl, syncPolicy, params, useGoTemplate, goTemplateOptions)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Renderer_RenderTemplateParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RenderTemplateParams'
type Renderer_RenderTemplateParams_Call struct {
	*mock.Call
}

// RenderTemplateParams is a helper method to define mock.On call
//   - tmpl
//   - syncPolicy
//   - params
//   - useGoTemplate
//   - goTemplateOptions
func (_e *Renderer_Expecter) RenderTemplateParams(tmpl interface{}, syncPolicy interface{}, params interface{}, useGoTemplate interface{}, goTemplateOptions interface{}) *Renderer_RenderTemplateParams_Call {
	return &Renderer_RenderTemplateParams_Call{Call: _e.mock.On("RenderTemplateParams", tmpl, syncPolicy, params, useGoTemplate, goTemplateOptions)}
}

func (_c *Renderer_RenderTemplateParams_Call) Run(run func(tmpl *v1alpha1.Application, syncPolicy *v1alpha1.ApplicationSetSyncPolicy, params map[string]any, useGoTemplate bool, goTemplateOptions []string)) *Renderer_RenderTemplateParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*v1alpha1.Application), args[1].(*v1alpha1.ApplicationSetSyncPolicy), args[2].(map[string]any), args[3].(bool), args[4].([]string))
	})
	return _c
}

func (_c *Renderer_RenderTemplateParams_Call) Return(application *v1alpha1.Application, err error) *Renderer_RenderTemplateParams_Call {
	_c.Call.Return(application, err)
	return _c
}

func (_c *Renderer_RenderTemplateParams_Call) RunAndReturn(run func(tmpl *v1alpha1.Application, syncPolicy *v1alpha1.ApplicationSetSyncPolicy, params map[string]any, useGoTemplate bool, goTemplateOptions []string) (*v1alpha1.Application, error)) *Renderer_RenderTemplateParams_Call {
	_c.Call.Return(run)
	return _c
}

// Replace provides a mock function for the type Renderer
func (_mock *Renderer) Replace(tmpl string, replaceMap map[string]any, useGoTemplate bool, goTemplateOptions []string) (string, error) {
	ret := _mock.Called(tmpl, replaceMap, useGoTemplate, goTemplateOptions)

	if len(ret) == 0 {
		panic("no return value specified for Replace")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, map[string]any, bool, []string) (string, error)); ok {
		return returnFunc(tmpl, replaceMap, useGoTemplate, goTemplateOptions)
	}
	if returnFunc, ok := ret.Get(0).(func(string, map[string]any, bool, []string) string); ok {
		r0 = returnFunc(tmpl, replaceMap, useGoTemplate, goTemplateOptions)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string, map[string]any, bool, []string) error); ok {
		r1 = returnFunc(tmpl, replaceMap, useGoTemplate, goTemplateOptions)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Renderer_Replace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Replace'
type Renderer_Replace_Call struct {
	*mock.Call
}

// Replace is a helper method to define mock.On call
//   - tmpl
//   - replaceMap
//   - useGoTemplate
//   - goTemplateOptions
func (_e *Renderer_Expecter) Replace(tmpl interface{}, replaceMap interface{}, useGoTemplate interface{}, goTemplateOptions interface{}) *Renderer_Replace_Call {
	return &Renderer_Replace_Call{Call: _e.mock.On("Replace", tmpl, replaceMap, useGoTemplate, goTemplateOptions)}
}

func (_c *Renderer_Replace_Call) Run(run func(tmpl string, replaceMap map[string]any, useGoTemplate bool, goTemplateOptions []string)) *Renderer_Replace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(map[string]any), args[2].(bool), args[3].([]string))
	})
	return _c
}

func (_c *Renderer_Replace_Call) Return(s string, err error) *Renderer_Replace_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *Renderer_Replace_Call) RunAndReturn(run func(tmpl string, replaceMap map[string]any, useGoTemplate bool, goTemplateOptions []string) (string, error)) *Renderer_Replace_Call {
	_c.Call.Return(run)
	return _c
}
