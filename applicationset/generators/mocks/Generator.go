// Code generated by mockery v2.40.2. DO NOT EDIT.

package mocks

import (
	time "time"

	mock "github.com/stretchr/testify/mock"

	v1alpha1 "github.com/argoproj/argo-cd/v2/pkg/apis/application/v1alpha1"
)

// Generator is an autogenerated mock type for the Generator type
type Generator struct {
	mock.Mock
}

// GenerateParams provides a mock function with given fields: appSetGenerator, applicationSetInfo
func (_m *Generator) GenerateParams(appSetGenerator *v1alpha1.ApplicationSetGenerator, applicationSetInfo *v1alpha1.ApplicationSet) ([]map[string]interface{}, error) {
	ret := _m.Called(appSetGenerator, applicationSetInfo)

	if len(ret) == 0 {
		panic("no return value specified for GenerateParams")
	}

	var r0 []map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(*v1alpha1.ApplicationSetGenerator, *v1alpha1.ApplicationSet) ([]map[string]interface{}, error)); ok {
		return rf(appSetGenerator, applicationSetInfo)
	}
	if rf, ok := ret.Get(0).(func(*v1alpha1.ApplicationSetGenerator, *v1alpha1.ApplicationSet) []map[string]interface{}); ok {
		r0 = rf(appSetGenerator, applicationSetInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(*v1alpha1.ApplicationSetGenerator, *v1alpha1.ApplicationSet) error); ok {
		r1 = rf(appSetGenerator, applicationSetInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRequeueAfter provides a mock function with given fields: appSetGenerator
func (_m *Generator) GetRequeueAfter(appSetGenerator *v1alpha1.ApplicationSetGenerator) time.Duration {
	ret := _m.Called(appSetGenerator)

	if len(ret) == 0 {
		panic("no return value specified for GetRequeueAfter")
	}

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func(*v1alpha1.ApplicationSetGenerator) time.Duration); ok {
		r0 = rf(appSetGenerator)
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// GetTemplate provides a mock function with given fields: appSetGenerator
func (_m *Generator) GetTemplate(appSetGenerator *v1alpha1.ApplicationSetGenerator) *v1alpha1.ApplicationSetTemplate {
	ret := _m.Called(appSetGenerator)

	if len(ret) == 0 {
		panic("no return value specified for GetTemplate")
	}

	var r0 *v1alpha1.ApplicationSetTemplate
	if rf, ok := ret.Get(0).(func(*v1alpha1.ApplicationSetGenerator) *v1alpha1.ApplicationSetTemplate); ok {
		r0 = rf(appSetGenerator)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.ApplicationSetTemplate)
		}
	}

	return r0
}

// NewGenerator creates a new instance of Generator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGenerator(t interface {
	mock.TestingT
	Cleanup(func())
}) *Generator {
	mock := &Generator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
