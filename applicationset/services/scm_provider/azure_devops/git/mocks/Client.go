// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	core "github.com/microsoft/azure-devops-go-api/azuredevops/v7/core"
	git "github.com/microsoft/azure-devops-go-api/azuredevops/v7/git"

	io "io"

	mock "github.com/stretchr/testify/mock"

	webapi "github.com/microsoft/azure-devops-go-api/azuredevops/v7/webapi"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

type Client_Expecter struct {
	mock *mock.Mock
}

func (_m *Client) EXPECT() *Client_Expecter {
	return &Client_Expecter{mock: &_m.Mock}
}

// CreateAnnotatedTag provides a mock function with given fields: _a0, _a1
func (_m *Client) CreateAnnotatedTag(_a0 context.Context, _a1 git.CreateAnnotatedTagArgs) (*git.GitAnnotatedTag, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateAnnotatedTag")
	}

	var r0 *git.GitAnnotatedTag
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.CreateAnnotatedTagArgs) (*git.GitAnnotatedTag, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.CreateAnnotatedTagArgs) *git.GitAnnotatedTag); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*git.GitAnnotatedTag)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.CreateAnnotatedTagArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_CreateAnnotatedTag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAnnotatedTag'
type Client_CreateAnnotatedTag_Call struct {
	*mock.Call
}

// CreateAnnotatedTag is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.CreateAnnotatedTagArgs
func (_e *Client_Expecter) CreateAnnotatedTag(_a0 interface{}, _a1 interface{}) *Client_CreateAnnotatedTag_Call {
	return &Client_CreateAnnotatedTag_Call{Call: _e.mock.On("CreateAnnotatedTag", _a0, _a1)}
}

func (_c *Client_CreateAnnotatedTag_Call) Run(run func(_a0 context.Context, _a1 git.CreateAnnotatedTagArgs)) *Client_CreateAnnotatedTag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.CreateAnnotatedTagArgs))
	})
	return _c
}

func (_c *Client_CreateAnnotatedTag_Call) Return(_a0 *git.GitAnnotatedTag, _a1 error) *Client_CreateAnnotatedTag_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_CreateAnnotatedTag_Call) RunAndReturn(run func(context.Context, git.CreateAnnotatedTagArgs) (*git.GitAnnotatedTag, error)) *Client_CreateAnnotatedTag_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAttachment provides a mock function with given fields: _a0, _a1
func (_m *Client) CreateAttachment(_a0 context.Context, _a1 git.CreateAttachmentArgs) (*git.Attachment, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateAttachment")
	}

	var r0 *git.Attachment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.CreateAttachmentArgs) (*git.Attachment, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.CreateAttachmentArgs) *git.Attachment); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*git.Attachment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.CreateAttachmentArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_CreateAttachment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAttachment'
type Client_CreateAttachment_Call struct {
	*mock.Call
}

// CreateAttachment is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.CreateAttachmentArgs
func (_e *Client_Expecter) CreateAttachment(_a0 interface{}, _a1 interface{}) *Client_CreateAttachment_Call {
	return &Client_CreateAttachment_Call{Call: _e.mock.On("CreateAttachment", _a0, _a1)}
}

func (_c *Client_CreateAttachment_Call) Run(run func(_a0 context.Context, _a1 git.CreateAttachmentArgs)) *Client_CreateAttachment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.CreateAttachmentArgs))
	})
	return _c
}

func (_c *Client_CreateAttachment_Call) Return(_a0 *git.Attachment, _a1 error) *Client_CreateAttachment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_CreateAttachment_Call) RunAndReturn(run func(context.Context, git.CreateAttachmentArgs) (*git.Attachment, error)) *Client_CreateAttachment_Call {
	_c.Call.Return(run)
	return _c
}

// CreateCherryPick provides a mock function with given fields: _a0, _a1
func (_m *Client) CreateCherryPick(_a0 context.Context, _a1 git.CreateCherryPickArgs) (*git.GitCherryPick, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateCherryPick")
	}

	var r0 *git.GitCherryPick
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.CreateCherryPickArgs) (*git.GitCherryPick, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.CreateCherryPickArgs) *git.GitCherryPick); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*git.GitCherryPick)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.CreateCherryPickArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_CreateCherryPick_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCherryPick'
type Client_CreateCherryPick_Call struct {
	*mock.Call
}

// CreateCherryPick is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.CreateCherryPickArgs
func (_e *Client_Expecter) CreateCherryPick(_a0 interface{}, _a1 interface{}) *Client_CreateCherryPick_Call {
	return &Client_CreateCherryPick_Call{Call: _e.mock.On("CreateCherryPick", _a0, _a1)}
}

func (_c *Client_CreateCherryPick_Call) Run(run func(_a0 context.Context, _a1 git.CreateCherryPickArgs)) *Client_CreateCherryPick_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.CreateCherryPickArgs))
	})
	return _c
}

func (_c *Client_CreateCherryPick_Call) Return(_a0 *git.GitCherryPick, _a1 error) *Client_CreateCherryPick_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_CreateCherryPick_Call) RunAndReturn(run func(context.Context, git.CreateCherryPickArgs) (*git.GitCherryPick, error)) *Client_CreateCherryPick_Call {
	_c.Call.Return(run)
	return _c
}

// CreateComment provides a mock function with given fields: _a0, _a1
func (_m *Client) CreateComment(_a0 context.Context, _a1 git.CreateCommentArgs) (*git.Comment, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateComment")
	}

	var r0 *git.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.CreateCommentArgs) (*git.Comment, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.CreateCommentArgs) *git.Comment); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*git.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.CreateCommentArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_CreateComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateComment'
type Client_CreateComment_Call struct {
	*mock.Call
}

// CreateComment is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.CreateCommentArgs
func (_e *Client_Expecter) CreateComment(_a0 interface{}, _a1 interface{}) *Client_CreateComment_Call {
	return &Client_CreateComment_Call{Call: _e.mock.On("CreateComment", _a0, _a1)}
}

func (_c *Client_CreateComment_Call) Run(run func(_a0 context.Context, _a1 git.CreateCommentArgs)) *Client_CreateComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.CreateCommentArgs))
	})
	return _c
}

func (_c *Client_CreateComment_Call) Return(_a0 *git.Comment, _a1 error) *Client_CreateComment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_CreateComment_Call) RunAndReturn(run func(context.Context, git.CreateCommentArgs) (*git.Comment, error)) *Client_CreateComment_Call {
	_c.Call.Return(run)
	return _c
}

// CreateCommitStatus provides a mock function with given fields: _a0, _a1
func (_m *Client) CreateCommitStatus(_a0 context.Context, _a1 git.CreateCommitStatusArgs) (*git.GitStatus, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateCommitStatus")
	}

	var r0 *git.GitStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.CreateCommitStatusArgs) (*git.GitStatus, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.CreateCommitStatusArgs) *git.GitStatus); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*git.GitStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.CreateCommitStatusArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_CreateCommitStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCommitStatus'
type Client_CreateCommitStatus_Call struct {
	*mock.Call
}

// CreateCommitStatus is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.CreateCommitStatusArgs
func (_e *Client_Expecter) CreateCommitStatus(_a0 interface{}, _a1 interface{}) *Client_CreateCommitStatus_Call {
	return &Client_CreateCommitStatus_Call{Call: _e.mock.On("CreateCommitStatus", _a0, _a1)}
}

func (_c *Client_CreateCommitStatus_Call) Run(run func(_a0 context.Context, _a1 git.CreateCommitStatusArgs)) *Client_CreateCommitStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.CreateCommitStatusArgs))
	})
	return _c
}

func (_c *Client_CreateCommitStatus_Call) Return(_a0 *git.GitStatus, _a1 error) *Client_CreateCommitStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_CreateCommitStatus_Call) RunAndReturn(run func(context.Context, git.CreateCommitStatusArgs) (*git.GitStatus, error)) *Client_CreateCommitStatus_Call {
	_c.Call.Return(run)
	return _c
}

// CreateFavorite provides a mock function with given fields: _a0, _a1
func (_m *Client) CreateFavorite(_a0 context.Context, _a1 git.CreateFavoriteArgs) (*git.GitRefFavorite, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateFavorite")
	}

	var r0 *git.GitRefFavorite
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.CreateFavoriteArgs) (*git.GitRefFavorite, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.CreateFavoriteArgs) *git.GitRefFavorite); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*git.GitRefFavorite)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.CreateFavoriteArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_CreateFavorite_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateFavorite'
type Client_CreateFavorite_Call struct {
	*mock.Call
}

// CreateFavorite is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.CreateFavoriteArgs
func (_e *Client_Expecter) CreateFavorite(_a0 interface{}, _a1 interface{}) *Client_CreateFavorite_Call {
	return &Client_CreateFavorite_Call{Call: _e.mock.On("CreateFavorite", _a0, _a1)}
}

func (_c *Client_CreateFavorite_Call) Run(run func(_a0 context.Context, _a1 git.CreateFavoriteArgs)) *Client_CreateFavorite_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.CreateFavoriteArgs))
	})
	return _c
}

func (_c *Client_CreateFavorite_Call) Return(_a0 *git.GitRefFavorite, _a1 error) *Client_CreateFavorite_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_CreateFavorite_Call) RunAndReturn(run func(context.Context, git.CreateFavoriteArgs) (*git.GitRefFavorite, error)) *Client_CreateFavorite_Call {
	_c.Call.Return(run)
	return _c
}

// CreateForkSyncRequest provides a mock function with given fields: _a0, _a1
func (_m *Client) CreateForkSyncRequest(_a0 context.Context, _a1 git.CreateForkSyncRequestArgs) (*git.GitForkSyncRequest, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateForkSyncRequest")
	}

	var r0 *git.GitForkSyncRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.CreateForkSyncRequestArgs) (*git.GitForkSyncRequest, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.CreateForkSyncRequestArgs) *git.GitForkSyncRequest); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*git.GitForkSyncRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.CreateForkSyncRequestArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_CreateForkSyncRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateForkSyncRequest'
type Client_CreateForkSyncRequest_Call struct {
	*mock.Call
}

// CreateForkSyncRequest is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.CreateForkSyncRequestArgs
func (_e *Client_Expecter) CreateForkSyncRequest(_a0 interface{}, _a1 interface{}) *Client_CreateForkSyncRequest_Call {
	return &Client_CreateForkSyncRequest_Call{Call: _e.mock.On("CreateForkSyncRequest", _a0, _a1)}
}

func (_c *Client_CreateForkSyncRequest_Call) Run(run func(_a0 context.Context, _a1 git.CreateForkSyncRequestArgs)) *Client_CreateForkSyncRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.CreateForkSyncRequestArgs))
	})
	return _c
}

func (_c *Client_CreateForkSyncRequest_Call) Return(_a0 *git.GitForkSyncRequest, _a1 error) *Client_CreateForkSyncRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_CreateForkSyncRequest_Call) RunAndReturn(run func(context.Context, git.CreateForkSyncRequestArgs) (*git.GitForkSyncRequest, error)) *Client_CreateForkSyncRequest_Call {
	_c.Call.Return(run)
	return _c
}

// CreateImportRequest provides a mock function with given fields: _a0, _a1
func (_m *Client) CreateImportRequest(_a0 context.Context, _a1 git.CreateImportRequestArgs) (*git.GitImportRequest, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateImportRequest")
	}

	var r0 *git.GitImportRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.CreateImportRequestArgs) (*git.GitImportRequest, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.CreateImportRequestArgs) *git.GitImportRequest); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*git.GitImportRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.CreateImportRequestArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_CreateImportRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateImportRequest'
type Client_CreateImportRequest_Call struct {
	*mock.Call
}

// CreateImportRequest is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.CreateImportRequestArgs
func (_e *Client_Expecter) CreateImportRequest(_a0 interface{}, _a1 interface{}) *Client_CreateImportRequest_Call {
	return &Client_CreateImportRequest_Call{Call: _e.mock.On("CreateImportRequest", _a0, _a1)}
}

func (_c *Client_CreateImportRequest_Call) Run(run func(_a0 context.Context, _a1 git.CreateImportRequestArgs)) *Client_CreateImportRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.CreateImportRequestArgs))
	})
	return _c
}

func (_c *Client_CreateImportRequest_Call) Return(_a0 *git.GitImportRequest, _a1 error) *Client_CreateImportRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_CreateImportRequest_Call) RunAndReturn(run func(context.Context, git.CreateImportRequestArgs) (*git.GitImportRequest, error)) *Client_CreateImportRequest_Call {
	_c.Call.Return(run)
	return _c
}

// CreateLike provides a mock function with given fields: _a0, _a1
func (_m *Client) CreateLike(_a0 context.Context, _a1 git.CreateLikeArgs) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateLike")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, git.CreateLikeArgs) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_CreateLike_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateLike'
type Client_CreateLike_Call struct {
	*mock.Call
}

// CreateLike is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.CreateLikeArgs
func (_e *Client_Expecter) CreateLike(_a0 interface{}, _a1 interface{}) *Client_CreateLike_Call {
	return &Client_CreateLike_Call{Call: _e.mock.On("CreateLike", _a0, _a1)}
}

func (_c *Client_CreateLike_Call) Run(run func(_a0 context.Context, _a1 git.CreateLikeArgs)) *Client_CreateLike_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.CreateLikeArgs))
	})
	return _c
}

func (_c *Client_CreateLike_Call) Return(_a0 error) *Client_CreateLike_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_CreateLike_Call) RunAndReturn(run func(context.Context, git.CreateLikeArgs) error) *Client_CreateLike_Call {
	_c.Call.Return(run)
	return _c
}

// CreateMergeRequest provides a mock function with given fields: _a0, _a1
func (_m *Client) CreateMergeRequest(_a0 context.Context, _a1 git.CreateMergeRequestArgs) (*git.GitMerge, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateMergeRequest")
	}

	var r0 *git.GitMerge
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.CreateMergeRequestArgs) (*git.GitMerge, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.CreateMergeRequestArgs) *git.GitMerge); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*git.GitMerge)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.CreateMergeRequestArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_CreateMergeRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateMergeRequest'
type Client_CreateMergeRequest_Call struct {
	*mock.Call
}

// CreateMergeRequest is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.CreateMergeRequestArgs
func (_e *Client_Expecter) CreateMergeRequest(_a0 interface{}, _a1 interface{}) *Client_CreateMergeRequest_Call {
	return &Client_CreateMergeRequest_Call{Call: _e.mock.On("CreateMergeRequest", _a0, _a1)}
}

func (_c *Client_CreateMergeRequest_Call) Run(run func(_a0 context.Context, _a1 git.CreateMergeRequestArgs)) *Client_CreateMergeRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.CreateMergeRequestArgs))
	})
	return _c
}

func (_c *Client_CreateMergeRequest_Call) Return(_a0 *git.GitMerge, _a1 error) *Client_CreateMergeRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_CreateMergeRequest_Call) RunAndReturn(run func(context.Context, git.CreateMergeRequestArgs) (*git.GitMerge, error)) *Client_CreateMergeRequest_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePullRequest provides a mock function with given fields: _a0, _a1
func (_m *Client) CreatePullRequest(_a0 context.Context, _a1 git.CreatePullRequestArgs) (*git.GitPullRequest, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreatePullRequest")
	}

	var r0 *git.GitPullRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.CreatePullRequestArgs) (*git.GitPullRequest, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.CreatePullRequestArgs) *git.GitPullRequest); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*git.GitPullRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.CreatePullRequestArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_CreatePullRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePullRequest'
type Client_CreatePullRequest_Call struct {
	*mock.Call
}

// CreatePullRequest is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.CreatePullRequestArgs
func (_e *Client_Expecter) CreatePullRequest(_a0 interface{}, _a1 interface{}) *Client_CreatePullRequest_Call {
	return &Client_CreatePullRequest_Call{Call: _e.mock.On("CreatePullRequest", _a0, _a1)}
}

func (_c *Client_CreatePullRequest_Call) Run(run func(_a0 context.Context, _a1 git.CreatePullRequestArgs)) *Client_CreatePullRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.CreatePullRequestArgs))
	})
	return _c
}

func (_c *Client_CreatePullRequest_Call) Return(_a0 *git.GitPullRequest, _a1 error) *Client_CreatePullRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_CreatePullRequest_Call) RunAndReturn(run func(context.Context, git.CreatePullRequestArgs) (*git.GitPullRequest, error)) *Client_CreatePullRequest_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePullRequestIterationStatus provides a mock function with given fields: _a0, _a1
func (_m *Client) CreatePullRequestIterationStatus(_a0 context.Context, _a1 git.CreatePullRequestIterationStatusArgs) (*git.GitPullRequestStatus, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreatePullRequestIterationStatus")
	}

	var r0 *git.GitPullRequestStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.CreatePullRequestIterationStatusArgs) (*git.GitPullRequestStatus, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.CreatePullRequestIterationStatusArgs) *git.GitPullRequestStatus); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*git.GitPullRequestStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.CreatePullRequestIterationStatusArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_CreatePullRequestIterationStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePullRequestIterationStatus'
type Client_CreatePullRequestIterationStatus_Call struct {
	*mock.Call
}

// CreatePullRequestIterationStatus is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.CreatePullRequestIterationStatusArgs
func (_e *Client_Expecter) CreatePullRequestIterationStatus(_a0 interface{}, _a1 interface{}) *Client_CreatePullRequestIterationStatus_Call {
	return &Client_CreatePullRequestIterationStatus_Call{Call: _e.mock.On("CreatePullRequestIterationStatus", _a0, _a1)}
}

func (_c *Client_CreatePullRequestIterationStatus_Call) Run(run func(_a0 context.Context, _a1 git.CreatePullRequestIterationStatusArgs)) *Client_CreatePullRequestIterationStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.CreatePullRequestIterationStatusArgs))
	})
	return _c
}

func (_c *Client_CreatePullRequestIterationStatus_Call) Return(_a0 *git.GitPullRequestStatus, _a1 error) *Client_CreatePullRequestIterationStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_CreatePullRequestIterationStatus_Call) RunAndReturn(run func(context.Context, git.CreatePullRequestIterationStatusArgs) (*git.GitPullRequestStatus, error)) *Client_CreatePullRequestIterationStatus_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePullRequestLabel provides a mock function with given fields: _a0, _a1
func (_m *Client) CreatePullRequestLabel(_a0 context.Context, _a1 git.CreatePullRequestLabelArgs) (*core.WebApiTagDefinition, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreatePullRequestLabel")
	}

	var r0 *core.WebApiTagDefinition
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.CreatePullRequestLabelArgs) (*core.WebApiTagDefinition, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.CreatePullRequestLabelArgs) *core.WebApiTagDefinition); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.WebApiTagDefinition)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.CreatePullRequestLabelArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_CreatePullRequestLabel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePullRequestLabel'
type Client_CreatePullRequestLabel_Call struct {
	*mock.Call
}

// CreatePullRequestLabel is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.CreatePullRequestLabelArgs
func (_e *Client_Expecter) CreatePullRequestLabel(_a0 interface{}, _a1 interface{}) *Client_CreatePullRequestLabel_Call {
	return &Client_CreatePullRequestLabel_Call{Call: _e.mock.On("CreatePullRequestLabel", _a0, _a1)}
}

func (_c *Client_CreatePullRequestLabel_Call) Run(run func(_a0 context.Context, _a1 git.CreatePullRequestLabelArgs)) *Client_CreatePullRequestLabel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.CreatePullRequestLabelArgs))
	})
	return _c
}

func (_c *Client_CreatePullRequestLabel_Call) Return(_a0 *core.WebApiTagDefinition, _a1 error) *Client_CreatePullRequestLabel_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_CreatePullRequestLabel_Call) RunAndReturn(run func(context.Context, git.CreatePullRequestLabelArgs) (*core.WebApiTagDefinition, error)) *Client_CreatePullRequestLabel_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePullRequestReviewer provides a mock function with given fields: _a0, _a1
func (_m *Client) CreatePullRequestReviewer(_a0 context.Context, _a1 git.CreatePullRequestReviewerArgs) (*git.IdentityRefWithVote, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreatePullRequestReviewer")
	}

	var r0 *git.IdentityRefWithVote
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.CreatePullRequestReviewerArgs) (*git.IdentityRefWithVote, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.CreatePullRequestReviewerArgs) *git.IdentityRefWithVote); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*git.IdentityRefWithVote)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.CreatePullRequestReviewerArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_CreatePullRequestReviewer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePullRequestReviewer'
type Client_CreatePullRequestReviewer_Call struct {
	*mock.Call
}

// CreatePullRequestReviewer is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.CreatePullRequestReviewerArgs
func (_e *Client_Expecter) CreatePullRequestReviewer(_a0 interface{}, _a1 interface{}) *Client_CreatePullRequestReviewer_Call {
	return &Client_CreatePullRequestReviewer_Call{Call: _e.mock.On("CreatePullRequestReviewer", _a0, _a1)}
}

func (_c *Client_CreatePullRequestReviewer_Call) Run(run func(_a0 context.Context, _a1 git.CreatePullRequestReviewerArgs)) *Client_CreatePullRequestReviewer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.CreatePullRequestReviewerArgs))
	})
	return _c
}

func (_c *Client_CreatePullRequestReviewer_Call) Return(_a0 *git.IdentityRefWithVote, _a1 error) *Client_CreatePullRequestReviewer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_CreatePullRequestReviewer_Call) RunAndReturn(run func(context.Context, git.CreatePullRequestReviewerArgs) (*git.IdentityRefWithVote, error)) *Client_CreatePullRequestReviewer_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePullRequestReviewers provides a mock function with given fields: _a0, _a1
func (_m *Client) CreatePullRequestReviewers(_a0 context.Context, _a1 git.CreatePullRequestReviewersArgs) (*[]git.IdentityRefWithVote, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreatePullRequestReviewers")
	}

	var r0 *[]git.IdentityRefWithVote
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.CreatePullRequestReviewersArgs) (*[]git.IdentityRefWithVote, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.CreatePullRequestReviewersArgs) *[]git.IdentityRefWithVote); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]git.IdentityRefWithVote)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.CreatePullRequestReviewersArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_CreatePullRequestReviewers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePullRequestReviewers'
type Client_CreatePullRequestReviewers_Call struct {
	*mock.Call
}

// CreatePullRequestReviewers is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.CreatePullRequestReviewersArgs
func (_e *Client_Expecter) CreatePullRequestReviewers(_a0 interface{}, _a1 interface{}) *Client_CreatePullRequestReviewers_Call {
	return &Client_CreatePullRequestReviewers_Call{Call: _e.mock.On("CreatePullRequestReviewers", _a0, _a1)}
}

func (_c *Client_CreatePullRequestReviewers_Call) Run(run func(_a0 context.Context, _a1 git.CreatePullRequestReviewersArgs)) *Client_CreatePullRequestReviewers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.CreatePullRequestReviewersArgs))
	})
	return _c
}

func (_c *Client_CreatePullRequestReviewers_Call) Return(_a0 *[]git.IdentityRefWithVote, _a1 error) *Client_CreatePullRequestReviewers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_CreatePullRequestReviewers_Call) RunAndReturn(run func(context.Context, git.CreatePullRequestReviewersArgs) (*[]git.IdentityRefWithVote, error)) *Client_CreatePullRequestReviewers_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePullRequestStatus provides a mock function with given fields: _a0, _a1
func (_m *Client) CreatePullRequestStatus(_a0 context.Context, _a1 git.CreatePullRequestStatusArgs) (*git.GitPullRequestStatus, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreatePullRequestStatus")
	}

	var r0 *git.GitPullRequestStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.CreatePullRequestStatusArgs) (*git.GitPullRequestStatus, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.CreatePullRequestStatusArgs) *git.GitPullRequestStatus); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*git.GitPullRequestStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.CreatePullRequestStatusArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_CreatePullRequestStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePullRequestStatus'
type Client_CreatePullRequestStatus_Call struct {
	*mock.Call
}

// CreatePullRequestStatus is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.CreatePullRequestStatusArgs
func (_e *Client_Expecter) CreatePullRequestStatus(_a0 interface{}, _a1 interface{}) *Client_CreatePullRequestStatus_Call {
	return &Client_CreatePullRequestStatus_Call{Call: _e.mock.On("CreatePullRequestStatus", _a0, _a1)}
}

func (_c *Client_CreatePullRequestStatus_Call) Run(run func(_a0 context.Context, _a1 git.CreatePullRequestStatusArgs)) *Client_CreatePullRequestStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.CreatePullRequestStatusArgs))
	})
	return _c
}

func (_c *Client_CreatePullRequestStatus_Call) Return(_a0 *git.GitPullRequestStatus, _a1 error) *Client_CreatePullRequestStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_CreatePullRequestStatus_Call) RunAndReturn(run func(context.Context, git.CreatePullRequestStatusArgs) (*git.GitPullRequestStatus, error)) *Client_CreatePullRequestStatus_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePush provides a mock function with given fields: _a0, _a1
func (_m *Client) CreatePush(_a0 context.Context, _a1 git.CreatePushArgs) (*git.GitPush, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreatePush")
	}

	var r0 *git.GitPush
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.CreatePushArgs) (*git.GitPush, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.CreatePushArgs) *git.GitPush); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*git.GitPush)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.CreatePushArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_CreatePush_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePush'
type Client_CreatePush_Call struct {
	*mock.Call
}

// CreatePush is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.CreatePushArgs
func (_e *Client_Expecter) CreatePush(_a0 interface{}, _a1 interface{}) *Client_CreatePush_Call {
	return &Client_CreatePush_Call{Call: _e.mock.On("CreatePush", _a0, _a1)}
}

func (_c *Client_CreatePush_Call) Run(run func(_a0 context.Context, _a1 git.CreatePushArgs)) *Client_CreatePush_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.CreatePushArgs))
	})
	return _c
}

func (_c *Client_CreatePush_Call) Return(_a0 *git.GitPush, _a1 error) *Client_CreatePush_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_CreatePush_Call) RunAndReturn(run func(context.Context, git.CreatePushArgs) (*git.GitPush, error)) *Client_CreatePush_Call {
	_c.Call.Return(run)
	return _c
}

// CreateRepository provides a mock function with given fields: _a0, _a1
func (_m *Client) CreateRepository(_a0 context.Context, _a1 git.CreateRepositoryArgs) (*git.GitRepository, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateRepository")
	}

	var r0 *git.GitRepository
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.CreateRepositoryArgs) (*git.GitRepository, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.CreateRepositoryArgs) *git.GitRepository); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*git.GitRepository)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.CreateRepositoryArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_CreateRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRepository'
type Client_CreateRepository_Call struct {
	*mock.Call
}

// CreateRepository is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.CreateRepositoryArgs
func (_e *Client_Expecter) CreateRepository(_a0 interface{}, _a1 interface{}) *Client_CreateRepository_Call {
	return &Client_CreateRepository_Call{Call: _e.mock.On("CreateRepository", _a0, _a1)}
}

func (_c *Client_CreateRepository_Call) Run(run func(_a0 context.Context, _a1 git.CreateRepositoryArgs)) *Client_CreateRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.CreateRepositoryArgs))
	})
	return _c
}

func (_c *Client_CreateRepository_Call) Return(_a0 *git.GitRepository, _a1 error) *Client_CreateRepository_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_CreateRepository_Call) RunAndReturn(run func(context.Context, git.CreateRepositoryArgs) (*git.GitRepository, error)) *Client_CreateRepository_Call {
	_c.Call.Return(run)
	return _c
}

// CreateRevert provides a mock function with given fields: _a0, _a1
func (_m *Client) CreateRevert(_a0 context.Context, _a1 git.CreateRevertArgs) (*git.GitRevert, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateRevert")
	}

	var r0 *git.GitRevert
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.CreateRevertArgs) (*git.GitRevert, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.CreateRevertArgs) *git.GitRevert); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*git.GitRevert)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.CreateRevertArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_CreateRevert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRevert'
type Client_CreateRevert_Call struct {
	*mock.Call
}

// CreateRevert is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.CreateRevertArgs
func (_e *Client_Expecter) CreateRevert(_a0 interface{}, _a1 interface{}) *Client_CreateRevert_Call {
	return &Client_CreateRevert_Call{Call: _e.mock.On("CreateRevert", _a0, _a1)}
}

func (_c *Client_CreateRevert_Call) Run(run func(_a0 context.Context, _a1 git.CreateRevertArgs)) *Client_CreateRevert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.CreateRevertArgs))
	})
	return _c
}

func (_c *Client_CreateRevert_Call) Return(_a0 *git.GitRevert, _a1 error) *Client_CreateRevert_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_CreateRevert_Call) RunAndReturn(run func(context.Context, git.CreateRevertArgs) (*git.GitRevert, error)) *Client_CreateRevert_Call {
	_c.Call.Return(run)
	return _c
}

// CreateThread provides a mock function with given fields: _a0, _a1
func (_m *Client) CreateThread(_a0 context.Context, _a1 git.CreateThreadArgs) (*git.GitPullRequestCommentThread, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateThread")
	}

	var r0 *git.GitPullRequestCommentThread
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.CreateThreadArgs) (*git.GitPullRequestCommentThread, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.CreateThreadArgs) *git.GitPullRequestCommentThread); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*git.GitPullRequestCommentThread)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.CreateThreadArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_CreateThread_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateThread'
type Client_CreateThread_Call struct {
	*mock.Call
}

// CreateThread is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.CreateThreadArgs
func (_e *Client_Expecter) CreateThread(_a0 interface{}, _a1 interface{}) *Client_CreateThread_Call {
	return &Client_CreateThread_Call{Call: _e.mock.On("CreateThread", _a0, _a1)}
}

func (_c *Client_CreateThread_Call) Run(run func(_a0 context.Context, _a1 git.CreateThreadArgs)) *Client_CreateThread_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.CreateThreadArgs))
	})
	return _c
}

func (_c *Client_CreateThread_Call) Return(_a0 *git.GitPullRequestCommentThread, _a1 error) *Client_CreateThread_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_CreateThread_Call) RunAndReturn(run func(context.Context, git.CreateThreadArgs) (*git.GitPullRequestCommentThread, error)) *Client_CreateThread_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUnmaterializedPullRequestReviewer provides a mock function with given fields: _a0, _a1
func (_m *Client) CreateUnmaterializedPullRequestReviewer(_a0 context.Context, _a1 git.CreateUnmaterializedPullRequestReviewerArgs) (*git.IdentityRefWithVote, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateUnmaterializedPullRequestReviewer")
	}

	var r0 *git.IdentityRefWithVote
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.CreateUnmaterializedPullRequestReviewerArgs) (*git.IdentityRefWithVote, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.CreateUnmaterializedPullRequestReviewerArgs) *git.IdentityRefWithVote); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*git.IdentityRefWithVote)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.CreateUnmaterializedPullRequestReviewerArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_CreateUnmaterializedPullRequestReviewer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUnmaterializedPullRequestReviewer'
type Client_CreateUnmaterializedPullRequestReviewer_Call struct {
	*mock.Call
}

// CreateUnmaterializedPullRequestReviewer is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.CreateUnmaterializedPullRequestReviewerArgs
func (_e *Client_Expecter) CreateUnmaterializedPullRequestReviewer(_a0 interface{}, _a1 interface{}) *Client_CreateUnmaterializedPullRequestReviewer_Call {
	return &Client_CreateUnmaterializedPullRequestReviewer_Call{Call: _e.mock.On("CreateUnmaterializedPullRequestReviewer", _a0, _a1)}
}

func (_c *Client_CreateUnmaterializedPullRequestReviewer_Call) Run(run func(_a0 context.Context, _a1 git.CreateUnmaterializedPullRequestReviewerArgs)) *Client_CreateUnmaterializedPullRequestReviewer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.CreateUnmaterializedPullRequestReviewerArgs))
	})
	return _c
}

func (_c *Client_CreateUnmaterializedPullRequestReviewer_Call) Return(_a0 *git.IdentityRefWithVote, _a1 error) *Client_CreateUnmaterializedPullRequestReviewer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_CreateUnmaterializedPullRequestReviewer_Call) RunAndReturn(run func(context.Context, git.CreateUnmaterializedPullRequestReviewerArgs) (*git.IdentityRefWithVote, error)) *Client_CreateUnmaterializedPullRequestReviewer_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAttachment provides a mock function with given fields: _a0, _a1
func (_m *Client) DeleteAttachment(_a0 context.Context, _a1 git.DeleteAttachmentArgs) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAttachment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, git.DeleteAttachmentArgs) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_DeleteAttachment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAttachment'
type Client_DeleteAttachment_Call struct {
	*mock.Call
}

// DeleteAttachment is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.DeleteAttachmentArgs
func (_e *Client_Expecter) DeleteAttachment(_a0 interface{}, _a1 interface{}) *Client_DeleteAttachment_Call {
	return &Client_DeleteAttachment_Call{Call: _e.mock.On("DeleteAttachment", _a0, _a1)}
}

func (_c *Client_DeleteAttachment_Call) Run(run func(_a0 context.Context, _a1 git.DeleteAttachmentArgs)) *Client_DeleteAttachment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.DeleteAttachmentArgs))
	})
	return _c
}

func (_c *Client_DeleteAttachment_Call) Return(_a0 error) *Client_DeleteAttachment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_DeleteAttachment_Call) RunAndReturn(run func(context.Context, git.DeleteAttachmentArgs) error) *Client_DeleteAttachment_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteComment provides a mock function with given fields: _a0, _a1
func (_m *Client) DeleteComment(_a0 context.Context, _a1 git.DeleteCommentArgs) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DeleteComment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, git.DeleteCommentArgs) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_DeleteComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteComment'
type Client_DeleteComment_Call struct {
	*mock.Call
}

// DeleteComment is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.DeleteCommentArgs
func (_e *Client_Expecter) DeleteComment(_a0 interface{}, _a1 interface{}) *Client_DeleteComment_Call {
	return &Client_DeleteComment_Call{Call: _e.mock.On("DeleteComment", _a0, _a1)}
}

func (_c *Client_DeleteComment_Call) Run(run func(_a0 context.Context, _a1 git.DeleteCommentArgs)) *Client_DeleteComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.DeleteCommentArgs))
	})
	return _c
}

func (_c *Client_DeleteComment_Call) Return(_a0 error) *Client_DeleteComment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_DeleteComment_Call) RunAndReturn(run func(context.Context, git.DeleteCommentArgs) error) *Client_DeleteComment_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteLike provides a mock function with given fields: _a0, _a1
func (_m *Client) DeleteLike(_a0 context.Context, _a1 git.DeleteLikeArgs) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLike")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, git.DeleteLikeArgs) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_DeleteLike_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteLike'
type Client_DeleteLike_Call struct {
	*mock.Call
}

// DeleteLike is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.DeleteLikeArgs
func (_e *Client_Expecter) DeleteLike(_a0 interface{}, _a1 interface{}) *Client_DeleteLike_Call {
	return &Client_DeleteLike_Call{Call: _e.mock.On("DeleteLike", _a0, _a1)}
}

func (_c *Client_DeleteLike_Call) Run(run func(_a0 context.Context, _a1 git.DeleteLikeArgs)) *Client_DeleteLike_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.DeleteLikeArgs))
	})
	return _c
}

func (_c *Client_DeleteLike_Call) Return(_a0 error) *Client_DeleteLike_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_DeleteLike_Call) RunAndReturn(run func(context.Context, git.DeleteLikeArgs) error) *Client_DeleteLike_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePullRequestIterationStatus provides a mock function with given fields: _a0, _a1
func (_m *Client) DeletePullRequestIterationStatus(_a0 context.Context, _a1 git.DeletePullRequestIterationStatusArgs) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DeletePullRequestIterationStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, git.DeletePullRequestIterationStatusArgs) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_DeletePullRequestIterationStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePullRequestIterationStatus'
type Client_DeletePullRequestIterationStatus_Call struct {
	*mock.Call
}

// DeletePullRequestIterationStatus is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.DeletePullRequestIterationStatusArgs
func (_e *Client_Expecter) DeletePullRequestIterationStatus(_a0 interface{}, _a1 interface{}) *Client_DeletePullRequestIterationStatus_Call {
	return &Client_DeletePullRequestIterationStatus_Call{Call: _e.mock.On("DeletePullRequestIterationStatus", _a0, _a1)}
}

func (_c *Client_DeletePullRequestIterationStatus_Call) Run(run func(_a0 context.Context, _a1 git.DeletePullRequestIterationStatusArgs)) *Client_DeletePullRequestIterationStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.DeletePullRequestIterationStatusArgs))
	})
	return _c
}

func (_c *Client_DeletePullRequestIterationStatus_Call) Return(_a0 error) *Client_DeletePullRequestIterationStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_DeletePullRequestIterationStatus_Call) RunAndReturn(run func(context.Context, git.DeletePullRequestIterationStatusArgs) error) *Client_DeletePullRequestIterationStatus_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePullRequestLabels provides a mock function with given fields: _a0, _a1
func (_m *Client) DeletePullRequestLabels(_a0 context.Context, _a1 git.DeletePullRequestLabelsArgs) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DeletePullRequestLabels")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, git.DeletePullRequestLabelsArgs) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_DeletePullRequestLabels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePullRequestLabels'
type Client_DeletePullRequestLabels_Call struct {
	*mock.Call
}

// DeletePullRequestLabels is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.DeletePullRequestLabelsArgs
func (_e *Client_Expecter) DeletePullRequestLabels(_a0 interface{}, _a1 interface{}) *Client_DeletePullRequestLabels_Call {
	return &Client_DeletePullRequestLabels_Call{Call: _e.mock.On("DeletePullRequestLabels", _a0, _a1)}
}

func (_c *Client_DeletePullRequestLabels_Call) Run(run func(_a0 context.Context, _a1 git.DeletePullRequestLabelsArgs)) *Client_DeletePullRequestLabels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.DeletePullRequestLabelsArgs))
	})
	return _c
}

func (_c *Client_DeletePullRequestLabels_Call) Return(_a0 error) *Client_DeletePullRequestLabels_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_DeletePullRequestLabels_Call) RunAndReturn(run func(context.Context, git.DeletePullRequestLabelsArgs) error) *Client_DeletePullRequestLabels_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePullRequestReviewer provides a mock function with given fields: _a0, _a1
func (_m *Client) DeletePullRequestReviewer(_a0 context.Context, _a1 git.DeletePullRequestReviewerArgs) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DeletePullRequestReviewer")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, git.DeletePullRequestReviewerArgs) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_DeletePullRequestReviewer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePullRequestReviewer'
type Client_DeletePullRequestReviewer_Call struct {
	*mock.Call
}

// DeletePullRequestReviewer is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.DeletePullRequestReviewerArgs
func (_e *Client_Expecter) DeletePullRequestReviewer(_a0 interface{}, _a1 interface{}) *Client_DeletePullRequestReviewer_Call {
	return &Client_DeletePullRequestReviewer_Call{Call: _e.mock.On("DeletePullRequestReviewer", _a0, _a1)}
}

func (_c *Client_DeletePullRequestReviewer_Call) Run(run func(_a0 context.Context, _a1 git.DeletePullRequestReviewerArgs)) *Client_DeletePullRequestReviewer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.DeletePullRequestReviewerArgs))
	})
	return _c
}

func (_c *Client_DeletePullRequestReviewer_Call) Return(_a0 error) *Client_DeletePullRequestReviewer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_DeletePullRequestReviewer_Call) RunAndReturn(run func(context.Context, git.DeletePullRequestReviewerArgs) error) *Client_DeletePullRequestReviewer_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePullRequestStatus provides a mock function with given fields: _a0, _a1
func (_m *Client) DeletePullRequestStatus(_a0 context.Context, _a1 git.DeletePullRequestStatusArgs) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DeletePullRequestStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, git.DeletePullRequestStatusArgs) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_DeletePullRequestStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePullRequestStatus'
type Client_DeletePullRequestStatus_Call struct {
	*mock.Call
}

// DeletePullRequestStatus is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.DeletePullRequestStatusArgs
func (_e *Client_Expecter) DeletePullRequestStatus(_a0 interface{}, _a1 interface{}) *Client_DeletePullRequestStatus_Call {
	return &Client_DeletePullRequestStatus_Call{Call: _e.mock.On("DeletePullRequestStatus", _a0, _a1)}
}

func (_c *Client_DeletePullRequestStatus_Call) Run(run func(_a0 context.Context, _a1 git.DeletePullRequestStatusArgs)) *Client_DeletePullRequestStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.DeletePullRequestStatusArgs))
	})
	return _c
}

func (_c *Client_DeletePullRequestStatus_Call) Return(_a0 error) *Client_DeletePullRequestStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_DeletePullRequestStatus_Call) RunAndReturn(run func(context.Context, git.DeletePullRequestStatusArgs) error) *Client_DeletePullRequestStatus_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRefFavorite provides a mock function with given fields: _a0, _a1
func (_m *Client) DeleteRefFavorite(_a0 context.Context, _a1 git.DeleteRefFavoriteArgs) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRefFavorite")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, git.DeleteRefFavoriteArgs) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_DeleteRefFavorite_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRefFavorite'
type Client_DeleteRefFavorite_Call struct {
	*mock.Call
}

// DeleteRefFavorite is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.DeleteRefFavoriteArgs
func (_e *Client_Expecter) DeleteRefFavorite(_a0 interface{}, _a1 interface{}) *Client_DeleteRefFavorite_Call {
	return &Client_DeleteRefFavorite_Call{Call: _e.mock.On("DeleteRefFavorite", _a0, _a1)}
}

func (_c *Client_DeleteRefFavorite_Call) Run(run func(_a0 context.Context, _a1 git.DeleteRefFavoriteArgs)) *Client_DeleteRefFavorite_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.DeleteRefFavoriteArgs))
	})
	return _c
}

func (_c *Client_DeleteRefFavorite_Call) Return(_a0 error) *Client_DeleteRefFavorite_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_DeleteRefFavorite_Call) RunAndReturn(run func(context.Context, git.DeleteRefFavoriteArgs) error) *Client_DeleteRefFavorite_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRepository provides a mock function with given fields: _a0, _a1
func (_m *Client) DeleteRepository(_a0 context.Context, _a1 git.DeleteRepositoryArgs) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRepository")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, git.DeleteRepositoryArgs) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_DeleteRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRepository'
type Client_DeleteRepository_Call struct {
	*mock.Call
}

// DeleteRepository is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.DeleteRepositoryArgs
func (_e *Client_Expecter) DeleteRepository(_a0 interface{}, _a1 interface{}) *Client_DeleteRepository_Call {
	return &Client_DeleteRepository_Call{Call: _e.mock.On("DeleteRepository", _a0, _a1)}
}

func (_c *Client_DeleteRepository_Call) Run(run func(_a0 context.Context, _a1 git.DeleteRepositoryArgs)) *Client_DeleteRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.DeleteRepositoryArgs))
	})
	return _c
}

func (_c *Client_DeleteRepository_Call) Return(_a0 error) *Client_DeleteRepository_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_DeleteRepository_Call) RunAndReturn(run func(context.Context, git.DeleteRepositoryArgs) error) *Client_DeleteRepository_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRepositoryFromRecycleBin provides a mock function with given fields: _a0, _a1
func (_m *Client) DeleteRepositoryFromRecycleBin(_a0 context.Context, _a1 git.DeleteRepositoryFromRecycleBinArgs) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRepositoryFromRecycleBin")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, git.DeleteRepositoryFromRecycleBinArgs) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_DeleteRepositoryFromRecycleBin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRepositoryFromRecycleBin'
type Client_DeleteRepositoryFromRecycleBin_Call struct {
	*mock.Call
}

// DeleteRepositoryFromRecycleBin is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.DeleteRepositoryFromRecycleBinArgs
func (_e *Client_Expecter) DeleteRepositoryFromRecycleBin(_a0 interface{}, _a1 interface{}) *Client_DeleteRepositoryFromRecycleBin_Call {
	return &Client_DeleteRepositoryFromRecycleBin_Call{Call: _e.mock.On("DeleteRepositoryFromRecycleBin", _a0, _a1)}
}

func (_c *Client_DeleteRepositoryFromRecycleBin_Call) Run(run func(_a0 context.Context, _a1 git.DeleteRepositoryFromRecycleBinArgs)) *Client_DeleteRepositoryFromRecycleBin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.DeleteRepositoryFromRecycleBinArgs))
	})
	return _c
}

func (_c *Client_DeleteRepositoryFromRecycleBin_Call) Return(_a0 error) *Client_DeleteRepositoryFromRecycleBin_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_DeleteRepositoryFromRecycleBin_Call) RunAndReturn(run func(context.Context, git.DeleteRepositoryFromRecycleBinArgs) error) *Client_DeleteRepositoryFromRecycleBin_Call {
	_c.Call.Return(run)
	return _c
}

// GetAnnotatedTag provides a mock function with given fields: _a0, _a1
func (_m *Client) GetAnnotatedTag(_a0 context.Context, _a1 git.GetAnnotatedTagArgs) (*git.GitAnnotatedTag, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetAnnotatedTag")
	}

	var r0 *git.GitAnnotatedTag
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.GetAnnotatedTagArgs) (*git.GitAnnotatedTag, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.GetAnnotatedTagArgs) *git.GitAnnotatedTag); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*git.GitAnnotatedTag)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.GetAnnotatedTagArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetAnnotatedTag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAnnotatedTag'
type Client_GetAnnotatedTag_Call struct {
	*mock.Call
}

// GetAnnotatedTag is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.GetAnnotatedTagArgs
func (_e *Client_Expecter) GetAnnotatedTag(_a0 interface{}, _a1 interface{}) *Client_GetAnnotatedTag_Call {
	return &Client_GetAnnotatedTag_Call{Call: _e.mock.On("GetAnnotatedTag", _a0, _a1)}
}

func (_c *Client_GetAnnotatedTag_Call) Run(run func(_a0 context.Context, _a1 git.GetAnnotatedTagArgs)) *Client_GetAnnotatedTag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.GetAnnotatedTagArgs))
	})
	return _c
}

func (_c *Client_GetAnnotatedTag_Call) Return(_a0 *git.GitAnnotatedTag, _a1 error) *Client_GetAnnotatedTag_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetAnnotatedTag_Call) RunAndReturn(run func(context.Context, git.GetAnnotatedTagArgs) (*git.GitAnnotatedTag, error)) *Client_GetAnnotatedTag_Call {
	_c.Call.Return(run)
	return _c
}

// GetAttachmentContent provides a mock function with given fields: _a0, _a1
func (_m *Client) GetAttachmentContent(_a0 context.Context, _a1 git.GetAttachmentContentArgs) (io.ReadCloser, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetAttachmentContent")
	}

	var r0 io.ReadCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.GetAttachmentContentArgs) (io.ReadCloser, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.GetAttachmentContentArgs) io.ReadCloser); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.GetAttachmentContentArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetAttachmentContent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAttachmentContent'
type Client_GetAttachmentContent_Call struct {
	*mock.Call
}

// GetAttachmentContent is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.GetAttachmentContentArgs
func (_e *Client_Expecter) GetAttachmentContent(_a0 interface{}, _a1 interface{}) *Client_GetAttachmentContent_Call {
	return &Client_GetAttachmentContent_Call{Call: _e.mock.On("GetAttachmentContent", _a0, _a1)}
}

func (_c *Client_GetAttachmentContent_Call) Run(run func(_a0 context.Context, _a1 git.GetAttachmentContentArgs)) *Client_GetAttachmentContent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.GetAttachmentContentArgs))
	})
	return _c
}

func (_c *Client_GetAttachmentContent_Call) Return(_a0 io.ReadCloser, _a1 error) *Client_GetAttachmentContent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetAttachmentContent_Call) RunAndReturn(run func(context.Context, git.GetAttachmentContentArgs) (io.ReadCloser, error)) *Client_GetAttachmentContent_Call {
	_c.Call.Return(run)
	return _c
}

// GetAttachmentZip provides a mock function with given fields: _a0, _a1
func (_m *Client) GetAttachmentZip(_a0 context.Context, _a1 git.GetAttachmentZipArgs) (io.ReadCloser, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetAttachmentZip")
	}

	var r0 io.ReadCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.GetAttachmentZipArgs) (io.ReadCloser, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.GetAttachmentZipArgs) io.ReadCloser); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.GetAttachmentZipArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetAttachmentZip_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAttachmentZip'
type Client_GetAttachmentZip_Call struct {
	*mock.Call
}

// GetAttachmentZip is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.GetAttachmentZipArgs
func (_e *Client_Expecter) GetAttachmentZip(_a0 interface{}, _a1 interface{}) *Client_GetAttachmentZip_Call {
	return &Client_GetAttachmentZip_Call{Call: _e.mock.On("GetAttachmentZip", _a0, _a1)}
}

func (_c *Client_GetAttachmentZip_Call) Run(run func(_a0 context.Context, _a1 git.GetAttachmentZipArgs)) *Client_GetAttachmentZip_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.GetAttachmentZipArgs))
	})
	return _c
}

func (_c *Client_GetAttachmentZip_Call) Return(_a0 io.ReadCloser, _a1 error) *Client_GetAttachmentZip_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetAttachmentZip_Call) RunAndReturn(run func(context.Context, git.GetAttachmentZipArgs) (io.ReadCloser, error)) *Client_GetAttachmentZip_Call {
	_c.Call.Return(run)
	return _c
}

// GetAttachments provides a mock function with given fields: _a0, _a1
func (_m *Client) GetAttachments(_a0 context.Context, _a1 git.GetAttachmentsArgs) (*[]git.Attachment, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetAttachments")
	}

	var r0 *[]git.Attachment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.GetAttachmentsArgs) (*[]git.Attachment, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.GetAttachmentsArgs) *[]git.Attachment); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]git.Attachment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.GetAttachmentsArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetAttachments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAttachments'
type Client_GetAttachments_Call struct {
	*mock.Call
}

// GetAttachments is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.GetAttachmentsArgs
func (_e *Client_Expecter) GetAttachments(_a0 interface{}, _a1 interface{}) *Client_GetAttachments_Call {
	return &Client_GetAttachments_Call{Call: _e.mock.On("GetAttachments", _a0, _a1)}
}

func (_c *Client_GetAttachments_Call) Run(run func(_a0 context.Context, _a1 git.GetAttachmentsArgs)) *Client_GetAttachments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.GetAttachmentsArgs))
	})
	return _c
}

func (_c *Client_GetAttachments_Call) Return(_a0 *[]git.Attachment, _a1 error) *Client_GetAttachments_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetAttachments_Call) RunAndReturn(run func(context.Context, git.GetAttachmentsArgs) (*[]git.Attachment, error)) *Client_GetAttachments_Call {
	_c.Call.Return(run)
	return _c
}

// GetBlob provides a mock function with given fields: _a0, _a1
func (_m *Client) GetBlob(_a0 context.Context, _a1 git.GetBlobArgs) (*git.GitBlobRef, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetBlob")
	}

	var r0 *git.GitBlobRef
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.GetBlobArgs) (*git.GitBlobRef, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.GetBlobArgs) *git.GitBlobRef); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*git.GitBlobRef)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.GetBlobArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetBlob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlob'
type Client_GetBlob_Call struct {
	*mock.Call
}

// GetBlob is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.GetBlobArgs
func (_e *Client_Expecter) GetBlob(_a0 interface{}, _a1 interface{}) *Client_GetBlob_Call {
	return &Client_GetBlob_Call{Call: _e.mock.On("GetBlob", _a0, _a1)}
}

func (_c *Client_GetBlob_Call) Run(run func(_a0 context.Context, _a1 git.GetBlobArgs)) *Client_GetBlob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.GetBlobArgs))
	})
	return _c
}

func (_c *Client_GetBlob_Call) Return(_a0 *git.GitBlobRef, _a1 error) *Client_GetBlob_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetBlob_Call) RunAndReturn(run func(context.Context, git.GetBlobArgs) (*git.GitBlobRef, error)) *Client_GetBlob_Call {
	_c.Call.Return(run)
	return _c
}

// GetBlobContent provides a mock function with given fields: _a0, _a1
func (_m *Client) GetBlobContent(_a0 context.Context, _a1 git.GetBlobContentArgs) (io.ReadCloser, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetBlobContent")
	}

	var r0 io.ReadCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.GetBlobContentArgs) (io.ReadCloser, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.GetBlobContentArgs) io.ReadCloser); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.GetBlobContentArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetBlobContent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlobContent'
type Client_GetBlobContent_Call struct {
	*mock.Call
}

// GetBlobContent is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.GetBlobContentArgs
func (_e *Client_Expecter) GetBlobContent(_a0 interface{}, _a1 interface{}) *Client_GetBlobContent_Call {
	return &Client_GetBlobContent_Call{Call: _e.mock.On("GetBlobContent", _a0, _a1)}
}

func (_c *Client_GetBlobContent_Call) Run(run func(_a0 context.Context, _a1 git.GetBlobContentArgs)) *Client_GetBlobContent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.GetBlobContentArgs))
	})
	return _c
}

func (_c *Client_GetBlobContent_Call) Return(_a0 io.ReadCloser, _a1 error) *Client_GetBlobContent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetBlobContent_Call) RunAndReturn(run func(context.Context, git.GetBlobContentArgs) (io.ReadCloser, error)) *Client_GetBlobContent_Call {
	_c.Call.Return(run)
	return _c
}

// GetBlobZip provides a mock function with given fields: _a0, _a1
func (_m *Client) GetBlobZip(_a0 context.Context, _a1 git.GetBlobZipArgs) (io.ReadCloser, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetBlobZip")
	}

	var r0 io.ReadCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.GetBlobZipArgs) (io.ReadCloser, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.GetBlobZipArgs) io.ReadCloser); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.GetBlobZipArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetBlobZip_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlobZip'
type Client_GetBlobZip_Call struct {
	*mock.Call
}

// GetBlobZip is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.GetBlobZipArgs
func (_e *Client_Expecter) GetBlobZip(_a0 interface{}, _a1 interface{}) *Client_GetBlobZip_Call {
	return &Client_GetBlobZip_Call{Call: _e.mock.On("GetBlobZip", _a0, _a1)}
}

func (_c *Client_GetBlobZip_Call) Run(run func(_a0 context.Context, _a1 git.GetBlobZipArgs)) *Client_GetBlobZip_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.GetBlobZipArgs))
	})
	return _c
}

func (_c *Client_GetBlobZip_Call) Return(_a0 io.ReadCloser, _a1 error) *Client_GetBlobZip_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetBlobZip_Call) RunAndReturn(run func(context.Context, git.GetBlobZipArgs) (io.ReadCloser, error)) *Client_GetBlobZip_Call {
	_c.Call.Return(run)
	return _c
}

// GetBlobsZip provides a mock function with given fields: _a0, _a1
func (_m *Client) GetBlobsZip(_a0 context.Context, _a1 git.GetBlobsZipArgs) (io.ReadCloser, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetBlobsZip")
	}

	var r0 io.ReadCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.GetBlobsZipArgs) (io.ReadCloser, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.GetBlobsZipArgs) io.ReadCloser); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.GetBlobsZipArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetBlobsZip_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlobsZip'
type Client_GetBlobsZip_Call struct {
	*mock.Call
}

// GetBlobsZip is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.GetBlobsZipArgs
func (_e *Client_Expecter) GetBlobsZip(_a0 interface{}, _a1 interface{}) *Client_GetBlobsZip_Call {
	return &Client_GetBlobsZip_Call{Call: _e.mock.On("GetBlobsZip", _a0, _a1)}
}

func (_c *Client_GetBlobsZip_Call) Run(run func(_a0 context.Context, _a1 git.GetBlobsZipArgs)) *Client_GetBlobsZip_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.GetBlobsZipArgs))
	})
	return _c
}

func (_c *Client_GetBlobsZip_Call) Return(_a0 io.ReadCloser, _a1 error) *Client_GetBlobsZip_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetBlobsZip_Call) RunAndReturn(run func(context.Context, git.GetBlobsZipArgs) (io.ReadCloser, error)) *Client_GetBlobsZip_Call {
	_c.Call.Return(run)
	return _c
}

// GetBranch provides a mock function with given fields: _a0, _a1
func (_m *Client) GetBranch(_a0 context.Context, _a1 git.GetBranchArgs) (*git.GitBranchStats, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetBranch")
	}

	var r0 *git.GitBranchStats
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.GetBranchArgs) (*git.GitBranchStats, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.GetBranchArgs) *git.GitBranchStats); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*git.GitBranchStats)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.GetBranchArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetBranch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBranch'
type Client_GetBranch_Call struct {
	*mock.Call
}

// GetBranch is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.GetBranchArgs
func (_e *Client_Expecter) GetBranch(_a0 interface{}, _a1 interface{}) *Client_GetBranch_Call {
	return &Client_GetBranch_Call{Call: _e.mock.On("GetBranch", _a0, _a1)}
}

func (_c *Client_GetBranch_Call) Run(run func(_a0 context.Context, _a1 git.GetBranchArgs)) *Client_GetBranch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.GetBranchArgs))
	})
	return _c
}

func (_c *Client_GetBranch_Call) Return(_a0 *git.GitBranchStats, _a1 error) *Client_GetBranch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetBranch_Call) RunAndReturn(run func(context.Context, git.GetBranchArgs) (*git.GitBranchStats, error)) *Client_GetBranch_Call {
	_c.Call.Return(run)
	return _c
}

// GetBranches provides a mock function with given fields: _a0, _a1
func (_m *Client) GetBranches(_a0 context.Context, _a1 git.GetBranchesArgs) (*[]git.GitBranchStats, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetBranches")
	}

	var r0 *[]git.GitBranchStats
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.GetBranchesArgs) (*[]git.GitBranchStats, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.GetBranchesArgs) *[]git.GitBranchStats); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]git.GitBranchStats)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.GetBranchesArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetBranches_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBranches'
type Client_GetBranches_Call struct {
	*mock.Call
}

// GetBranches is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.GetBranchesArgs
func (_e *Client_Expecter) GetBranches(_a0 interface{}, _a1 interface{}) *Client_GetBranches_Call {
	return &Client_GetBranches_Call{Call: _e.mock.On("GetBranches", _a0, _a1)}
}

func (_c *Client_GetBranches_Call) Run(run func(_a0 context.Context, _a1 git.GetBranchesArgs)) *Client_GetBranches_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.GetBranchesArgs))
	})
	return _c
}

func (_c *Client_GetBranches_Call) Return(_a0 *[]git.GitBranchStats, _a1 error) *Client_GetBranches_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetBranches_Call) RunAndReturn(run func(context.Context, git.GetBranchesArgs) (*[]git.GitBranchStats, error)) *Client_GetBranches_Call {
	_c.Call.Return(run)
	return _c
}

// GetChanges provides a mock function with given fields: _a0, _a1
func (_m *Client) GetChanges(_a0 context.Context, _a1 git.GetChangesArgs) (*git.GitCommitChanges, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetChanges")
	}

	var r0 *git.GitCommitChanges
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.GetChangesArgs) (*git.GitCommitChanges, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.GetChangesArgs) *git.GitCommitChanges); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*git.GitCommitChanges)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.GetChangesArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetChanges_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChanges'
type Client_GetChanges_Call struct {
	*mock.Call
}

// GetChanges is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.GetChangesArgs
func (_e *Client_Expecter) GetChanges(_a0 interface{}, _a1 interface{}) *Client_GetChanges_Call {
	return &Client_GetChanges_Call{Call: _e.mock.On("GetChanges", _a0, _a1)}
}

func (_c *Client_GetChanges_Call) Run(run func(_a0 context.Context, _a1 git.GetChangesArgs)) *Client_GetChanges_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.GetChangesArgs))
	})
	return _c
}

func (_c *Client_GetChanges_Call) Return(_a0 *git.GitCommitChanges, _a1 error) *Client_GetChanges_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetChanges_Call) RunAndReturn(run func(context.Context, git.GetChangesArgs) (*git.GitCommitChanges, error)) *Client_GetChanges_Call {
	_c.Call.Return(run)
	return _c
}

// GetCherryPick provides a mock function with given fields: _a0, _a1
func (_m *Client) GetCherryPick(_a0 context.Context, _a1 git.GetCherryPickArgs) (*git.GitCherryPick, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetCherryPick")
	}

	var r0 *git.GitCherryPick
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.GetCherryPickArgs) (*git.GitCherryPick, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.GetCherryPickArgs) *git.GitCherryPick); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*git.GitCherryPick)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.GetCherryPickArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetCherryPick_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCherryPick'
type Client_GetCherryPick_Call struct {
	*mock.Call
}

// GetCherryPick is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.GetCherryPickArgs
func (_e *Client_Expecter) GetCherryPick(_a0 interface{}, _a1 interface{}) *Client_GetCherryPick_Call {
	return &Client_GetCherryPick_Call{Call: _e.mock.On("GetCherryPick", _a0, _a1)}
}

func (_c *Client_GetCherryPick_Call) Run(run func(_a0 context.Context, _a1 git.GetCherryPickArgs)) *Client_GetCherryPick_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.GetCherryPickArgs))
	})
	return _c
}

func (_c *Client_GetCherryPick_Call) Return(_a0 *git.GitCherryPick, _a1 error) *Client_GetCherryPick_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetCherryPick_Call) RunAndReturn(run func(context.Context, git.GetCherryPickArgs) (*git.GitCherryPick, error)) *Client_GetCherryPick_Call {
	_c.Call.Return(run)
	return _c
}

// GetCherryPickForRefName provides a mock function with given fields: _a0, _a1
func (_m *Client) GetCherryPickForRefName(_a0 context.Context, _a1 git.GetCherryPickForRefNameArgs) (*git.GitCherryPick, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetCherryPickForRefName")
	}

	var r0 *git.GitCherryPick
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.GetCherryPickForRefNameArgs) (*git.GitCherryPick, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.GetCherryPickForRefNameArgs) *git.GitCherryPick); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*git.GitCherryPick)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.GetCherryPickForRefNameArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetCherryPickForRefName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCherryPickForRefName'
type Client_GetCherryPickForRefName_Call struct {
	*mock.Call
}

// GetCherryPickForRefName is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.GetCherryPickForRefNameArgs
func (_e *Client_Expecter) GetCherryPickForRefName(_a0 interface{}, _a1 interface{}) *Client_GetCherryPickForRefName_Call {
	return &Client_GetCherryPickForRefName_Call{Call: _e.mock.On("GetCherryPickForRefName", _a0, _a1)}
}

func (_c *Client_GetCherryPickForRefName_Call) Run(run func(_a0 context.Context, _a1 git.GetCherryPickForRefNameArgs)) *Client_GetCherryPickForRefName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.GetCherryPickForRefNameArgs))
	})
	return _c
}

func (_c *Client_GetCherryPickForRefName_Call) Return(_a0 *git.GitCherryPick, _a1 error) *Client_GetCherryPickForRefName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetCherryPickForRefName_Call) RunAndReturn(run func(context.Context, git.GetCherryPickForRefNameArgs) (*git.GitCherryPick, error)) *Client_GetCherryPickForRefName_Call {
	_c.Call.Return(run)
	return _c
}

// GetComment provides a mock function with given fields: _a0, _a1
func (_m *Client) GetComment(_a0 context.Context, _a1 git.GetCommentArgs) (*git.Comment, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetComment")
	}

	var r0 *git.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.GetCommentArgs) (*git.Comment, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.GetCommentArgs) *git.Comment); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*git.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.GetCommentArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetComment'
type Client_GetComment_Call struct {
	*mock.Call
}

// GetComment is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.GetCommentArgs
func (_e *Client_Expecter) GetComment(_a0 interface{}, _a1 interface{}) *Client_GetComment_Call {
	return &Client_GetComment_Call{Call: _e.mock.On("GetComment", _a0, _a1)}
}

func (_c *Client_GetComment_Call) Run(run func(_a0 context.Context, _a1 git.GetCommentArgs)) *Client_GetComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.GetCommentArgs))
	})
	return _c
}

func (_c *Client_GetComment_Call) Return(_a0 *git.Comment, _a1 error) *Client_GetComment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetComment_Call) RunAndReturn(run func(context.Context, git.GetCommentArgs) (*git.Comment, error)) *Client_GetComment_Call {
	_c.Call.Return(run)
	return _c
}

// GetComments provides a mock function with given fields: _a0, _a1
func (_m *Client) GetComments(_a0 context.Context, _a1 git.GetCommentsArgs) (*[]git.Comment, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetComments")
	}

	var r0 *[]git.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.GetCommentsArgs) (*[]git.Comment, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.GetCommentsArgs) *[]git.Comment); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]git.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.GetCommentsArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetComments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetComments'
type Client_GetComments_Call struct {
	*mock.Call
}

// GetComments is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.GetCommentsArgs
func (_e *Client_Expecter) GetComments(_a0 interface{}, _a1 interface{}) *Client_GetComments_Call {
	return &Client_GetComments_Call{Call: _e.mock.On("GetComments", _a0, _a1)}
}

func (_c *Client_GetComments_Call) Run(run func(_a0 context.Context, _a1 git.GetCommentsArgs)) *Client_GetComments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.GetCommentsArgs))
	})
	return _c
}

func (_c *Client_GetComments_Call) Return(_a0 *[]git.Comment, _a1 error) *Client_GetComments_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetComments_Call) RunAndReturn(run func(context.Context, git.GetCommentsArgs) (*[]git.Comment, error)) *Client_GetComments_Call {
	_c.Call.Return(run)
	return _c
}

// GetCommit provides a mock function with given fields: _a0, _a1
func (_m *Client) GetCommit(_a0 context.Context, _a1 git.GetCommitArgs) (*git.GitCommit, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetCommit")
	}

	var r0 *git.GitCommit
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.GetCommitArgs) (*git.GitCommit, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.GetCommitArgs) *git.GitCommit); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*git.GitCommit)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.GetCommitArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetCommit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCommit'
type Client_GetCommit_Call struct {
	*mock.Call
}

// GetCommit is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.GetCommitArgs
func (_e *Client_Expecter) GetCommit(_a0 interface{}, _a1 interface{}) *Client_GetCommit_Call {
	return &Client_GetCommit_Call{Call: _e.mock.On("GetCommit", _a0, _a1)}
}

func (_c *Client_GetCommit_Call) Run(run func(_a0 context.Context, _a1 git.GetCommitArgs)) *Client_GetCommit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.GetCommitArgs))
	})
	return _c
}

func (_c *Client_GetCommit_Call) Return(_a0 *git.GitCommit, _a1 error) *Client_GetCommit_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetCommit_Call) RunAndReturn(run func(context.Context, git.GetCommitArgs) (*git.GitCommit, error)) *Client_GetCommit_Call {
	_c.Call.Return(run)
	return _c
}

// GetCommitDiffs provides a mock function with given fields: _a0, _a1
func (_m *Client) GetCommitDiffs(_a0 context.Context, _a1 git.GetCommitDiffsArgs) (*git.GitCommitDiffs, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetCommitDiffs")
	}

	var r0 *git.GitCommitDiffs
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.GetCommitDiffsArgs) (*git.GitCommitDiffs, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.GetCommitDiffsArgs) *git.GitCommitDiffs); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*git.GitCommitDiffs)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.GetCommitDiffsArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetCommitDiffs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCommitDiffs'
type Client_GetCommitDiffs_Call struct {
	*mock.Call
}

// GetCommitDiffs is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.GetCommitDiffsArgs
func (_e *Client_Expecter) GetCommitDiffs(_a0 interface{}, _a1 interface{}) *Client_GetCommitDiffs_Call {
	return &Client_GetCommitDiffs_Call{Call: _e.mock.On("GetCommitDiffs", _a0, _a1)}
}

func (_c *Client_GetCommitDiffs_Call) Run(run func(_a0 context.Context, _a1 git.GetCommitDiffsArgs)) *Client_GetCommitDiffs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.GetCommitDiffsArgs))
	})
	return _c
}

func (_c *Client_GetCommitDiffs_Call) Return(_a0 *git.GitCommitDiffs, _a1 error) *Client_GetCommitDiffs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetCommitDiffs_Call) RunAndReturn(run func(context.Context, git.GetCommitDiffsArgs) (*git.GitCommitDiffs, error)) *Client_GetCommitDiffs_Call {
	_c.Call.Return(run)
	return _c
}

// GetCommits provides a mock function with given fields: _a0, _a1
func (_m *Client) GetCommits(_a0 context.Context, _a1 git.GetCommitsArgs) (*[]git.GitCommitRef, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetCommits")
	}

	var r0 *[]git.GitCommitRef
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.GetCommitsArgs) (*[]git.GitCommitRef, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.GetCommitsArgs) *[]git.GitCommitRef); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]git.GitCommitRef)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.GetCommitsArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetCommits_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCommits'
type Client_GetCommits_Call struct {
	*mock.Call
}

// GetCommits is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.GetCommitsArgs
func (_e *Client_Expecter) GetCommits(_a0 interface{}, _a1 interface{}) *Client_GetCommits_Call {
	return &Client_GetCommits_Call{Call: _e.mock.On("GetCommits", _a0, _a1)}
}

func (_c *Client_GetCommits_Call) Run(run func(_a0 context.Context, _a1 git.GetCommitsArgs)) *Client_GetCommits_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.GetCommitsArgs))
	})
	return _c
}

func (_c *Client_GetCommits_Call) Return(_a0 *[]git.GitCommitRef, _a1 error) *Client_GetCommits_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetCommits_Call) RunAndReturn(run func(context.Context, git.GetCommitsArgs) (*[]git.GitCommitRef, error)) *Client_GetCommits_Call {
	_c.Call.Return(run)
	return _c
}

// GetCommitsBatch provides a mock function with given fields: _a0, _a1
func (_m *Client) GetCommitsBatch(_a0 context.Context, _a1 git.GetCommitsBatchArgs) (*[]git.GitCommitRef, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetCommitsBatch")
	}

	var r0 *[]git.GitCommitRef
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.GetCommitsBatchArgs) (*[]git.GitCommitRef, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.GetCommitsBatchArgs) *[]git.GitCommitRef); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]git.GitCommitRef)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.GetCommitsBatchArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetCommitsBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCommitsBatch'
type Client_GetCommitsBatch_Call struct {
	*mock.Call
}

// GetCommitsBatch is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.GetCommitsBatchArgs
func (_e *Client_Expecter) GetCommitsBatch(_a0 interface{}, _a1 interface{}) *Client_GetCommitsBatch_Call {
	return &Client_GetCommitsBatch_Call{Call: _e.mock.On("GetCommitsBatch", _a0, _a1)}
}

func (_c *Client_GetCommitsBatch_Call) Run(run func(_a0 context.Context, _a1 git.GetCommitsBatchArgs)) *Client_GetCommitsBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.GetCommitsBatchArgs))
	})
	return _c
}

func (_c *Client_GetCommitsBatch_Call) Return(_a0 *[]git.GitCommitRef, _a1 error) *Client_GetCommitsBatch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetCommitsBatch_Call) RunAndReturn(run func(context.Context, git.GetCommitsBatchArgs) (*[]git.GitCommitRef, error)) *Client_GetCommitsBatch_Call {
	_c.Call.Return(run)
	return _c
}

// GetDeletedRepositories provides a mock function with given fields: _a0, _a1
func (_m *Client) GetDeletedRepositories(_a0 context.Context, _a1 git.GetDeletedRepositoriesArgs) (*[]git.GitDeletedRepository, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetDeletedRepositories")
	}

	var r0 *[]git.GitDeletedRepository
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.GetDeletedRepositoriesArgs) (*[]git.GitDeletedRepository, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.GetDeletedRepositoriesArgs) *[]git.GitDeletedRepository); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]git.GitDeletedRepository)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.GetDeletedRepositoriesArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetDeletedRepositories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDeletedRepositories'
type Client_GetDeletedRepositories_Call struct {
	*mock.Call
}

// GetDeletedRepositories is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.GetDeletedRepositoriesArgs
func (_e *Client_Expecter) GetDeletedRepositories(_a0 interface{}, _a1 interface{}) *Client_GetDeletedRepositories_Call {
	return &Client_GetDeletedRepositories_Call{Call: _e.mock.On("GetDeletedRepositories", _a0, _a1)}
}

func (_c *Client_GetDeletedRepositories_Call) Run(run func(_a0 context.Context, _a1 git.GetDeletedRepositoriesArgs)) *Client_GetDeletedRepositories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.GetDeletedRepositoriesArgs))
	})
	return _c
}

func (_c *Client_GetDeletedRepositories_Call) Return(_a0 *[]git.GitDeletedRepository, _a1 error) *Client_GetDeletedRepositories_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetDeletedRepositories_Call) RunAndReturn(run func(context.Context, git.GetDeletedRepositoriesArgs) (*[]git.GitDeletedRepository, error)) *Client_GetDeletedRepositories_Call {
	_c.Call.Return(run)
	return _c
}

// GetForkSyncRequest provides a mock function with given fields: _a0, _a1
func (_m *Client) GetForkSyncRequest(_a0 context.Context, _a1 git.GetForkSyncRequestArgs) (*git.GitForkSyncRequest, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetForkSyncRequest")
	}

	var r0 *git.GitForkSyncRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.GetForkSyncRequestArgs) (*git.GitForkSyncRequest, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.GetForkSyncRequestArgs) *git.GitForkSyncRequest); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*git.GitForkSyncRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.GetForkSyncRequestArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetForkSyncRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetForkSyncRequest'
type Client_GetForkSyncRequest_Call struct {
	*mock.Call
}

// GetForkSyncRequest is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.GetForkSyncRequestArgs
func (_e *Client_Expecter) GetForkSyncRequest(_a0 interface{}, _a1 interface{}) *Client_GetForkSyncRequest_Call {
	return &Client_GetForkSyncRequest_Call{Call: _e.mock.On("GetForkSyncRequest", _a0, _a1)}
}

func (_c *Client_GetForkSyncRequest_Call) Run(run func(_a0 context.Context, _a1 git.GetForkSyncRequestArgs)) *Client_GetForkSyncRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.GetForkSyncRequestArgs))
	})
	return _c
}

func (_c *Client_GetForkSyncRequest_Call) Return(_a0 *git.GitForkSyncRequest, _a1 error) *Client_GetForkSyncRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetForkSyncRequest_Call) RunAndReturn(run func(context.Context, git.GetForkSyncRequestArgs) (*git.GitForkSyncRequest, error)) *Client_GetForkSyncRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetForkSyncRequests provides a mock function with given fields: _a0, _a1
func (_m *Client) GetForkSyncRequests(_a0 context.Context, _a1 git.GetForkSyncRequestsArgs) (*[]git.GitForkSyncRequest, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetForkSyncRequests")
	}

	var r0 *[]git.GitForkSyncRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.GetForkSyncRequestsArgs) (*[]git.GitForkSyncRequest, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.GetForkSyncRequestsArgs) *[]git.GitForkSyncRequest); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]git.GitForkSyncRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.GetForkSyncRequestsArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetForkSyncRequests_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetForkSyncRequests'
type Client_GetForkSyncRequests_Call struct {
	*mock.Call
}

// GetForkSyncRequests is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.GetForkSyncRequestsArgs
func (_e *Client_Expecter) GetForkSyncRequests(_a0 interface{}, _a1 interface{}) *Client_GetForkSyncRequests_Call {
	return &Client_GetForkSyncRequests_Call{Call: _e.mock.On("GetForkSyncRequests", _a0, _a1)}
}

func (_c *Client_GetForkSyncRequests_Call) Run(run func(_a0 context.Context, _a1 git.GetForkSyncRequestsArgs)) *Client_GetForkSyncRequests_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.GetForkSyncRequestsArgs))
	})
	return _c
}

func (_c *Client_GetForkSyncRequests_Call) Return(_a0 *[]git.GitForkSyncRequest, _a1 error) *Client_GetForkSyncRequests_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetForkSyncRequests_Call) RunAndReturn(run func(context.Context, git.GetForkSyncRequestsArgs) (*[]git.GitForkSyncRequest, error)) *Client_GetForkSyncRequests_Call {
	_c.Call.Return(run)
	return _c
}

// GetForks provides a mock function with given fields: _a0, _a1
func (_m *Client) GetForks(_a0 context.Context, _a1 git.GetForksArgs) (*[]git.GitRepositoryRef, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetForks")
	}

	var r0 *[]git.GitRepositoryRef
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.GetForksArgs) (*[]git.GitRepositoryRef, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.GetForksArgs) *[]git.GitRepositoryRef); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]git.GitRepositoryRef)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.GetForksArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetForks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetForks'
type Client_GetForks_Call struct {
	*mock.Call
}

// GetForks is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.GetForksArgs
func (_e *Client_Expecter) GetForks(_a0 interface{}, _a1 interface{}) *Client_GetForks_Call {
	return &Client_GetForks_Call{Call: _e.mock.On("GetForks", _a0, _a1)}
}

func (_c *Client_GetForks_Call) Run(run func(_a0 context.Context, _a1 git.GetForksArgs)) *Client_GetForks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.GetForksArgs))
	})
	return _c
}

func (_c *Client_GetForks_Call) Return(_a0 *[]git.GitRepositoryRef, _a1 error) *Client_GetForks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetForks_Call) RunAndReturn(run func(context.Context, git.GetForksArgs) (*[]git.GitRepositoryRef, error)) *Client_GetForks_Call {
	_c.Call.Return(run)
	return _c
}

// GetImportRequest provides a mock function with given fields: _a0, _a1
func (_m *Client) GetImportRequest(_a0 context.Context, _a1 git.GetImportRequestArgs) (*git.GitImportRequest, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetImportRequest")
	}

	var r0 *git.GitImportRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.GetImportRequestArgs) (*git.GitImportRequest, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.GetImportRequestArgs) *git.GitImportRequest); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*git.GitImportRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.GetImportRequestArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetImportRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetImportRequest'
type Client_GetImportRequest_Call struct {
	*mock.Call
}

// GetImportRequest is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.GetImportRequestArgs
func (_e *Client_Expecter) GetImportRequest(_a0 interface{}, _a1 interface{}) *Client_GetImportRequest_Call {
	return &Client_GetImportRequest_Call{Call: _e.mock.On("GetImportRequest", _a0, _a1)}
}

func (_c *Client_GetImportRequest_Call) Run(run func(_a0 context.Context, _a1 git.GetImportRequestArgs)) *Client_GetImportRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.GetImportRequestArgs))
	})
	return _c
}

func (_c *Client_GetImportRequest_Call) Return(_a0 *git.GitImportRequest, _a1 error) *Client_GetImportRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetImportRequest_Call) RunAndReturn(run func(context.Context, git.GetImportRequestArgs) (*git.GitImportRequest, error)) *Client_GetImportRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetItem provides a mock function with given fields: _a0, _a1
func (_m *Client) GetItem(_a0 context.Context, _a1 git.GetItemArgs) (*git.GitItem, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetItem")
	}

	var r0 *git.GitItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.GetItemArgs) (*git.GitItem, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.GetItemArgs) *git.GitItem); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*git.GitItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.GetItemArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetItem'
type Client_GetItem_Call struct {
	*mock.Call
}

// GetItem is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.GetItemArgs
func (_e *Client_Expecter) GetItem(_a0 interface{}, _a1 interface{}) *Client_GetItem_Call {
	return &Client_GetItem_Call{Call: _e.mock.On("GetItem", _a0, _a1)}
}

func (_c *Client_GetItem_Call) Run(run func(_a0 context.Context, _a1 git.GetItemArgs)) *Client_GetItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.GetItemArgs))
	})
	return _c
}

func (_c *Client_GetItem_Call) Return(_a0 *git.GitItem, _a1 error) *Client_GetItem_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetItem_Call) RunAndReturn(run func(context.Context, git.GetItemArgs) (*git.GitItem, error)) *Client_GetItem_Call {
	_c.Call.Return(run)
	return _c
}

// GetItemContent provides a mock function with given fields: _a0, _a1
func (_m *Client) GetItemContent(_a0 context.Context, _a1 git.GetItemContentArgs) (io.ReadCloser, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetItemContent")
	}

	var r0 io.ReadCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.GetItemContentArgs) (io.ReadCloser, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.GetItemContentArgs) io.ReadCloser); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.GetItemContentArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetItemContent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetItemContent'
type Client_GetItemContent_Call struct {
	*mock.Call
}

// GetItemContent is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.GetItemContentArgs
func (_e *Client_Expecter) GetItemContent(_a0 interface{}, _a1 interface{}) *Client_GetItemContent_Call {
	return &Client_GetItemContent_Call{Call: _e.mock.On("GetItemContent", _a0, _a1)}
}

func (_c *Client_GetItemContent_Call) Run(run func(_a0 context.Context, _a1 git.GetItemContentArgs)) *Client_GetItemContent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.GetItemContentArgs))
	})
	return _c
}

func (_c *Client_GetItemContent_Call) Return(_a0 io.ReadCloser, _a1 error) *Client_GetItemContent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetItemContent_Call) RunAndReturn(run func(context.Context, git.GetItemContentArgs) (io.ReadCloser, error)) *Client_GetItemContent_Call {
	_c.Call.Return(run)
	return _c
}

// GetItemText provides a mock function with given fields: _a0, _a1
func (_m *Client) GetItemText(_a0 context.Context, _a1 git.GetItemTextArgs) (io.ReadCloser, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetItemText")
	}

	var r0 io.ReadCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.GetItemTextArgs) (io.ReadCloser, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.GetItemTextArgs) io.ReadCloser); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.GetItemTextArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetItemText_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetItemText'
type Client_GetItemText_Call struct {
	*mock.Call
}

// GetItemText is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.GetItemTextArgs
func (_e *Client_Expecter) GetItemText(_a0 interface{}, _a1 interface{}) *Client_GetItemText_Call {
	return &Client_GetItemText_Call{Call: _e.mock.On("GetItemText", _a0, _a1)}
}

func (_c *Client_GetItemText_Call) Run(run func(_a0 context.Context, _a1 git.GetItemTextArgs)) *Client_GetItemText_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.GetItemTextArgs))
	})
	return _c
}

func (_c *Client_GetItemText_Call) Return(_a0 io.ReadCloser, _a1 error) *Client_GetItemText_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetItemText_Call) RunAndReturn(run func(context.Context, git.GetItemTextArgs) (io.ReadCloser, error)) *Client_GetItemText_Call {
	_c.Call.Return(run)
	return _c
}

// GetItemZip provides a mock function with given fields: _a0, _a1
func (_m *Client) GetItemZip(_a0 context.Context, _a1 git.GetItemZipArgs) (io.ReadCloser, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetItemZip")
	}

	var r0 io.ReadCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.GetItemZipArgs) (io.ReadCloser, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.GetItemZipArgs) io.ReadCloser); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.GetItemZipArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetItemZip_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetItemZip'
type Client_GetItemZip_Call struct {
	*mock.Call
}

// GetItemZip is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.GetItemZipArgs
func (_e *Client_Expecter) GetItemZip(_a0 interface{}, _a1 interface{}) *Client_GetItemZip_Call {
	return &Client_GetItemZip_Call{Call: _e.mock.On("GetItemZip", _a0, _a1)}
}

func (_c *Client_GetItemZip_Call) Run(run func(_a0 context.Context, _a1 git.GetItemZipArgs)) *Client_GetItemZip_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.GetItemZipArgs))
	})
	return _c
}

func (_c *Client_GetItemZip_Call) Return(_a0 io.ReadCloser, _a1 error) *Client_GetItemZip_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetItemZip_Call) RunAndReturn(run func(context.Context, git.GetItemZipArgs) (io.ReadCloser, error)) *Client_GetItemZip_Call {
	_c.Call.Return(run)
	return _c
}

// GetItems provides a mock function with given fields: _a0, _a1
func (_m *Client) GetItems(_a0 context.Context, _a1 git.GetItemsArgs) (*[]git.GitItem, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetItems")
	}

	var r0 *[]git.GitItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.GetItemsArgs) (*[]git.GitItem, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.GetItemsArgs) *[]git.GitItem); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]git.GitItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.GetItemsArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetItems_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetItems'
type Client_GetItems_Call struct {
	*mock.Call
}

// GetItems is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.GetItemsArgs
func (_e *Client_Expecter) GetItems(_a0 interface{}, _a1 interface{}) *Client_GetItems_Call {
	return &Client_GetItems_Call{Call: _e.mock.On("GetItems", _a0, _a1)}
}

func (_c *Client_GetItems_Call) Run(run func(_a0 context.Context, _a1 git.GetItemsArgs)) *Client_GetItems_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.GetItemsArgs))
	})
	return _c
}

func (_c *Client_GetItems_Call) Return(_a0 *[]git.GitItem, _a1 error) *Client_GetItems_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetItems_Call) RunAndReturn(run func(context.Context, git.GetItemsArgs) (*[]git.GitItem, error)) *Client_GetItems_Call {
	_c.Call.Return(run)
	return _c
}

// GetItemsBatch provides a mock function with given fields: _a0, _a1
func (_m *Client) GetItemsBatch(_a0 context.Context, _a1 git.GetItemsBatchArgs) (*[][]git.GitItem, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetItemsBatch")
	}

	var r0 *[][]git.GitItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.GetItemsBatchArgs) (*[][]git.GitItem, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.GetItemsBatchArgs) *[][]git.GitItem); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[][]git.GitItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.GetItemsBatchArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetItemsBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetItemsBatch'
type Client_GetItemsBatch_Call struct {
	*mock.Call
}

// GetItemsBatch is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.GetItemsBatchArgs
func (_e *Client_Expecter) GetItemsBatch(_a0 interface{}, _a1 interface{}) *Client_GetItemsBatch_Call {
	return &Client_GetItemsBatch_Call{Call: _e.mock.On("GetItemsBatch", _a0, _a1)}
}

func (_c *Client_GetItemsBatch_Call) Run(run func(_a0 context.Context, _a1 git.GetItemsBatchArgs)) *Client_GetItemsBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.GetItemsBatchArgs))
	})
	return _c
}

func (_c *Client_GetItemsBatch_Call) Return(_a0 *[][]git.GitItem, _a1 error) *Client_GetItemsBatch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetItemsBatch_Call) RunAndReturn(run func(context.Context, git.GetItemsBatchArgs) (*[][]git.GitItem, error)) *Client_GetItemsBatch_Call {
	_c.Call.Return(run)
	return _c
}

// GetLikes provides a mock function with given fields: _a0, _a1
func (_m *Client) GetLikes(_a0 context.Context, _a1 git.GetLikesArgs) (*[]webapi.IdentityRef, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetLikes")
	}

	var r0 *[]webapi.IdentityRef
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.GetLikesArgs) (*[]webapi.IdentityRef, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.GetLikesArgs) *[]webapi.IdentityRef); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]webapi.IdentityRef)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.GetLikesArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetLikes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLikes'
type Client_GetLikes_Call struct {
	*mock.Call
}

// GetLikes is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.GetLikesArgs
func (_e *Client_Expecter) GetLikes(_a0 interface{}, _a1 interface{}) *Client_GetLikes_Call {
	return &Client_GetLikes_Call{Call: _e.mock.On("GetLikes", _a0, _a1)}
}

func (_c *Client_GetLikes_Call) Run(run func(_a0 context.Context, _a1 git.GetLikesArgs)) *Client_GetLikes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.GetLikesArgs))
	})
	return _c
}

func (_c *Client_GetLikes_Call) Return(_a0 *[]webapi.IdentityRef, _a1 error) *Client_GetLikes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetLikes_Call) RunAndReturn(run func(context.Context, git.GetLikesArgs) (*[]webapi.IdentityRef, error)) *Client_GetLikes_Call {
	_c.Call.Return(run)
	return _c
}

// GetMergeBases provides a mock function with given fields: _a0, _a1
func (_m *Client) GetMergeBases(_a0 context.Context, _a1 git.GetMergeBasesArgs) (*[]git.GitCommitRef, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetMergeBases")
	}

	var r0 *[]git.GitCommitRef
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.GetMergeBasesArgs) (*[]git.GitCommitRef, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.GetMergeBasesArgs) *[]git.GitCommitRef); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]git.GitCommitRef)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.GetMergeBasesArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetMergeBases_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMergeBases'
type Client_GetMergeBases_Call struct {
	*mock.Call
}

// GetMergeBases is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.GetMergeBasesArgs
func (_e *Client_Expecter) GetMergeBases(_a0 interface{}, _a1 interface{}) *Client_GetMergeBases_Call {
	return &Client_GetMergeBases_Call{Call: _e.mock.On("GetMergeBases", _a0, _a1)}
}

func (_c *Client_GetMergeBases_Call) Run(run func(_a0 context.Context, _a1 git.GetMergeBasesArgs)) *Client_GetMergeBases_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.GetMergeBasesArgs))
	})
	return _c
}

func (_c *Client_GetMergeBases_Call) Return(_a0 *[]git.GitCommitRef, _a1 error) *Client_GetMergeBases_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetMergeBases_Call) RunAndReturn(run func(context.Context, git.GetMergeBasesArgs) (*[]git.GitCommitRef, error)) *Client_GetMergeBases_Call {
	_c.Call.Return(run)
	return _c
}

// GetMergeRequest provides a mock function with given fields: _a0, _a1
func (_m *Client) GetMergeRequest(_a0 context.Context, _a1 git.GetMergeRequestArgs) (*git.GitMerge, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetMergeRequest")
	}

	var r0 *git.GitMerge
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.GetMergeRequestArgs) (*git.GitMerge, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.GetMergeRequestArgs) *git.GitMerge); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*git.GitMerge)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.GetMergeRequestArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetMergeRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMergeRequest'
type Client_GetMergeRequest_Call struct {
	*mock.Call
}

// GetMergeRequest is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.GetMergeRequestArgs
func (_e *Client_Expecter) GetMergeRequest(_a0 interface{}, _a1 interface{}) *Client_GetMergeRequest_Call {
	return &Client_GetMergeRequest_Call{Call: _e.mock.On("GetMergeRequest", _a0, _a1)}
}

func (_c *Client_GetMergeRequest_Call) Run(run func(_a0 context.Context, _a1 git.GetMergeRequestArgs)) *Client_GetMergeRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.GetMergeRequestArgs))
	})
	return _c
}

func (_c *Client_GetMergeRequest_Call) Return(_a0 *git.GitMerge, _a1 error) *Client_GetMergeRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetMergeRequest_Call) RunAndReturn(run func(context.Context, git.GetMergeRequestArgs) (*git.GitMerge, error)) *Client_GetMergeRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetPermission provides a mock function with given fields: _a0, _a1
func (_m *Client) GetPermission(_a0 context.Context, _a1 git.GetPermissionArgs) (*bool, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetPermission")
	}

	var r0 *bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.GetPermissionArgs) (*bool, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.GetPermissionArgs) *bool); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bool)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.GetPermissionArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetPermission_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPermission'
type Client_GetPermission_Call struct {
	*mock.Call
}

// GetPermission is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.GetPermissionArgs
func (_e *Client_Expecter) GetPermission(_a0 interface{}, _a1 interface{}) *Client_GetPermission_Call {
	return &Client_GetPermission_Call{Call: _e.mock.On("GetPermission", _a0, _a1)}
}

func (_c *Client_GetPermission_Call) Run(run func(_a0 context.Context, _a1 git.GetPermissionArgs)) *Client_GetPermission_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.GetPermissionArgs))
	})
	return _c
}

func (_c *Client_GetPermission_Call) Return(_a0 *bool, _a1 error) *Client_GetPermission_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetPermission_Call) RunAndReturn(run func(context.Context, git.GetPermissionArgs) (*bool, error)) *Client_GetPermission_Call {
	_c.Call.Return(run)
	return _c
}

// GetPolicyConfigurations provides a mock function with given fields: _a0, _a1
func (_m *Client) GetPolicyConfigurations(_a0 context.Context, _a1 git.GetPolicyConfigurationsArgs) (*git.GitPolicyConfigurationResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetPolicyConfigurations")
	}

	var r0 *git.GitPolicyConfigurationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.GetPolicyConfigurationsArgs) (*git.GitPolicyConfigurationResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.GetPolicyConfigurationsArgs) *git.GitPolicyConfigurationResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*git.GitPolicyConfigurationResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.GetPolicyConfigurationsArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetPolicyConfigurations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPolicyConfigurations'
type Client_GetPolicyConfigurations_Call struct {
	*mock.Call
}

// GetPolicyConfigurations is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.GetPolicyConfigurationsArgs
func (_e *Client_Expecter) GetPolicyConfigurations(_a0 interface{}, _a1 interface{}) *Client_GetPolicyConfigurations_Call {
	return &Client_GetPolicyConfigurations_Call{Call: _e.mock.On("GetPolicyConfigurations", _a0, _a1)}
}

func (_c *Client_GetPolicyConfigurations_Call) Run(run func(_a0 context.Context, _a1 git.GetPolicyConfigurationsArgs)) *Client_GetPolicyConfigurations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.GetPolicyConfigurationsArgs))
	})
	return _c
}

func (_c *Client_GetPolicyConfigurations_Call) Return(_a0 *git.GitPolicyConfigurationResponse, _a1 error) *Client_GetPolicyConfigurations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetPolicyConfigurations_Call) RunAndReturn(run func(context.Context, git.GetPolicyConfigurationsArgs) (*git.GitPolicyConfigurationResponse, error)) *Client_GetPolicyConfigurations_Call {
	_c.Call.Return(run)
	return _c
}

// GetPullRequest provides a mock function with given fields: _a0, _a1
func (_m *Client) GetPullRequest(_a0 context.Context, _a1 git.GetPullRequestArgs) (*git.GitPullRequest, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetPullRequest")
	}

	var r0 *git.GitPullRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.GetPullRequestArgs) (*git.GitPullRequest, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.GetPullRequestArgs) *git.GitPullRequest); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*git.GitPullRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.GetPullRequestArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetPullRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPullRequest'
type Client_GetPullRequest_Call struct {
	*mock.Call
}

// GetPullRequest is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.GetPullRequestArgs
func (_e *Client_Expecter) GetPullRequest(_a0 interface{}, _a1 interface{}) *Client_GetPullRequest_Call {
	return &Client_GetPullRequest_Call{Call: _e.mock.On("GetPullRequest", _a0, _a1)}
}

func (_c *Client_GetPullRequest_Call) Run(run func(_a0 context.Context, _a1 git.GetPullRequestArgs)) *Client_GetPullRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.GetPullRequestArgs))
	})
	return _c
}

func (_c *Client_GetPullRequest_Call) Return(_a0 *git.GitPullRequest, _a1 error) *Client_GetPullRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetPullRequest_Call) RunAndReturn(run func(context.Context, git.GetPullRequestArgs) (*git.GitPullRequest, error)) *Client_GetPullRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetPullRequestById provides a mock function with given fields: _a0, _a1
func (_m *Client) GetPullRequestById(_a0 context.Context, _a1 git.GetPullRequestByIdArgs) (*git.GitPullRequest, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetPullRequestById")
	}

	var r0 *git.GitPullRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.GetPullRequestByIdArgs) (*git.GitPullRequest, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.GetPullRequestByIdArgs) *git.GitPullRequest); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*git.GitPullRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.GetPullRequestByIdArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetPullRequestById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPullRequestById'
type Client_GetPullRequestById_Call struct {
	*mock.Call
}

// GetPullRequestById is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.GetPullRequestByIdArgs
func (_e *Client_Expecter) GetPullRequestById(_a0 interface{}, _a1 interface{}) *Client_GetPullRequestById_Call {
	return &Client_GetPullRequestById_Call{Call: _e.mock.On("GetPullRequestById", _a0, _a1)}
}

func (_c *Client_GetPullRequestById_Call) Run(run func(_a0 context.Context, _a1 git.GetPullRequestByIdArgs)) *Client_GetPullRequestById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.GetPullRequestByIdArgs))
	})
	return _c
}

func (_c *Client_GetPullRequestById_Call) Return(_a0 *git.GitPullRequest, _a1 error) *Client_GetPullRequestById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetPullRequestById_Call) RunAndReturn(run func(context.Context, git.GetPullRequestByIdArgs) (*git.GitPullRequest, error)) *Client_GetPullRequestById_Call {
	_c.Call.Return(run)
	return _c
}

// GetPullRequestCommits provides a mock function with given fields: _a0, _a1
func (_m *Client) GetPullRequestCommits(_a0 context.Context, _a1 git.GetPullRequestCommitsArgs) (*git.GetPullRequestCommitsResponseValue, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetPullRequestCommits")
	}

	var r0 *git.GetPullRequestCommitsResponseValue
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.GetPullRequestCommitsArgs) (*git.GetPullRequestCommitsResponseValue, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.GetPullRequestCommitsArgs) *git.GetPullRequestCommitsResponseValue); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*git.GetPullRequestCommitsResponseValue)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.GetPullRequestCommitsArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetPullRequestCommits_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPullRequestCommits'
type Client_GetPullRequestCommits_Call struct {
	*mock.Call
}

// GetPullRequestCommits is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.GetPullRequestCommitsArgs
func (_e *Client_Expecter) GetPullRequestCommits(_a0 interface{}, _a1 interface{}) *Client_GetPullRequestCommits_Call {
	return &Client_GetPullRequestCommits_Call{Call: _e.mock.On("GetPullRequestCommits", _a0, _a1)}
}

func (_c *Client_GetPullRequestCommits_Call) Run(run func(_a0 context.Context, _a1 git.GetPullRequestCommitsArgs)) *Client_GetPullRequestCommits_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.GetPullRequestCommitsArgs))
	})
	return _c
}

func (_c *Client_GetPullRequestCommits_Call) Return(_a0 *git.GetPullRequestCommitsResponseValue, _a1 error) *Client_GetPullRequestCommits_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetPullRequestCommits_Call) RunAndReturn(run func(context.Context, git.GetPullRequestCommitsArgs) (*git.GetPullRequestCommitsResponseValue, error)) *Client_GetPullRequestCommits_Call {
	_c.Call.Return(run)
	return _c
}

// GetPullRequestIteration provides a mock function with given fields: _a0, _a1
func (_m *Client) GetPullRequestIteration(_a0 context.Context, _a1 git.GetPullRequestIterationArgs) (*git.GitPullRequestIteration, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetPullRequestIteration")
	}

	var r0 *git.GitPullRequestIteration
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.GetPullRequestIterationArgs) (*git.GitPullRequestIteration, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.GetPullRequestIterationArgs) *git.GitPullRequestIteration); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*git.GitPullRequestIteration)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.GetPullRequestIterationArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetPullRequestIteration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPullRequestIteration'
type Client_GetPullRequestIteration_Call struct {
	*mock.Call
}

// GetPullRequestIteration is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.GetPullRequestIterationArgs
func (_e *Client_Expecter) GetPullRequestIteration(_a0 interface{}, _a1 interface{}) *Client_GetPullRequestIteration_Call {
	return &Client_GetPullRequestIteration_Call{Call: _e.mock.On("GetPullRequestIteration", _a0, _a1)}
}

func (_c *Client_GetPullRequestIteration_Call) Run(run func(_a0 context.Context, _a1 git.GetPullRequestIterationArgs)) *Client_GetPullRequestIteration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.GetPullRequestIterationArgs))
	})
	return _c
}

func (_c *Client_GetPullRequestIteration_Call) Return(_a0 *git.GitPullRequestIteration, _a1 error) *Client_GetPullRequestIteration_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetPullRequestIteration_Call) RunAndReturn(run func(context.Context, git.GetPullRequestIterationArgs) (*git.GitPullRequestIteration, error)) *Client_GetPullRequestIteration_Call {
	_c.Call.Return(run)
	return _c
}

// GetPullRequestIterationChanges provides a mock function with given fields: _a0, _a1
func (_m *Client) GetPullRequestIterationChanges(_a0 context.Context, _a1 git.GetPullRequestIterationChangesArgs) (*git.GitPullRequestIterationChanges, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetPullRequestIterationChanges")
	}

	var r0 *git.GitPullRequestIterationChanges
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.GetPullRequestIterationChangesArgs) (*git.GitPullRequestIterationChanges, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.GetPullRequestIterationChangesArgs) *git.GitPullRequestIterationChanges); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*git.GitPullRequestIterationChanges)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.GetPullRequestIterationChangesArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetPullRequestIterationChanges_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPullRequestIterationChanges'
type Client_GetPullRequestIterationChanges_Call struct {
	*mock.Call
}

// GetPullRequestIterationChanges is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.GetPullRequestIterationChangesArgs
func (_e *Client_Expecter) GetPullRequestIterationChanges(_a0 interface{}, _a1 interface{}) *Client_GetPullRequestIterationChanges_Call {
	return &Client_GetPullRequestIterationChanges_Call{Call: _e.mock.On("GetPullRequestIterationChanges", _a0, _a1)}
}

func (_c *Client_GetPullRequestIterationChanges_Call) Run(run func(_a0 context.Context, _a1 git.GetPullRequestIterationChangesArgs)) *Client_GetPullRequestIterationChanges_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.GetPullRequestIterationChangesArgs))
	})
	return _c
}

func (_c *Client_GetPullRequestIterationChanges_Call) Return(_a0 *git.GitPullRequestIterationChanges, _a1 error) *Client_GetPullRequestIterationChanges_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetPullRequestIterationChanges_Call) RunAndReturn(run func(context.Context, git.GetPullRequestIterationChangesArgs) (*git.GitPullRequestIterationChanges, error)) *Client_GetPullRequestIterationChanges_Call {
	_c.Call.Return(run)
	return _c
}

// GetPullRequestIterationCommits provides a mock function with given fields: _a0, _a1
func (_m *Client) GetPullRequestIterationCommits(_a0 context.Context, _a1 git.GetPullRequestIterationCommitsArgs) (*[]git.GitCommitRef, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetPullRequestIterationCommits")
	}

	var r0 *[]git.GitCommitRef
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.GetPullRequestIterationCommitsArgs) (*[]git.GitCommitRef, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.GetPullRequestIterationCommitsArgs) *[]git.GitCommitRef); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]git.GitCommitRef)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.GetPullRequestIterationCommitsArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetPullRequestIterationCommits_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPullRequestIterationCommits'
type Client_GetPullRequestIterationCommits_Call struct {
	*mock.Call
}

// GetPullRequestIterationCommits is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.GetPullRequestIterationCommitsArgs
func (_e *Client_Expecter) GetPullRequestIterationCommits(_a0 interface{}, _a1 interface{}) *Client_GetPullRequestIterationCommits_Call {
	return &Client_GetPullRequestIterationCommits_Call{Call: _e.mock.On("GetPullRequestIterationCommits", _a0, _a1)}
}

func (_c *Client_GetPullRequestIterationCommits_Call) Run(run func(_a0 context.Context, _a1 git.GetPullRequestIterationCommitsArgs)) *Client_GetPullRequestIterationCommits_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.GetPullRequestIterationCommitsArgs))
	})
	return _c
}

func (_c *Client_GetPullRequestIterationCommits_Call) Return(_a0 *[]git.GitCommitRef, _a1 error) *Client_GetPullRequestIterationCommits_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetPullRequestIterationCommits_Call) RunAndReturn(run func(context.Context, git.GetPullRequestIterationCommitsArgs) (*[]git.GitCommitRef, error)) *Client_GetPullRequestIterationCommits_Call {
	_c.Call.Return(run)
	return _c
}

// GetPullRequestIterationStatus provides a mock function with given fields: _a0, _a1
func (_m *Client) GetPullRequestIterationStatus(_a0 context.Context, _a1 git.GetPullRequestIterationStatusArgs) (*git.GitPullRequestStatus, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetPullRequestIterationStatus")
	}

	var r0 *git.GitPullRequestStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.GetPullRequestIterationStatusArgs) (*git.GitPullRequestStatus, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.GetPullRequestIterationStatusArgs) *git.GitPullRequestStatus); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*git.GitPullRequestStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.GetPullRequestIterationStatusArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetPullRequestIterationStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPullRequestIterationStatus'
type Client_GetPullRequestIterationStatus_Call struct {
	*mock.Call
}

// GetPullRequestIterationStatus is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.GetPullRequestIterationStatusArgs
func (_e *Client_Expecter) GetPullRequestIterationStatus(_a0 interface{}, _a1 interface{}) *Client_GetPullRequestIterationStatus_Call {
	return &Client_GetPullRequestIterationStatus_Call{Call: _e.mock.On("GetPullRequestIterationStatus", _a0, _a1)}
}

func (_c *Client_GetPullRequestIterationStatus_Call) Run(run func(_a0 context.Context, _a1 git.GetPullRequestIterationStatusArgs)) *Client_GetPullRequestIterationStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.GetPullRequestIterationStatusArgs))
	})
	return _c
}

func (_c *Client_GetPullRequestIterationStatus_Call) Return(_a0 *git.GitPullRequestStatus, _a1 error) *Client_GetPullRequestIterationStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetPullRequestIterationStatus_Call) RunAndReturn(run func(context.Context, git.GetPullRequestIterationStatusArgs) (*git.GitPullRequestStatus, error)) *Client_GetPullRequestIterationStatus_Call {
	_c.Call.Return(run)
	return _c
}

// GetPullRequestIterationStatuses provides a mock function with given fields: _a0, _a1
func (_m *Client) GetPullRequestIterationStatuses(_a0 context.Context, _a1 git.GetPullRequestIterationStatusesArgs) (*[]git.GitPullRequestStatus, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetPullRequestIterationStatuses")
	}

	var r0 *[]git.GitPullRequestStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.GetPullRequestIterationStatusesArgs) (*[]git.GitPullRequestStatus, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.GetPullRequestIterationStatusesArgs) *[]git.GitPullRequestStatus); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]git.GitPullRequestStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.GetPullRequestIterationStatusesArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetPullRequestIterationStatuses_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPullRequestIterationStatuses'
type Client_GetPullRequestIterationStatuses_Call struct {
	*mock.Call
}

// GetPullRequestIterationStatuses is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.GetPullRequestIterationStatusesArgs
func (_e *Client_Expecter) GetPullRequestIterationStatuses(_a0 interface{}, _a1 interface{}) *Client_GetPullRequestIterationStatuses_Call {
	return &Client_GetPullRequestIterationStatuses_Call{Call: _e.mock.On("GetPullRequestIterationStatuses", _a0, _a1)}
}

func (_c *Client_GetPullRequestIterationStatuses_Call) Run(run func(_a0 context.Context, _a1 git.GetPullRequestIterationStatusesArgs)) *Client_GetPullRequestIterationStatuses_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.GetPullRequestIterationStatusesArgs))
	})
	return _c
}

func (_c *Client_GetPullRequestIterationStatuses_Call) Return(_a0 *[]git.GitPullRequestStatus, _a1 error) *Client_GetPullRequestIterationStatuses_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetPullRequestIterationStatuses_Call) RunAndReturn(run func(context.Context, git.GetPullRequestIterationStatusesArgs) (*[]git.GitPullRequestStatus, error)) *Client_GetPullRequestIterationStatuses_Call {
	_c.Call.Return(run)
	return _c
}

// GetPullRequestIterations provides a mock function with given fields: _a0, _a1
func (_m *Client) GetPullRequestIterations(_a0 context.Context, _a1 git.GetPullRequestIterationsArgs) (*[]git.GitPullRequestIteration, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetPullRequestIterations")
	}

	var r0 *[]git.GitPullRequestIteration
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.GetPullRequestIterationsArgs) (*[]git.GitPullRequestIteration, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.GetPullRequestIterationsArgs) *[]git.GitPullRequestIteration); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]git.GitPullRequestIteration)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.GetPullRequestIterationsArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetPullRequestIterations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPullRequestIterations'
type Client_GetPullRequestIterations_Call struct {
	*mock.Call
}

// GetPullRequestIterations is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.GetPullRequestIterationsArgs
func (_e *Client_Expecter) GetPullRequestIterations(_a0 interface{}, _a1 interface{}) *Client_GetPullRequestIterations_Call {
	return &Client_GetPullRequestIterations_Call{Call: _e.mock.On("GetPullRequestIterations", _a0, _a1)}
}

func (_c *Client_GetPullRequestIterations_Call) Run(run func(_a0 context.Context, _a1 git.GetPullRequestIterationsArgs)) *Client_GetPullRequestIterations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.GetPullRequestIterationsArgs))
	})
	return _c
}

func (_c *Client_GetPullRequestIterations_Call) Return(_a0 *[]git.GitPullRequestIteration, _a1 error) *Client_GetPullRequestIterations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetPullRequestIterations_Call) RunAndReturn(run func(context.Context, git.GetPullRequestIterationsArgs) (*[]git.GitPullRequestIteration, error)) *Client_GetPullRequestIterations_Call {
	_c.Call.Return(run)
	return _c
}

// GetPullRequestLabel provides a mock function with given fields: _a0, _a1
func (_m *Client) GetPullRequestLabel(_a0 context.Context, _a1 git.GetPullRequestLabelArgs) (*core.WebApiTagDefinition, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetPullRequestLabel")
	}

	var r0 *core.WebApiTagDefinition
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.GetPullRequestLabelArgs) (*core.WebApiTagDefinition, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.GetPullRequestLabelArgs) *core.WebApiTagDefinition); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.WebApiTagDefinition)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.GetPullRequestLabelArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetPullRequestLabel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPullRequestLabel'
type Client_GetPullRequestLabel_Call struct {
	*mock.Call
}

// GetPullRequestLabel is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.GetPullRequestLabelArgs
func (_e *Client_Expecter) GetPullRequestLabel(_a0 interface{}, _a1 interface{}) *Client_GetPullRequestLabel_Call {
	return &Client_GetPullRequestLabel_Call{Call: _e.mock.On("GetPullRequestLabel", _a0, _a1)}
}

func (_c *Client_GetPullRequestLabel_Call) Run(run func(_a0 context.Context, _a1 git.GetPullRequestLabelArgs)) *Client_GetPullRequestLabel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.GetPullRequestLabelArgs))
	})
	return _c
}

func (_c *Client_GetPullRequestLabel_Call) Return(_a0 *core.WebApiTagDefinition, _a1 error) *Client_GetPullRequestLabel_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetPullRequestLabel_Call) RunAndReturn(run func(context.Context, git.GetPullRequestLabelArgs) (*core.WebApiTagDefinition, error)) *Client_GetPullRequestLabel_Call {
	_c.Call.Return(run)
	return _c
}

// GetPullRequestLabels provides a mock function with given fields: _a0, _a1
func (_m *Client) GetPullRequestLabels(_a0 context.Context, _a1 git.GetPullRequestLabelsArgs) (*[]core.WebApiTagDefinition, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetPullRequestLabels")
	}

	var r0 *[]core.WebApiTagDefinition
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.GetPullRequestLabelsArgs) (*[]core.WebApiTagDefinition, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.GetPullRequestLabelsArgs) *[]core.WebApiTagDefinition); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]core.WebApiTagDefinition)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.GetPullRequestLabelsArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetPullRequestLabels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPullRequestLabels'
type Client_GetPullRequestLabels_Call struct {
	*mock.Call
}

// GetPullRequestLabels is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.GetPullRequestLabelsArgs
func (_e *Client_Expecter) GetPullRequestLabels(_a0 interface{}, _a1 interface{}) *Client_GetPullRequestLabels_Call {
	return &Client_GetPullRequestLabels_Call{Call: _e.mock.On("GetPullRequestLabels", _a0, _a1)}
}

func (_c *Client_GetPullRequestLabels_Call) Run(run func(_a0 context.Context, _a1 git.GetPullRequestLabelsArgs)) *Client_GetPullRequestLabels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.GetPullRequestLabelsArgs))
	})
	return _c
}

func (_c *Client_GetPullRequestLabels_Call) Return(_a0 *[]core.WebApiTagDefinition, _a1 error) *Client_GetPullRequestLabels_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetPullRequestLabels_Call) RunAndReturn(run func(context.Context, git.GetPullRequestLabelsArgs) (*[]core.WebApiTagDefinition, error)) *Client_GetPullRequestLabels_Call {
	_c.Call.Return(run)
	return _c
}

// GetPullRequestProperties provides a mock function with given fields: _a0, _a1
func (_m *Client) GetPullRequestProperties(_a0 context.Context, _a1 git.GetPullRequestPropertiesArgs) (interface{}, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetPullRequestProperties")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.GetPullRequestPropertiesArgs) (interface{}, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.GetPullRequestPropertiesArgs) interface{}); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.GetPullRequestPropertiesArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetPullRequestProperties_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPullRequestProperties'
type Client_GetPullRequestProperties_Call struct {
	*mock.Call
}

// GetPullRequestProperties is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.GetPullRequestPropertiesArgs
func (_e *Client_Expecter) GetPullRequestProperties(_a0 interface{}, _a1 interface{}) *Client_GetPullRequestProperties_Call {
	return &Client_GetPullRequestProperties_Call{Call: _e.mock.On("GetPullRequestProperties", _a0, _a1)}
}

func (_c *Client_GetPullRequestProperties_Call) Run(run func(_a0 context.Context, _a1 git.GetPullRequestPropertiesArgs)) *Client_GetPullRequestProperties_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.GetPullRequestPropertiesArgs))
	})
	return _c
}

func (_c *Client_GetPullRequestProperties_Call) Return(_a0 interface{}, _a1 error) *Client_GetPullRequestProperties_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetPullRequestProperties_Call) RunAndReturn(run func(context.Context, git.GetPullRequestPropertiesArgs) (interface{}, error)) *Client_GetPullRequestProperties_Call {
	_c.Call.Return(run)
	return _c
}

// GetPullRequestQuery provides a mock function with given fields: _a0, _a1
func (_m *Client) GetPullRequestQuery(_a0 context.Context, _a1 git.GetPullRequestQueryArgs) (*git.GitPullRequestQuery, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetPullRequestQuery")
	}

	var r0 *git.GitPullRequestQuery
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.GetPullRequestQueryArgs) (*git.GitPullRequestQuery, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.GetPullRequestQueryArgs) *git.GitPullRequestQuery); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*git.GitPullRequestQuery)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.GetPullRequestQueryArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetPullRequestQuery_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPullRequestQuery'
type Client_GetPullRequestQuery_Call struct {
	*mock.Call
}

// GetPullRequestQuery is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.GetPullRequestQueryArgs
func (_e *Client_Expecter) GetPullRequestQuery(_a0 interface{}, _a1 interface{}) *Client_GetPullRequestQuery_Call {
	return &Client_GetPullRequestQuery_Call{Call: _e.mock.On("GetPullRequestQuery", _a0, _a1)}
}

func (_c *Client_GetPullRequestQuery_Call) Run(run func(_a0 context.Context, _a1 git.GetPullRequestQueryArgs)) *Client_GetPullRequestQuery_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.GetPullRequestQueryArgs))
	})
	return _c
}

func (_c *Client_GetPullRequestQuery_Call) Return(_a0 *git.GitPullRequestQuery, _a1 error) *Client_GetPullRequestQuery_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetPullRequestQuery_Call) RunAndReturn(run func(context.Context, git.GetPullRequestQueryArgs) (*git.GitPullRequestQuery, error)) *Client_GetPullRequestQuery_Call {
	_c.Call.Return(run)
	return _c
}

// GetPullRequestReviewer provides a mock function with given fields: _a0, _a1
func (_m *Client) GetPullRequestReviewer(_a0 context.Context, _a1 git.GetPullRequestReviewerArgs) (*git.IdentityRefWithVote, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetPullRequestReviewer")
	}

	var r0 *git.IdentityRefWithVote
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.GetPullRequestReviewerArgs) (*git.IdentityRefWithVote, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.GetPullRequestReviewerArgs) *git.IdentityRefWithVote); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*git.IdentityRefWithVote)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.GetPullRequestReviewerArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetPullRequestReviewer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPullRequestReviewer'
type Client_GetPullRequestReviewer_Call struct {
	*mock.Call
}

// GetPullRequestReviewer is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.GetPullRequestReviewerArgs
func (_e *Client_Expecter) GetPullRequestReviewer(_a0 interface{}, _a1 interface{}) *Client_GetPullRequestReviewer_Call {
	return &Client_GetPullRequestReviewer_Call{Call: _e.mock.On("GetPullRequestReviewer", _a0, _a1)}
}

func (_c *Client_GetPullRequestReviewer_Call) Run(run func(_a0 context.Context, _a1 git.GetPullRequestReviewerArgs)) *Client_GetPullRequestReviewer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.GetPullRequestReviewerArgs))
	})
	return _c
}

func (_c *Client_GetPullRequestReviewer_Call) Return(_a0 *git.IdentityRefWithVote, _a1 error) *Client_GetPullRequestReviewer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetPullRequestReviewer_Call) RunAndReturn(run func(context.Context, git.GetPullRequestReviewerArgs) (*git.IdentityRefWithVote, error)) *Client_GetPullRequestReviewer_Call {
	_c.Call.Return(run)
	return _c
}

// GetPullRequestReviewers provides a mock function with given fields: _a0, _a1
func (_m *Client) GetPullRequestReviewers(_a0 context.Context, _a1 git.GetPullRequestReviewersArgs) (*[]git.IdentityRefWithVote, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetPullRequestReviewers")
	}

	var r0 *[]git.IdentityRefWithVote
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.GetPullRequestReviewersArgs) (*[]git.IdentityRefWithVote, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.GetPullRequestReviewersArgs) *[]git.IdentityRefWithVote); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]git.IdentityRefWithVote)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.GetPullRequestReviewersArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetPullRequestReviewers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPullRequestReviewers'
type Client_GetPullRequestReviewers_Call struct {
	*mock.Call
}

// GetPullRequestReviewers is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.GetPullRequestReviewersArgs
func (_e *Client_Expecter) GetPullRequestReviewers(_a0 interface{}, _a1 interface{}) *Client_GetPullRequestReviewers_Call {
	return &Client_GetPullRequestReviewers_Call{Call: _e.mock.On("GetPullRequestReviewers", _a0, _a1)}
}

func (_c *Client_GetPullRequestReviewers_Call) Run(run func(_a0 context.Context, _a1 git.GetPullRequestReviewersArgs)) *Client_GetPullRequestReviewers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.GetPullRequestReviewersArgs))
	})
	return _c
}

func (_c *Client_GetPullRequestReviewers_Call) Return(_a0 *[]git.IdentityRefWithVote, _a1 error) *Client_GetPullRequestReviewers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetPullRequestReviewers_Call) RunAndReturn(run func(context.Context, git.GetPullRequestReviewersArgs) (*[]git.IdentityRefWithVote, error)) *Client_GetPullRequestReviewers_Call {
	_c.Call.Return(run)
	return _c
}

// GetPullRequestStatus provides a mock function with given fields: _a0, _a1
func (_m *Client) GetPullRequestStatus(_a0 context.Context, _a1 git.GetPullRequestStatusArgs) (*git.GitPullRequestStatus, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetPullRequestStatus")
	}

	var r0 *git.GitPullRequestStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.GetPullRequestStatusArgs) (*git.GitPullRequestStatus, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.GetPullRequestStatusArgs) *git.GitPullRequestStatus); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*git.GitPullRequestStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.GetPullRequestStatusArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetPullRequestStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPullRequestStatus'
type Client_GetPullRequestStatus_Call struct {
	*mock.Call
}

// GetPullRequestStatus is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.GetPullRequestStatusArgs
func (_e *Client_Expecter) GetPullRequestStatus(_a0 interface{}, _a1 interface{}) *Client_GetPullRequestStatus_Call {
	return &Client_GetPullRequestStatus_Call{Call: _e.mock.On("GetPullRequestStatus", _a0, _a1)}
}

func (_c *Client_GetPullRequestStatus_Call) Run(run func(_a0 context.Context, _a1 git.GetPullRequestStatusArgs)) *Client_GetPullRequestStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.GetPullRequestStatusArgs))
	})
	return _c
}

func (_c *Client_GetPullRequestStatus_Call) Return(_a0 *git.GitPullRequestStatus, _a1 error) *Client_GetPullRequestStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetPullRequestStatus_Call) RunAndReturn(run func(context.Context, git.GetPullRequestStatusArgs) (*git.GitPullRequestStatus, error)) *Client_GetPullRequestStatus_Call {
	_c.Call.Return(run)
	return _c
}

// GetPullRequestStatuses provides a mock function with given fields: _a0, _a1
func (_m *Client) GetPullRequestStatuses(_a0 context.Context, _a1 git.GetPullRequestStatusesArgs) (*[]git.GitPullRequestStatus, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetPullRequestStatuses")
	}

	var r0 *[]git.GitPullRequestStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.GetPullRequestStatusesArgs) (*[]git.GitPullRequestStatus, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.GetPullRequestStatusesArgs) *[]git.GitPullRequestStatus); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]git.GitPullRequestStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.GetPullRequestStatusesArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetPullRequestStatuses_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPullRequestStatuses'
type Client_GetPullRequestStatuses_Call struct {
	*mock.Call
}

// GetPullRequestStatuses is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.GetPullRequestStatusesArgs
func (_e *Client_Expecter) GetPullRequestStatuses(_a0 interface{}, _a1 interface{}) *Client_GetPullRequestStatuses_Call {
	return &Client_GetPullRequestStatuses_Call{Call: _e.mock.On("GetPullRequestStatuses", _a0, _a1)}
}

func (_c *Client_GetPullRequestStatuses_Call) Run(run func(_a0 context.Context, _a1 git.GetPullRequestStatusesArgs)) *Client_GetPullRequestStatuses_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.GetPullRequestStatusesArgs))
	})
	return _c
}

func (_c *Client_GetPullRequestStatuses_Call) Return(_a0 *[]git.GitPullRequestStatus, _a1 error) *Client_GetPullRequestStatuses_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetPullRequestStatuses_Call) RunAndReturn(run func(context.Context, git.GetPullRequestStatusesArgs) (*[]git.GitPullRequestStatus, error)) *Client_GetPullRequestStatuses_Call {
	_c.Call.Return(run)
	return _c
}

// GetPullRequestThread provides a mock function with given fields: _a0, _a1
func (_m *Client) GetPullRequestThread(_a0 context.Context, _a1 git.GetPullRequestThreadArgs) (*git.GitPullRequestCommentThread, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetPullRequestThread")
	}

	var r0 *git.GitPullRequestCommentThread
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.GetPullRequestThreadArgs) (*git.GitPullRequestCommentThread, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.GetPullRequestThreadArgs) *git.GitPullRequestCommentThread); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*git.GitPullRequestCommentThread)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.GetPullRequestThreadArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetPullRequestThread_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPullRequestThread'
type Client_GetPullRequestThread_Call struct {
	*mock.Call
}

// GetPullRequestThread is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.GetPullRequestThreadArgs
func (_e *Client_Expecter) GetPullRequestThread(_a0 interface{}, _a1 interface{}) *Client_GetPullRequestThread_Call {
	return &Client_GetPullRequestThread_Call{Call: _e.mock.On("GetPullRequestThread", _a0, _a1)}
}

func (_c *Client_GetPullRequestThread_Call) Run(run func(_a0 context.Context, _a1 git.GetPullRequestThreadArgs)) *Client_GetPullRequestThread_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.GetPullRequestThreadArgs))
	})
	return _c
}

func (_c *Client_GetPullRequestThread_Call) Return(_a0 *git.GitPullRequestCommentThread, _a1 error) *Client_GetPullRequestThread_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetPullRequestThread_Call) RunAndReturn(run func(context.Context, git.GetPullRequestThreadArgs) (*git.GitPullRequestCommentThread, error)) *Client_GetPullRequestThread_Call {
	_c.Call.Return(run)
	return _c
}

// GetPullRequestWorkItemRefs provides a mock function with given fields: _a0, _a1
func (_m *Client) GetPullRequestWorkItemRefs(_a0 context.Context, _a1 git.GetPullRequestWorkItemRefsArgs) (*[]webapi.ResourceRef, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetPullRequestWorkItemRefs")
	}

	var r0 *[]webapi.ResourceRef
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.GetPullRequestWorkItemRefsArgs) (*[]webapi.ResourceRef, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.GetPullRequestWorkItemRefsArgs) *[]webapi.ResourceRef); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]webapi.ResourceRef)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.GetPullRequestWorkItemRefsArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetPullRequestWorkItemRefs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPullRequestWorkItemRefs'
type Client_GetPullRequestWorkItemRefs_Call struct {
	*mock.Call
}

// GetPullRequestWorkItemRefs is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.GetPullRequestWorkItemRefsArgs
func (_e *Client_Expecter) GetPullRequestWorkItemRefs(_a0 interface{}, _a1 interface{}) *Client_GetPullRequestWorkItemRefs_Call {
	return &Client_GetPullRequestWorkItemRefs_Call{Call: _e.mock.On("GetPullRequestWorkItemRefs", _a0, _a1)}
}

func (_c *Client_GetPullRequestWorkItemRefs_Call) Run(run func(_a0 context.Context, _a1 git.GetPullRequestWorkItemRefsArgs)) *Client_GetPullRequestWorkItemRefs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.GetPullRequestWorkItemRefsArgs))
	})
	return _c
}

func (_c *Client_GetPullRequestWorkItemRefs_Call) Return(_a0 *[]webapi.ResourceRef, _a1 error) *Client_GetPullRequestWorkItemRefs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetPullRequestWorkItemRefs_Call) RunAndReturn(run func(context.Context, git.GetPullRequestWorkItemRefsArgs) (*[]webapi.ResourceRef, error)) *Client_GetPullRequestWorkItemRefs_Call {
	_c.Call.Return(run)
	return _c
}

// GetPullRequests provides a mock function with given fields: _a0, _a1
func (_m *Client) GetPullRequests(_a0 context.Context, _a1 git.GetPullRequestsArgs) (*[]git.GitPullRequest, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetPullRequests")
	}

	var r0 *[]git.GitPullRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.GetPullRequestsArgs) (*[]git.GitPullRequest, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.GetPullRequestsArgs) *[]git.GitPullRequest); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]git.GitPullRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.GetPullRequestsArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetPullRequests_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPullRequests'
type Client_GetPullRequests_Call struct {
	*mock.Call
}

// GetPullRequests is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.GetPullRequestsArgs
func (_e *Client_Expecter) GetPullRequests(_a0 interface{}, _a1 interface{}) *Client_GetPullRequests_Call {
	return &Client_GetPullRequests_Call{Call: _e.mock.On("GetPullRequests", _a0, _a1)}
}

func (_c *Client_GetPullRequests_Call) Run(run func(_a0 context.Context, _a1 git.GetPullRequestsArgs)) *Client_GetPullRequests_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.GetPullRequestsArgs))
	})
	return _c
}

func (_c *Client_GetPullRequests_Call) Return(_a0 *[]git.GitPullRequest, _a1 error) *Client_GetPullRequests_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetPullRequests_Call) RunAndReturn(run func(context.Context, git.GetPullRequestsArgs) (*[]git.GitPullRequest, error)) *Client_GetPullRequests_Call {
	_c.Call.Return(run)
	return _c
}

// GetPullRequestsByProject provides a mock function with given fields: _a0, _a1
func (_m *Client) GetPullRequestsByProject(_a0 context.Context, _a1 git.GetPullRequestsByProjectArgs) (*[]git.GitPullRequest, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetPullRequestsByProject")
	}

	var r0 *[]git.GitPullRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.GetPullRequestsByProjectArgs) (*[]git.GitPullRequest, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.GetPullRequestsByProjectArgs) *[]git.GitPullRequest); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]git.GitPullRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.GetPullRequestsByProjectArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetPullRequestsByProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPullRequestsByProject'
type Client_GetPullRequestsByProject_Call struct {
	*mock.Call
}

// GetPullRequestsByProject is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.GetPullRequestsByProjectArgs
func (_e *Client_Expecter) GetPullRequestsByProject(_a0 interface{}, _a1 interface{}) *Client_GetPullRequestsByProject_Call {
	return &Client_GetPullRequestsByProject_Call{Call: _e.mock.On("GetPullRequestsByProject", _a0, _a1)}
}

func (_c *Client_GetPullRequestsByProject_Call) Run(run func(_a0 context.Context, _a1 git.GetPullRequestsByProjectArgs)) *Client_GetPullRequestsByProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.GetPullRequestsByProjectArgs))
	})
	return _c
}

func (_c *Client_GetPullRequestsByProject_Call) Return(_a0 *[]git.GitPullRequest, _a1 error) *Client_GetPullRequestsByProject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetPullRequestsByProject_Call) RunAndReturn(run func(context.Context, git.GetPullRequestsByProjectArgs) (*[]git.GitPullRequest, error)) *Client_GetPullRequestsByProject_Call {
	_c.Call.Return(run)
	return _c
}

// GetPush provides a mock function with given fields: _a0, _a1
func (_m *Client) GetPush(_a0 context.Context, _a1 git.GetPushArgs) (*git.GitPush, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetPush")
	}

	var r0 *git.GitPush
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.GetPushArgs) (*git.GitPush, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.GetPushArgs) *git.GitPush); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*git.GitPush)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.GetPushArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetPush_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPush'
type Client_GetPush_Call struct {
	*mock.Call
}

// GetPush is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.GetPushArgs
func (_e *Client_Expecter) GetPush(_a0 interface{}, _a1 interface{}) *Client_GetPush_Call {
	return &Client_GetPush_Call{Call: _e.mock.On("GetPush", _a0, _a1)}
}

func (_c *Client_GetPush_Call) Run(run func(_a0 context.Context, _a1 git.GetPushArgs)) *Client_GetPush_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.GetPushArgs))
	})
	return _c
}

func (_c *Client_GetPush_Call) Return(_a0 *git.GitPush, _a1 error) *Client_GetPush_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetPush_Call) RunAndReturn(run func(context.Context, git.GetPushArgs) (*git.GitPush, error)) *Client_GetPush_Call {
	_c.Call.Return(run)
	return _c
}

// GetPushCommits provides a mock function with given fields: _a0, _a1
func (_m *Client) GetPushCommits(_a0 context.Context, _a1 git.GetPushCommitsArgs) (*[]git.GitCommitRef, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetPushCommits")
	}

	var r0 *[]git.GitCommitRef
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.GetPushCommitsArgs) (*[]git.GitCommitRef, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.GetPushCommitsArgs) *[]git.GitCommitRef); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]git.GitCommitRef)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.GetPushCommitsArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetPushCommits_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPushCommits'
type Client_GetPushCommits_Call struct {
	*mock.Call
}

// GetPushCommits is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.GetPushCommitsArgs
func (_e *Client_Expecter) GetPushCommits(_a0 interface{}, _a1 interface{}) *Client_GetPushCommits_Call {
	return &Client_GetPushCommits_Call{Call: _e.mock.On("GetPushCommits", _a0, _a1)}
}

func (_c *Client_GetPushCommits_Call) Run(run func(_a0 context.Context, _a1 git.GetPushCommitsArgs)) *Client_GetPushCommits_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.GetPushCommitsArgs))
	})
	return _c
}

func (_c *Client_GetPushCommits_Call) Return(_a0 *[]git.GitCommitRef, _a1 error) *Client_GetPushCommits_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetPushCommits_Call) RunAndReturn(run func(context.Context, git.GetPushCommitsArgs) (*[]git.GitCommitRef, error)) *Client_GetPushCommits_Call {
	_c.Call.Return(run)
	return _c
}

// GetPushes provides a mock function with given fields: _a0, _a1
func (_m *Client) GetPushes(_a0 context.Context, _a1 git.GetPushesArgs) (*[]git.GitPush, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetPushes")
	}

	var r0 *[]git.GitPush
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.GetPushesArgs) (*[]git.GitPush, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.GetPushesArgs) *[]git.GitPush); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]git.GitPush)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.GetPushesArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetPushes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPushes'
type Client_GetPushes_Call struct {
	*mock.Call
}

// GetPushes is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.GetPushesArgs
func (_e *Client_Expecter) GetPushes(_a0 interface{}, _a1 interface{}) *Client_GetPushes_Call {
	return &Client_GetPushes_Call{Call: _e.mock.On("GetPushes", _a0, _a1)}
}

func (_c *Client_GetPushes_Call) Run(run func(_a0 context.Context, _a1 git.GetPushesArgs)) *Client_GetPushes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.GetPushesArgs))
	})
	return _c
}

func (_c *Client_GetPushes_Call) Return(_a0 *[]git.GitPush, _a1 error) *Client_GetPushes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetPushes_Call) RunAndReturn(run func(context.Context, git.GetPushesArgs) (*[]git.GitPush, error)) *Client_GetPushes_Call {
	_c.Call.Return(run)
	return _c
}

// GetRecycleBinRepositories provides a mock function with given fields: _a0, _a1
func (_m *Client) GetRecycleBinRepositories(_a0 context.Context, _a1 git.GetRecycleBinRepositoriesArgs) (*[]git.GitDeletedRepository, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetRecycleBinRepositories")
	}

	var r0 *[]git.GitDeletedRepository
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.GetRecycleBinRepositoriesArgs) (*[]git.GitDeletedRepository, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.GetRecycleBinRepositoriesArgs) *[]git.GitDeletedRepository); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]git.GitDeletedRepository)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.GetRecycleBinRepositoriesArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetRecycleBinRepositories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRecycleBinRepositories'
type Client_GetRecycleBinRepositories_Call struct {
	*mock.Call
}

// GetRecycleBinRepositories is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.GetRecycleBinRepositoriesArgs
func (_e *Client_Expecter) GetRecycleBinRepositories(_a0 interface{}, _a1 interface{}) *Client_GetRecycleBinRepositories_Call {
	return &Client_GetRecycleBinRepositories_Call{Call: _e.mock.On("GetRecycleBinRepositories", _a0, _a1)}
}

func (_c *Client_GetRecycleBinRepositories_Call) Run(run func(_a0 context.Context, _a1 git.GetRecycleBinRepositoriesArgs)) *Client_GetRecycleBinRepositories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.GetRecycleBinRepositoriesArgs))
	})
	return _c
}

func (_c *Client_GetRecycleBinRepositories_Call) Return(_a0 *[]git.GitDeletedRepository, _a1 error) *Client_GetRecycleBinRepositories_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetRecycleBinRepositories_Call) RunAndReturn(run func(context.Context, git.GetRecycleBinRepositoriesArgs) (*[]git.GitDeletedRepository, error)) *Client_GetRecycleBinRepositories_Call {
	_c.Call.Return(run)
	return _c
}

// GetRefFavorite provides a mock function with given fields: _a0, _a1
func (_m *Client) GetRefFavorite(_a0 context.Context, _a1 git.GetRefFavoriteArgs) (*git.GitRefFavorite, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetRefFavorite")
	}

	var r0 *git.GitRefFavorite
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.GetRefFavoriteArgs) (*git.GitRefFavorite, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.GetRefFavoriteArgs) *git.GitRefFavorite); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*git.GitRefFavorite)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.GetRefFavoriteArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetRefFavorite_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRefFavorite'
type Client_GetRefFavorite_Call struct {
	*mock.Call
}

// GetRefFavorite is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.GetRefFavoriteArgs
func (_e *Client_Expecter) GetRefFavorite(_a0 interface{}, _a1 interface{}) *Client_GetRefFavorite_Call {
	return &Client_GetRefFavorite_Call{Call: _e.mock.On("GetRefFavorite", _a0, _a1)}
}

func (_c *Client_GetRefFavorite_Call) Run(run func(_a0 context.Context, _a1 git.GetRefFavoriteArgs)) *Client_GetRefFavorite_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.GetRefFavoriteArgs))
	})
	return _c
}

func (_c *Client_GetRefFavorite_Call) Return(_a0 *git.GitRefFavorite, _a1 error) *Client_GetRefFavorite_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetRefFavorite_Call) RunAndReturn(run func(context.Context, git.GetRefFavoriteArgs) (*git.GitRefFavorite, error)) *Client_GetRefFavorite_Call {
	_c.Call.Return(run)
	return _c
}

// GetRefFavorites provides a mock function with given fields: _a0, _a1
func (_m *Client) GetRefFavorites(_a0 context.Context, _a1 git.GetRefFavoritesArgs) (*[]git.GitRefFavorite, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetRefFavorites")
	}

	var r0 *[]git.GitRefFavorite
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.GetRefFavoritesArgs) (*[]git.GitRefFavorite, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.GetRefFavoritesArgs) *[]git.GitRefFavorite); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]git.GitRefFavorite)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.GetRefFavoritesArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetRefFavorites_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRefFavorites'
type Client_GetRefFavorites_Call struct {
	*mock.Call
}

// GetRefFavorites is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.GetRefFavoritesArgs
func (_e *Client_Expecter) GetRefFavorites(_a0 interface{}, _a1 interface{}) *Client_GetRefFavorites_Call {
	return &Client_GetRefFavorites_Call{Call: _e.mock.On("GetRefFavorites", _a0, _a1)}
}

func (_c *Client_GetRefFavorites_Call) Run(run func(_a0 context.Context, _a1 git.GetRefFavoritesArgs)) *Client_GetRefFavorites_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.GetRefFavoritesArgs))
	})
	return _c
}

func (_c *Client_GetRefFavorites_Call) Return(_a0 *[]git.GitRefFavorite, _a1 error) *Client_GetRefFavorites_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetRefFavorites_Call) RunAndReturn(run func(context.Context, git.GetRefFavoritesArgs) (*[]git.GitRefFavorite, error)) *Client_GetRefFavorites_Call {
	_c.Call.Return(run)
	return _c
}

// GetRefs provides a mock function with given fields: _a0, _a1
func (_m *Client) GetRefs(_a0 context.Context, _a1 git.GetRefsArgs) (*git.GetRefsResponseValue, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetRefs")
	}

	var r0 *git.GetRefsResponseValue
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.GetRefsArgs) (*git.GetRefsResponseValue, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.GetRefsArgs) *git.GetRefsResponseValue); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*git.GetRefsResponseValue)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.GetRefsArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetRefs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRefs'
type Client_GetRefs_Call struct {
	*mock.Call
}

// GetRefs is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.GetRefsArgs
func (_e *Client_Expecter) GetRefs(_a0 interface{}, _a1 interface{}) *Client_GetRefs_Call {
	return &Client_GetRefs_Call{Call: _e.mock.On("GetRefs", _a0, _a1)}
}

func (_c *Client_GetRefs_Call) Run(run func(_a0 context.Context, _a1 git.GetRefsArgs)) *Client_GetRefs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.GetRefsArgs))
	})
	return _c
}

func (_c *Client_GetRefs_Call) Return(_a0 *git.GetRefsResponseValue, _a1 error) *Client_GetRefs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetRefs_Call) RunAndReturn(run func(context.Context, git.GetRefsArgs) (*git.GetRefsResponseValue, error)) *Client_GetRefs_Call {
	_c.Call.Return(run)
	return _c
}

// GetRepositories provides a mock function with given fields: _a0, _a1
func (_m *Client) GetRepositories(_a0 context.Context, _a1 git.GetRepositoriesArgs) (*[]git.GitRepository, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetRepositories")
	}

	var r0 *[]git.GitRepository
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.GetRepositoriesArgs) (*[]git.GitRepository, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.GetRepositoriesArgs) *[]git.GitRepository); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]git.GitRepository)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.GetRepositoriesArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetRepositories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRepositories'
type Client_GetRepositories_Call struct {
	*mock.Call
}

// GetRepositories is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.GetRepositoriesArgs
func (_e *Client_Expecter) GetRepositories(_a0 interface{}, _a1 interface{}) *Client_GetRepositories_Call {
	return &Client_GetRepositories_Call{Call: _e.mock.On("GetRepositories", _a0, _a1)}
}

func (_c *Client_GetRepositories_Call) Run(run func(_a0 context.Context, _a1 git.GetRepositoriesArgs)) *Client_GetRepositories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.GetRepositoriesArgs))
	})
	return _c
}

func (_c *Client_GetRepositories_Call) Return(_a0 *[]git.GitRepository, _a1 error) *Client_GetRepositories_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetRepositories_Call) RunAndReturn(run func(context.Context, git.GetRepositoriesArgs) (*[]git.GitRepository, error)) *Client_GetRepositories_Call {
	_c.Call.Return(run)
	return _c
}

// GetRepository provides a mock function with given fields: _a0, _a1
func (_m *Client) GetRepository(_a0 context.Context, _a1 git.GetRepositoryArgs) (*git.GitRepository, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetRepository")
	}

	var r0 *git.GitRepository
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.GetRepositoryArgs) (*git.GitRepository, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.GetRepositoryArgs) *git.GitRepository); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*git.GitRepository)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.GetRepositoryArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRepository'
type Client_GetRepository_Call struct {
	*mock.Call
}

// GetRepository is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.GetRepositoryArgs
func (_e *Client_Expecter) GetRepository(_a0 interface{}, _a1 interface{}) *Client_GetRepository_Call {
	return &Client_GetRepository_Call{Call: _e.mock.On("GetRepository", _a0, _a1)}
}

func (_c *Client_GetRepository_Call) Run(run func(_a0 context.Context, _a1 git.GetRepositoryArgs)) *Client_GetRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.GetRepositoryArgs))
	})
	return _c
}

func (_c *Client_GetRepository_Call) Return(_a0 *git.GitRepository, _a1 error) *Client_GetRepository_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetRepository_Call) RunAndReturn(run func(context.Context, git.GetRepositoryArgs) (*git.GitRepository, error)) *Client_GetRepository_Call {
	_c.Call.Return(run)
	return _c
}

// GetRepositoryWithParent provides a mock function with given fields: _a0, _a1
func (_m *Client) GetRepositoryWithParent(_a0 context.Context, _a1 git.GetRepositoryWithParentArgs) (*git.GitRepository, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetRepositoryWithParent")
	}

	var r0 *git.GitRepository
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.GetRepositoryWithParentArgs) (*git.GitRepository, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.GetRepositoryWithParentArgs) *git.GitRepository); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*git.GitRepository)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.GetRepositoryWithParentArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetRepositoryWithParent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRepositoryWithParent'
type Client_GetRepositoryWithParent_Call struct {
	*mock.Call
}

// GetRepositoryWithParent is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.GetRepositoryWithParentArgs
func (_e *Client_Expecter) GetRepositoryWithParent(_a0 interface{}, _a1 interface{}) *Client_GetRepositoryWithParent_Call {
	return &Client_GetRepositoryWithParent_Call{Call: _e.mock.On("GetRepositoryWithParent", _a0, _a1)}
}

func (_c *Client_GetRepositoryWithParent_Call) Run(run func(_a0 context.Context, _a1 git.GetRepositoryWithParentArgs)) *Client_GetRepositoryWithParent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.GetRepositoryWithParentArgs))
	})
	return _c
}

func (_c *Client_GetRepositoryWithParent_Call) Return(_a0 *git.GitRepository, _a1 error) *Client_GetRepositoryWithParent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetRepositoryWithParent_Call) RunAndReturn(run func(context.Context, git.GetRepositoryWithParentArgs) (*git.GitRepository, error)) *Client_GetRepositoryWithParent_Call {
	_c.Call.Return(run)
	return _c
}

// GetRevert provides a mock function with given fields: _a0, _a1
func (_m *Client) GetRevert(_a0 context.Context, _a1 git.GetRevertArgs) (*git.GitRevert, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetRevert")
	}

	var r0 *git.GitRevert
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.GetRevertArgs) (*git.GitRevert, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.GetRevertArgs) *git.GitRevert); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*git.GitRevert)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.GetRevertArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetRevert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRevert'
type Client_GetRevert_Call struct {
	*mock.Call
}

// GetRevert is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.GetRevertArgs
func (_e *Client_Expecter) GetRevert(_a0 interface{}, _a1 interface{}) *Client_GetRevert_Call {
	return &Client_GetRevert_Call{Call: _e.mock.On("GetRevert", _a0, _a1)}
}

func (_c *Client_GetRevert_Call) Run(run func(_a0 context.Context, _a1 git.GetRevertArgs)) *Client_GetRevert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.GetRevertArgs))
	})
	return _c
}

func (_c *Client_GetRevert_Call) Return(_a0 *git.GitRevert, _a1 error) *Client_GetRevert_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetRevert_Call) RunAndReturn(run func(context.Context, git.GetRevertArgs) (*git.GitRevert, error)) *Client_GetRevert_Call {
	_c.Call.Return(run)
	return _c
}

// GetRevertForRefName provides a mock function with given fields: _a0, _a1
func (_m *Client) GetRevertForRefName(_a0 context.Context, _a1 git.GetRevertForRefNameArgs) (*git.GitRevert, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetRevertForRefName")
	}

	var r0 *git.GitRevert
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.GetRevertForRefNameArgs) (*git.GitRevert, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.GetRevertForRefNameArgs) *git.GitRevert); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*git.GitRevert)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.GetRevertForRefNameArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetRevertForRefName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRevertForRefName'
type Client_GetRevertForRefName_Call struct {
	*mock.Call
}

// GetRevertForRefName is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.GetRevertForRefNameArgs
func (_e *Client_Expecter) GetRevertForRefName(_a0 interface{}, _a1 interface{}) *Client_GetRevertForRefName_Call {
	return &Client_GetRevertForRefName_Call{Call: _e.mock.On("GetRevertForRefName", _a0, _a1)}
}

func (_c *Client_GetRevertForRefName_Call) Run(run func(_a0 context.Context, _a1 git.GetRevertForRefNameArgs)) *Client_GetRevertForRefName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.GetRevertForRefNameArgs))
	})
	return _c
}

func (_c *Client_GetRevertForRefName_Call) Return(_a0 *git.GitRevert, _a1 error) *Client_GetRevertForRefName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetRevertForRefName_Call) RunAndReturn(run func(context.Context, git.GetRevertForRefNameArgs) (*git.GitRevert, error)) *Client_GetRevertForRefName_Call {
	_c.Call.Return(run)
	return _c
}

// GetStatuses provides a mock function with given fields: _a0, _a1
func (_m *Client) GetStatuses(_a0 context.Context, _a1 git.GetStatusesArgs) (*[]git.GitStatus, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetStatuses")
	}

	var r0 *[]git.GitStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.GetStatusesArgs) (*[]git.GitStatus, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.GetStatusesArgs) *[]git.GitStatus); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]git.GitStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.GetStatusesArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetStatuses_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStatuses'
type Client_GetStatuses_Call struct {
	*mock.Call
}

// GetStatuses is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.GetStatusesArgs
func (_e *Client_Expecter) GetStatuses(_a0 interface{}, _a1 interface{}) *Client_GetStatuses_Call {
	return &Client_GetStatuses_Call{Call: _e.mock.On("GetStatuses", _a0, _a1)}
}

func (_c *Client_GetStatuses_Call) Run(run func(_a0 context.Context, _a1 git.GetStatusesArgs)) *Client_GetStatuses_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.GetStatusesArgs))
	})
	return _c
}

func (_c *Client_GetStatuses_Call) Return(_a0 *[]git.GitStatus, _a1 error) *Client_GetStatuses_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetStatuses_Call) RunAndReturn(run func(context.Context, git.GetStatusesArgs) (*[]git.GitStatus, error)) *Client_GetStatuses_Call {
	_c.Call.Return(run)
	return _c
}

// GetSuggestions provides a mock function with given fields: _a0, _a1
func (_m *Client) GetSuggestions(_a0 context.Context, _a1 git.GetSuggestionsArgs) (*[]git.GitSuggestion, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetSuggestions")
	}

	var r0 *[]git.GitSuggestion
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.GetSuggestionsArgs) (*[]git.GitSuggestion, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.GetSuggestionsArgs) *[]git.GitSuggestion); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]git.GitSuggestion)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.GetSuggestionsArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetSuggestions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSuggestions'
type Client_GetSuggestions_Call struct {
	*mock.Call
}

// GetSuggestions is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.GetSuggestionsArgs
func (_e *Client_Expecter) GetSuggestions(_a0 interface{}, _a1 interface{}) *Client_GetSuggestions_Call {
	return &Client_GetSuggestions_Call{Call: _e.mock.On("GetSuggestions", _a0, _a1)}
}

func (_c *Client_GetSuggestions_Call) Run(run func(_a0 context.Context, _a1 git.GetSuggestionsArgs)) *Client_GetSuggestions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.GetSuggestionsArgs))
	})
	return _c
}

func (_c *Client_GetSuggestions_Call) Return(_a0 *[]git.GitSuggestion, _a1 error) *Client_GetSuggestions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetSuggestions_Call) RunAndReturn(run func(context.Context, git.GetSuggestionsArgs) (*[]git.GitSuggestion, error)) *Client_GetSuggestions_Call {
	_c.Call.Return(run)
	return _c
}

// GetThreads provides a mock function with given fields: _a0, _a1
func (_m *Client) GetThreads(_a0 context.Context, _a1 git.GetThreadsArgs) (*[]git.GitPullRequestCommentThread, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetThreads")
	}

	var r0 *[]git.GitPullRequestCommentThread
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.GetThreadsArgs) (*[]git.GitPullRequestCommentThread, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.GetThreadsArgs) *[]git.GitPullRequestCommentThread); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]git.GitPullRequestCommentThread)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.GetThreadsArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetThreads_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetThreads'
type Client_GetThreads_Call struct {
	*mock.Call
}

// GetThreads is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.GetThreadsArgs
func (_e *Client_Expecter) GetThreads(_a0 interface{}, _a1 interface{}) *Client_GetThreads_Call {
	return &Client_GetThreads_Call{Call: _e.mock.On("GetThreads", _a0, _a1)}
}

func (_c *Client_GetThreads_Call) Run(run func(_a0 context.Context, _a1 git.GetThreadsArgs)) *Client_GetThreads_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.GetThreadsArgs))
	})
	return _c
}

func (_c *Client_GetThreads_Call) Return(_a0 *[]git.GitPullRequestCommentThread, _a1 error) *Client_GetThreads_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetThreads_Call) RunAndReturn(run func(context.Context, git.GetThreadsArgs) (*[]git.GitPullRequestCommentThread, error)) *Client_GetThreads_Call {
	_c.Call.Return(run)
	return _c
}

// GetTree provides a mock function with given fields: _a0, _a1
func (_m *Client) GetTree(_a0 context.Context, _a1 git.GetTreeArgs) (*git.GitTreeRef, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetTree")
	}

	var r0 *git.GitTreeRef
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.GetTreeArgs) (*git.GitTreeRef, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.GetTreeArgs) *git.GitTreeRef); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*git.GitTreeRef)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.GetTreeArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetTree_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTree'
type Client_GetTree_Call struct {
	*mock.Call
}

// GetTree is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.GetTreeArgs
func (_e *Client_Expecter) GetTree(_a0 interface{}, _a1 interface{}) *Client_GetTree_Call {
	return &Client_GetTree_Call{Call: _e.mock.On("GetTree", _a0, _a1)}
}

func (_c *Client_GetTree_Call) Run(run func(_a0 context.Context, _a1 git.GetTreeArgs)) *Client_GetTree_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.GetTreeArgs))
	})
	return _c
}

func (_c *Client_GetTree_Call) Return(_a0 *git.GitTreeRef, _a1 error) *Client_GetTree_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetTree_Call) RunAndReturn(run func(context.Context, git.GetTreeArgs) (*git.GitTreeRef, error)) *Client_GetTree_Call {
	_c.Call.Return(run)
	return _c
}

// GetTreeZip provides a mock function with given fields: _a0, _a1
func (_m *Client) GetTreeZip(_a0 context.Context, _a1 git.GetTreeZipArgs) (io.ReadCloser, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetTreeZip")
	}

	var r0 io.ReadCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.GetTreeZipArgs) (io.ReadCloser, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.GetTreeZipArgs) io.ReadCloser); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.GetTreeZipArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetTreeZip_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTreeZip'
type Client_GetTreeZip_Call struct {
	*mock.Call
}

// GetTreeZip is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.GetTreeZipArgs
func (_e *Client_Expecter) GetTreeZip(_a0 interface{}, _a1 interface{}) *Client_GetTreeZip_Call {
	return &Client_GetTreeZip_Call{Call: _e.mock.On("GetTreeZip", _a0, _a1)}
}

func (_c *Client_GetTreeZip_Call) Run(run func(_a0 context.Context, _a1 git.GetTreeZipArgs)) *Client_GetTreeZip_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.GetTreeZipArgs))
	})
	return _c
}

func (_c *Client_GetTreeZip_Call) Return(_a0 io.ReadCloser, _a1 error) *Client_GetTreeZip_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetTreeZip_Call) RunAndReturn(run func(context.Context, git.GetTreeZipArgs) (io.ReadCloser, error)) *Client_GetTreeZip_Call {
	_c.Call.Return(run)
	return _c
}

// QueryImportRequests provides a mock function with given fields: _a0, _a1
func (_m *Client) QueryImportRequests(_a0 context.Context, _a1 git.QueryImportRequestsArgs) (*[]git.GitImportRequest, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for QueryImportRequests")
	}

	var r0 *[]git.GitImportRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.QueryImportRequestsArgs) (*[]git.GitImportRequest, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.QueryImportRequestsArgs) *[]git.GitImportRequest); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]git.GitImportRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.QueryImportRequestsArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_QueryImportRequests_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryImportRequests'
type Client_QueryImportRequests_Call struct {
	*mock.Call
}

// QueryImportRequests is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.QueryImportRequestsArgs
func (_e *Client_Expecter) QueryImportRequests(_a0 interface{}, _a1 interface{}) *Client_QueryImportRequests_Call {
	return &Client_QueryImportRequests_Call{Call: _e.mock.On("QueryImportRequests", _a0, _a1)}
}

func (_c *Client_QueryImportRequests_Call) Run(run func(_a0 context.Context, _a1 git.QueryImportRequestsArgs)) *Client_QueryImportRequests_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.QueryImportRequestsArgs))
	})
	return _c
}

func (_c *Client_QueryImportRequests_Call) Return(_a0 *[]git.GitImportRequest, _a1 error) *Client_QueryImportRequests_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_QueryImportRequests_Call) RunAndReturn(run func(context.Context, git.QueryImportRequestsArgs) (*[]git.GitImportRequest, error)) *Client_QueryImportRequests_Call {
	_c.Call.Return(run)
	return _c
}

// RestoreRepositoryFromRecycleBin provides a mock function with given fields: _a0, _a1
func (_m *Client) RestoreRepositoryFromRecycleBin(_a0 context.Context, _a1 git.RestoreRepositoryFromRecycleBinArgs) (*git.GitRepository, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for RestoreRepositoryFromRecycleBin")
	}

	var r0 *git.GitRepository
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.RestoreRepositoryFromRecycleBinArgs) (*git.GitRepository, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.RestoreRepositoryFromRecycleBinArgs) *git.GitRepository); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*git.GitRepository)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.RestoreRepositoryFromRecycleBinArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_RestoreRepositoryFromRecycleBin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RestoreRepositoryFromRecycleBin'
type Client_RestoreRepositoryFromRecycleBin_Call struct {
	*mock.Call
}

// RestoreRepositoryFromRecycleBin is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.RestoreRepositoryFromRecycleBinArgs
func (_e *Client_Expecter) RestoreRepositoryFromRecycleBin(_a0 interface{}, _a1 interface{}) *Client_RestoreRepositoryFromRecycleBin_Call {
	return &Client_RestoreRepositoryFromRecycleBin_Call{Call: _e.mock.On("RestoreRepositoryFromRecycleBin", _a0, _a1)}
}

func (_c *Client_RestoreRepositoryFromRecycleBin_Call) Run(run func(_a0 context.Context, _a1 git.RestoreRepositoryFromRecycleBinArgs)) *Client_RestoreRepositoryFromRecycleBin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.RestoreRepositoryFromRecycleBinArgs))
	})
	return _c
}

func (_c *Client_RestoreRepositoryFromRecycleBin_Call) Return(_a0 *git.GitRepository, _a1 error) *Client_RestoreRepositoryFromRecycleBin_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_RestoreRepositoryFromRecycleBin_Call) RunAndReturn(run func(context.Context, git.RestoreRepositoryFromRecycleBinArgs) (*git.GitRepository, error)) *Client_RestoreRepositoryFromRecycleBin_Call {
	_c.Call.Return(run)
	return _c
}

// SharePullRequest provides a mock function with given fields: _a0, _a1
func (_m *Client) SharePullRequest(_a0 context.Context, _a1 git.SharePullRequestArgs) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SharePullRequest")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, git.SharePullRequestArgs) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_SharePullRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SharePullRequest'
type Client_SharePullRequest_Call struct {
	*mock.Call
}

// SharePullRequest is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.SharePullRequestArgs
func (_e *Client_Expecter) SharePullRequest(_a0 interface{}, _a1 interface{}) *Client_SharePullRequest_Call {
	return &Client_SharePullRequest_Call{Call: _e.mock.On("SharePullRequest", _a0, _a1)}
}

func (_c *Client_SharePullRequest_Call) Run(run func(_a0 context.Context, _a1 git.SharePullRequestArgs)) *Client_SharePullRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.SharePullRequestArgs))
	})
	return _c
}

func (_c *Client_SharePullRequest_Call) Return(_a0 error) *Client_SharePullRequest_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_SharePullRequest_Call) RunAndReturn(run func(context.Context, git.SharePullRequestArgs) error) *Client_SharePullRequest_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateComment provides a mock function with given fields: _a0, _a1
func (_m *Client) UpdateComment(_a0 context.Context, _a1 git.UpdateCommentArgs) (*git.Comment, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateComment")
	}

	var r0 *git.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.UpdateCommentArgs) (*git.Comment, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.UpdateCommentArgs) *git.Comment); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*git.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.UpdateCommentArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_UpdateComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateComment'
type Client_UpdateComment_Call struct {
	*mock.Call
}

// UpdateComment is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.UpdateCommentArgs
func (_e *Client_Expecter) UpdateComment(_a0 interface{}, _a1 interface{}) *Client_UpdateComment_Call {
	return &Client_UpdateComment_Call{Call: _e.mock.On("UpdateComment", _a0, _a1)}
}

func (_c *Client_UpdateComment_Call) Run(run func(_a0 context.Context, _a1 git.UpdateCommentArgs)) *Client_UpdateComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.UpdateCommentArgs))
	})
	return _c
}

func (_c *Client_UpdateComment_Call) Return(_a0 *git.Comment, _a1 error) *Client_UpdateComment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_UpdateComment_Call) RunAndReturn(run func(context.Context, git.UpdateCommentArgs) (*git.Comment, error)) *Client_UpdateComment_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateImportRequest provides a mock function with given fields: _a0, _a1
func (_m *Client) UpdateImportRequest(_a0 context.Context, _a1 git.UpdateImportRequestArgs) (*git.GitImportRequest, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateImportRequest")
	}

	var r0 *git.GitImportRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.UpdateImportRequestArgs) (*git.GitImportRequest, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.UpdateImportRequestArgs) *git.GitImportRequest); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*git.GitImportRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.UpdateImportRequestArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_UpdateImportRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateImportRequest'
type Client_UpdateImportRequest_Call struct {
	*mock.Call
}

// UpdateImportRequest is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.UpdateImportRequestArgs
func (_e *Client_Expecter) UpdateImportRequest(_a0 interface{}, _a1 interface{}) *Client_UpdateImportRequest_Call {
	return &Client_UpdateImportRequest_Call{Call: _e.mock.On("UpdateImportRequest", _a0, _a1)}
}

func (_c *Client_UpdateImportRequest_Call) Run(run func(_a0 context.Context, _a1 git.UpdateImportRequestArgs)) *Client_UpdateImportRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.UpdateImportRequestArgs))
	})
	return _c
}

func (_c *Client_UpdateImportRequest_Call) Return(_a0 *git.GitImportRequest, _a1 error) *Client_UpdateImportRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_UpdateImportRequest_Call) RunAndReturn(run func(context.Context, git.UpdateImportRequestArgs) (*git.GitImportRequest, error)) *Client_UpdateImportRequest_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePullRequest provides a mock function with given fields: _a0, _a1
func (_m *Client) UpdatePullRequest(_a0 context.Context, _a1 git.UpdatePullRequestArgs) (*git.GitPullRequest, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePullRequest")
	}

	var r0 *git.GitPullRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.UpdatePullRequestArgs) (*git.GitPullRequest, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.UpdatePullRequestArgs) *git.GitPullRequest); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*git.GitPullRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.UpdatePullRequestArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_UpdatePullRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePullRequest'
type Client_UpdatePullRequest_Call struct {
	*mock.Call
}

// UpdatePullRequest is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.UpdatePullRequestArgs
func (_e *Client_Expecter) UpdatePullRequest(_a0 interface{}, _a1 interface{}) *Client_UpdatePullRequest_Call {
	return &Client_UpdatePullRequest_Call{Call: _e.mock.On("UpdatePullRequest", _a0, _a1)}
}

func (_c *Client_UpdatePullRequest_Call) Run(run func(_a0 context.Context, _a1 git.UpdatePullRequestArgs)) *Client_UpdatePullRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.UpdatePullRequestArgs))
	})
	return _c
}

func (_c *Client_UpdatePullRequest_Call) Return(_a0 *git.GitPullRequest, _a1 error) *Client_UpdatePullRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_UpdatePullRequest_Call) RunAndReturn(run func(context.Context, git.UpdatePullRequestArgs) (*git.GitPullRequest, error)) *Client_UpdatePullRequest_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePullRequestIterationStatuses provides a mock function with given fields: _a0, _a1
func (_m *Client) UpdatePullRequestIterationStatuses(_a0 context.Context, _a1 git.UpdatePullRequestIterationStatusesArgs) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePullRequestIterationStatuses")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, git.UpdatePullRequestIterationStatusesArgs) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_UpdatePullRequestIterationStatuses_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePullRequestIterationStatuses'
type Client_UpdatePullRequestIterationStatuses_Call struct {
	*mock.Call
}

// UpdatePullRequestIterationStatuses is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.UpdatePullRequestIterationStatusesArgs
func (_e *Client_Expecter) UpdatePullRequestIterationStatuses(_a0 interface{}, _a1 interface{}) *Client_UpdatePullRequestIterationStatuses_Call {
	return &Client_UpdatePullRequestIterationStatuses_Call{Call: _e.mock.On("UpdatePullRequestIterationStatuses", _a0, _a1)}
}

func (_c *Client_UpdatePullRequestIterationStatuses_Call) Run(run func(_a0 context.Context, _a1 git.UpdatePullRequestIterationStatusesArgs)) *Client_UpdatePullRequestIterationStatuses_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.UpdatePullRequestIterationStatusesArgs))
	})
	return _c
}

func (_c *Client_UpdatePullRequestIterationStatuses_Call) Return(_a0 error) *Client_UpdatePullRequestIterationStatuses_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_UpdatePullRequestIterationStatuses_Call) RunAndReturn(run func(context.Context, git.UpdatePullRequestIterationStatusesArgs) error) *Client_UpdatePullRequestIterationStatuses_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePullRequestProperties provides a mock function with given fields: _a0, _a1
func (_m *Client) UpdatePullRequestProperties(_a0 context.Context, _a1 git.UpdatePullRequestPropertiesArgs) (interface{}, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePullRequestProperties")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.UpdatePullRequestPropertiesArgs) (interface{}, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.UpdatePullRequestPropertiesArgs) interface{}); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.UpdatePullRequestPropertiesArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_UpdatePullRequestProperties_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePullRequestProperties'
type Client_UpdatePullRequestProperties_Call struct {
	*mock.Call
}

// UpdatePullRequestProperties is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.UpdatePullRequestPropertiesArgs
func (_e *Client_Expecter) UpdatePullRequestProperties(_a0 interface{}, _a1 interface{}) *Client_UpdatePullRequestProperties_Call {
	return &Client_UpdatePullRequestProperties_Call{Call: _e.mock.On("UpdatePullRequestProperties", _a0, _a1)}
}

func (_c *Client_UpdatePullRequestProperties_Call) Run(run func(_a0 context.Context, _a1 git.UpdatePullRequestPropertiesArgs)) *Client_UpdatePullRequestProperties_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.UpdatePullRequestPropertiesArgs))
	})
	return _c
}

func (_c *Client_UpdatePullRequestProperties_Call) Return(_a0 interface{}, _a1 error) *Client_UpdatePullRequestProperties_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_UpdatePullRequestProperties_Call) RunAndReturn(run func(context.Context, git.UpdatePullRequestPropertiesArgs) (interface{}, error)) *Client_UpdatePullRequestProperties_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePullRequestReviewer provides a mock function with given fields: _a0, _a1
func (_m *Client) UpdatePullRequestReviewer(_a0 context.Context, _a1 git.UpdatePullRequestReviewerArgs) (*git.IdentityRefWithVote, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePullRequestReviewer")
	}

	var r0 *git.IdentityRefWithVote
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.UpdatePullRequestReviewerArgs) (*git.IdentityRefWithVote, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.UpdatePullRequestReviewerArgs) *git.IdentityRefWithVote); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*git.IdentityRefWithVote)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.UpdatePullRequestReviewerArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_UpdatePullRequestReviewer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePullRequestReviewer'
type Client_UpdatePullRequestReviewer_Call struct {
	*mock.Call
}

// UpdatePullRequestReviewer is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.UpdatePullRequestReviewerArgs
func (_e *Client_Expecter) UpdatePullRequestReviewer(_a0 interface{}, _a1 interface{}) *Client_UpdatePullRequestReviewer_Call {
	return &Client_UpdatePullRequestReviewer_Call{Call: _e.mock.On("UpdatePullRequestReviewer", _a0, _a1)}
}

func (_c *Client_UpdatePullRequestReviewer_Call) Run(run func(_a0 context.Context, _a1 git.UpdatePullRequestReviewerArgs)) *Client_UpdatePullRequestReviewer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.UpdatePullRequestReviewerArgs))
	})
	return _c
}

func (_c *Client_UpdatePullRequestReviewer_Call) Return(_a0 *git.IdentityRefWithVote, _a1 error) *Client_UpdatePullRequestReviewer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_UpdatePullRequestReviewer_Call) RunAndReturn(run func(context.Context, git.UpdatePullRequestReviewerArgs) (*git.IdentityRefWithVote, error)) *Client_UpdatePullRequestReviewer_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePullRequestReviewers provides a mock function with given fields: _a0, _a1
func (_m *Client) UpdatePullRequestReviewers(_a0 context.Context, _a1 git.UpdatePullRequestReviewersArgs) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePullRequestReviewers")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, git.UpdatePullRequestReviewersArgs) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_UpdatePullRequestReviewers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePullRequestReviewers'
type Client_UpdatePullRequestReviewers_Call struct {
	*mock.Call
}

// UpdatePullRequestReviewers is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.UpdatePullRequestReviewersArgs
func (_e *Client_Expecter) UpdatePullRequestReviewers(_a0 interface{}, _a1 interface{}) *Client_UpdatePullRequestReviewers_Call {
	return &Client_UpdatePullRequestReviewers_Call{Call: _e.mock.On("UpdatePullRequestReviewers", _a0, _a1)}
}

func (_c *Client_UpdatePullRequestReviewers_Call) Run(run func(_a0 context.Context, _a1 git.UpdatePullRequestReviewersArgs)) *Client_UpdatePullRequestReviewers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.UpdatePullRequestReviewersArgs))
	})
	return _c
}

func (_c *Client_UpdatePullRequestReviewers_Call) Return(_a0 error) *Client_UpdatePullRequestReviewers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_UpdatePullRequestReviewers_Call) RunAndReturn(run func(context.Context, git.UpdatePullRequestReviewersArgs) error) *Client_UpdatePullRequestReviewers_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePullRequestStatuses provides a mock function with given fields: _a0, _a1
func (_m *Client) UpdatePullRequestStatuses(_a0 context.Context, _a1 git.UpdatePullRequestStatusesArgs) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePullRequestStatuses")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, git.UpdatePullRequestStatusesArgs) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_UpdatePullRequestStatuses_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePullRequestStatuses'
type Client_UpdatePullRequestStatuses_Call struct {
	*mock.Call
}

// UpdatePullRequestStatuses is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.UpdatePullRequestStatusesArgs
func (_e *Client_Expecter) UpdatePullRequestStatuses(_a0 interface{}, _a1 interface{}) *Client_UpdatePullRequestStatuses_Call {
	return &Client_UpdatePullRequestStatuses_Call{Call: _e.mock.On("UpdatePullRequestStatuses", _a0, _a1)}
}

func (_c *Client_UpdatePullRequestStatuses_Call) Run(run func(_a0 context.Context, _a1 git.UpdatePullRequestStatusesArgs)) *Client_UpdatePullRequestStatuses_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.UpdatePullRequestStatusesArgs))
	})
	return _c
}

func (_c *Client_UpdatePullRequestStatuses_Call) Return(_a0 error) *Client_UpdatePullRequestStatuses_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_UpdatePullRequestStatuses_Call) RunAndReturn(run func(context.Context, git.UpdatePullRequestStatusesArgs) error) *Client_UpdatePullRequestStatuses_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRef provides a mock function with given fields: _a0, _a1
func (_m *Client) UpdateRef(_a0 context.Context, _a1 git.UpdateRefArgs) (*git.GitRef, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRef")
	}

	var r0 *git.GitRef
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.UpdateRefArgs) (*git.GitRef, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.UpdateRefArgs) *git.GitRef); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*git.GitRef)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.UpdateRefArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_UpdateRef_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRef'
type Client_UpdateRef_Call struct {
	*mock.Call
}

// UpdateRef is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.UpdateRefArgs
func (_e *Client_Expecter) UpdateRef(_a0 interface{}, _a1 interface{}) *Client_UpdateRef_Call {
	return &Client_UpdateRef_Call{Call: _e.mock.On("UpdateRef", _a0, _a1)}
}

func (_c *Client_UpdateRef_Call) Run(run func(_a0 context.Context, _a1 git.UpdateRefArgs)) *Client_UpdateRef_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.UpdateRefArgs))
	})
	return _c
}

func (_c *Client_UpdateRef_Call) Return(_a0 *git.GitRef, _a1 error) *Client_UpdateRef_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_UpdateRef_Call) RunAndReturn(run func(context.Context, git.UpdateRefArgs) (*git.GitRef, error)) *Client_UpdateRef_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRefs provides a mock function with given fields: _a0, _a1
func (_m *Client) UpdateRefs(_a0 context.Context, _a1 git.UpdateRefsArgs) (*[]git.GitRefUpdateResult, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRefs")
	}

	var r0 *[]git.GitRefUpdateResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.UpdateRefsArgs) (*[]git.GitRefUpdateResult, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.UpdateRefsArgs) *[]git.GitRefUpdateResult); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]git.GitRefUpdateResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.UpdateRefsArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_UpdateRefs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRefs'
type Client_UpdateRefs_Call struct {
	*mock.Call
}

// UpdateRefs is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.UpdateRefsArgs
func (_e *Client_Expecter) UpdateRefs(_a0 interface{}, _a1 interface{}) *Client_UpdateRefs_Call {
	return &Client_UpdateRefs_Call{Call: _e.mock.On("UpdateRefs", _a0, _a1)}
}

func (_c *Client_UpdateRefs_Call) Run(run func(_a0 context.Context, _a1 git.UpdateRefsArgs)) *Client_UpdateRefs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.UpdateRefsArgs))
	})
	return _c
}

func (_c *Client_UpdateRefs_Call) Return(_a0 *[]git.GitRefUpdateResult, _a1 error) *Client_UpdateRefs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_UpdateRefs_Call) RunAndReturn(run func(context.Context, git.UpdateRefsArgs) (*[]git.GitRefUpdateResult, error)) *Client_UpdateRefs_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRepository provides a mock function with given fields: _a0, _a1
func (_m *Client) UpdateRepository(_a0 context.Context, _a1 git.UpdateRepositoryArgs) (*git.GitRepository, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRepository")
	}

	var r0 *git.GitRepository
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.UpdateRepositoryArgs) (*git.GitRepository, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.UpdateRepositoryArgs) *git.GitRepository); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*git.GitRepository)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.UpdateRepositoryArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_UpdateRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRepository'
type Client_UpdateRepository_Call struct {
	*mock.Call
}

// UpdateRepository is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.UpdateRepositoryArgs
func (_e *Client_Expecter) UpdateRepository(_a0 interface{}, _a1 interface{}) *Client_UpdateRepository_Call {
	return &Client_UpdateRepository_Call{Call: _e.mock.On("UpdateRepository", _a0, _a1)}
}

func (_c *Client_UpdateRepository_Call) Run(run func(_a0 context.Context, _a1 git.UpdateRepositoryArgs)) *Client_UpdateRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.UpdateRepositoryArgs))
	})
	return _c
}

func (_c *Client_UpdateRepository_Call) Return(_a0 *git.GitRepository, _a1 error) *Client_UpdateRepository_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_UpdateRepository_Call) RunAndReturn(run func(context.Context, git.UpdateRepositoryArgs) (*git.GitRepository, error)) *Client_UpdateRepository_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateThread provides a mock function with given fields: _a0, _a1
func (_m *Client) UpdateThread(_a0 context.Context, _a1 git.UpdateThreadArgs) (*git.GitPullRequestCommentThread, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateThread")
	}

	var r0 *git.GitPullRequestCommentThread
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.UpdateThreadArgs) (*git.GitPullRequestCommentThread, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.UpdateThreadArgs) *git.GitPullRequestCommentThread); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*git.GitPullRequestCommentThread)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.UpdateThreadArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_UpdateThread_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateThread'
type Client_UpdateThread_Call struct {
	*mock.Call
}

// UpdateThread is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 git.UpdateThreadArgs
func (_e *Client_Expecter) UpdateThread(_a0 interface{}, _a1 interface{}) *Client_UpdateThread_Call {
	return &Client_UpdateThread_Call{Call: _e.mock.On("UpdateThread", _a0, _a1)}
}

func (_c *Client_UpdateThread_Call) Run(run func(_a0 context.Context, _a1 git.UpdateThreadArgs)) *Client_UpdateThread_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.UpdateThreadArgs))
	})
	return _c
}

func (_c *Client_UpdateThread_Call) Return(_a0 *git.GitPullRequestCommentThread, _a1 error) *Client_UpdateThread_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_UpdateThread_Call) RunAndReturn(run func(context.Context, git.UpdateThreadArgs) (*git.GitPullRequestCommentThread, error)) *Client_UpdateThread_Call {
	_c.Call.Return(run)
	return _c
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
