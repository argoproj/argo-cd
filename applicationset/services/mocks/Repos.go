// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Repos is an autogenerated mock type for the Repos type
type Repos struct {
	mock.Mock
}

type Repos_Expecter struct {
	mock *mock.Mock
}

func (_m *Repos) EXPECT() *Repos_Expecter {
	return &Repos_Expecter{mock: &_m.Mock}
}

// GetDirectories provides a mock function with given fields: ctx, repoURL, revision, project, noRevisionCache, verifyCommit
func (_m *Repos) GetDirectories(ctx context.Context, repoURL string, revision string, project string, noRevisionCache bool, verifyCommit bool) ([]string, error) {
	ret := _m.Called(ctx, repoURL, revision, project, noRevisionCache, verifyCommit)

	if len(ret) == 0 {
		panic("no return value specified for GetDirectories")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, bool, bool) ([]string, error)); ok {
		return rf(ctx, repoURL, revision, project, noRevisionCache, verifyCommit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, bool, bool) []string); ok {
		r0 = rf(ctx, repoURL, revision, project, noRevisionCache, verifyCommit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, bool, bool) error); ok {
		r1 = rf(ctx, repoURL, revision, project, noRevisionCache, verifyCommit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repos_GetDirectories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDirectories'
type Repos_GetDirectories_Call struct {
	*mock.Call
}

// GetDirectories is a helper method to define mock.On call
//   - ctx context.Context
//   - repoURL string
//   - revision string
//   - project string
//   - noRevisionCache bool
//   - verifyCommit bool
func (_e *Repos_Expecter) GetDirectories(ctx interface{}, repoURL interface{}, revision interface{}, project interface{}, noRevisionCache interface{}, verifyCommit interface{}) *Repos_GetDirectories_Call {
	return &Repos_GetDirectories_Call{Call: _e.mock.On("GetDirectories", ctx, repoURL, revision, project, noRevisionCache, verifyCommit)}
}

func (_c *Repos_GetDirectories_Call) Run(run func(ctx context.Context, repoURL string, revision string, project string, noRevisionCache bool, verifyCommit bool)) *Repos_GetDirectories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(bool), args[5].(bool))
	})
	return _c
}

func (_c *Repos_GetDirectories_Call) Return(_a0 []string, _a1 error) *Repos_GetDirectories_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repos_GetDirectories_Call) RunAndReturn(run func(context.Context, string, string, string, bool, bool) ([]string, error)) *Repos_GetDirectories_Call {
	_c.Call.Return(run)
	return _c
}

// GetFiles provides a mock function with given fields: ctx, repoURL, revision, project, pattern, noRevisionCache, verifyCommit
func (_m *Repos) GetFiles(ctx context.Context, repoURL string, revision string, project string, pattern string, noRevisionCache bool, verifyCommit bool) (map[string][]byte, error) {
	ret := _m.Called(ctx, repoURL, revision, project, pattern, noRevisionCache, verifyCommit)

	if len(ret) == 0 {
		panic("no return value specified for GetFiles")
	}

	var r0 map[string][]byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, bool, bool) (map[string][]byte, error)); ok {
		return rf(ctx, repoURL, revision, project, pattern, noRevisionCache, verifyCommit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, bool, bool) map[string][]byte); ok {
		r0 = rf(ctx, repoURL, revision, project, pattern, noRevisionCache, verifyCommit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string][]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, bool, bool) error); ok {
		r1 = rf(ctx, repoURL, revision, project, pattern, noRevisionCache, verifyCommit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repos_GetFiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFiles'
type Repos_GetFiles_Call struct {
	*mock.Call
}

// GetFiles is a helper method to define mock.On call
//   - ctx context.Context
//   - repoURL string
//   - revision string
//   - project string
//   - pattern string
//   - noRevisionCache bool
//   - verifyCommit bool
func (_e *Repos_Expecter) GetFiles(ctx interface{}, repoURL interface{}, revision interface{}, project interface{}, pattern interface{}, noRevisionCache interface{}, verifyCommit interface{}) *Repos_GetFiles_Call {
	return &Repos_GetFiles_Call{Call: _e.mock.On("GetFiles", ctx, repoURL, revision, project, pattern, noRevisionCache, verifyCommit)}
}

func (_c *Repos_GetFiles_Call) Run(run func(ctx context.Context, repoURL string, revision string, project string, pattern string, noRevisionCache bool, verifyCommit bool)) *Repos_GetFiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].(bool), args[6].(bool))
	})
	return _c
}

func (_c *Repos_GetFiles_Call) Return(_a0 map[string][]byte, _a1 error) *Repos_GetFiles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repos_GetFiles_Call) RunAndReturn(run func(context.Context, string, string, string, string, bool, bool) (map[string][]byte, error)) *Repos_GetFiles_Call {
	_c.Call.Return(run)
	return _c
}

// NewRepos creates a new instance of Repos. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepos(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repos {
	mock := &Repos{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
