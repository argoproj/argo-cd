version: 2.1
commands:
  before:
    steps:
      - restore_go_cache
      - install_golang
      - install_tools
      - clean_checkout
      - configure_git
      - install_go_deps
      - dep_ensure
  configure_git:
    steps:
      - run:
          name: Configure Git
          command: |
            set -x
            # must be configured for tests to run
            git config --global user.email you@example.com
            git config --global user.name "Your Name"
            echo "export PATH=/home/circleci/.go_workspace/src/github.com/argoproj/argo-cd/hack:\$PATH" | tee -a $BASH_ENV
            echo "export PATH=/go/src/github.com/argoproj/argo-cd/hack:\$PATH" | tee -a $BASH_ENV
            echo "export GIT_ASKPASS=git-ask-pass.sh" | tee -a $BASH_ENV
  clean_checkout:
    steps:
      - run:
          name: Remove checked out code
          command: rm -Rf /home/circleci/.go_workspace/src/github.com/argoproj/argo-cd
      - checkout
  dep_ensure:
    steps:
      - restore_cache:
          keys:
            - vendor-v6-{{ checksum "Gopkg.lock" }}
      - run:
          name: Run dep ensure
          command: dep ensure
      - save_cache:
          key: vendor-v6-{{ checksum "Gopkg.lock" }}
          paths:
            - vendor
  install_golang:
    steps:
      - run:
          name: Install Golang v1.12.6
          command: |
            go get golang.org/dl/go1.12.6
            [ -e /home/circleci/sdk/go1.12.6 ] || go1.12.6 download
            echo "export GOPATH=/home/circleci/.go_workspace" | tee -a $BASH_ENV
            echo "export PATH=/home/circleci/sdk/go1.12.6/bin:\$PATH" | tee -a $BASH_ENV
      - run:
          name: Golang diagnostics
          command: |
            env
            which go
            go version
            go env
  install_go_deps:
    steps:
      - run:
          name: Install Go deps
          command: |
            set -x
            go get github.com/jstemmer/go-junit-report
            go get github.com/mattn/goreman
  install_tools:
    steps:
      - restore_cache:
          keys:
            - dl-v7
      - run: ./hack/install.sh kubectl-linux kubectx-linux dep-linux ksonnet-linux helm-linux kustomize-linux goimports
      - save_cache:
          key: dl-v7
          paths:
            - /tmp/dl
  check_for_changes:
    steps:
      - run:
          name: Check nothing has changed
          command: |
            set -xo pipefail
            # This makes sure you ran `make pre-commit` before you pushed.
            # We exclude the Swagger resources; CircleCI doesn't generate them correctly.
            # When this fails, it will, create a patch file you can apply locally to fix it.
            # To troubleshoot builds: https://argoproj.github.io/argo-cd/developer-guide/ci/
            git diff --exit-code -- . ':!Gopkg.lock'  ':!assets/swagger.json' | tee codegen.patch
      - store_artifacts:
          path: codegen.patch
          when: always
jobs:
  test:
    docker:
      - image: circleci/golang:1.12
    working_directory: /go/src/github.com/argoproj/argo-cd
    resource_class: large
    steps:
      - configure_git
      - checkout
      #- restore_cache:
      #    keys:
      #      - test-install-v1
      #- run: ./hack/install.sh kubectl-linux ksonnet-linux helm-linux kustomize-linux xsltproc-linux go-junit-report
      #- save_cache:
      #    key: test-install-v1
      #    paths:
      #      - /tmp/dl
      #      - /go/pkg
      #- dep_ensure
      - run: dep ensure
      - run: make test
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: test-results
          when: always
      - run:
          name: Uploading code coverage
          command: bash <(curl -s https://codecov.io/bash) -f coverage.out
  codegen:
    docker:
      - image: circleci/golang:1.12
    working_directory: /go/src/github.com/argoproj/argo-cd
    steps:
      - checkout
      - restore_cache:
          keys:
            - codegen-install-v1
      - run: ./hack/install.sh protoc-linux swagger-linux jq-linux helm-linux kustomize-linux codegen-tools
      - save_cache:
          key: codegen-install-v1
          paths:
            - /tmp/dl
            - /go/pkg
      - dep_ensure
      - run: make codegen
      - check_for_changes
  lint:
    docker:
      - image: circleci/golang:1.12
    working_directory: /go/src/github.com/argoproj/argo-cd
    steps:
      - checkout
      - run: ./hack/install.sh golangci-lint goimports
      - dep_ensure
      - run: make lint
      - check_for_changes
  e2e2:
    docker:
      - image: circleci/golang:1.12
        environment:
          ARGOCD_FAKE_IN_CLUSTER: "true"
          ARGOCD_SSH_DATA_PATH: "/tmp/argo-e2e/app/config/ssh"
          ARGOCD_TLS_DATA_PATH: "/tmp/argo-e2e/app/config/tls"
          ARGOCD_ZJWT_FEATURE_FLAG: "always"
          ARGOCD_OPTS: "--server localhost:8080 --plaintext"
          ARGOCD_E2E_EXPECT_TIMEOUT: "30"
          ARGOCD_E2E_K3S: "true"
      - image: rancher/k3s:v0.9.1
        command: k3s serve --token abc123
    working_directory: /go/src/github.com/argoproj/argo-cd
    resource_class: large
    steps:
      - checkout
      - restore_cache:
          keys:
            - e2e-install-v1
      - run: ./hack/install.sh kubectl-linux
      - save_cache:
          key: e2e-install-v1
          paths:
            - /tmp/dl
            - /go/pkg
      - dep_ensure
      - run: make test-e2e
  e2e:
    working_directory: /home/circleci/.go_workspace/src/github.com/argoproj/argo-cd
    machine:
      image: circleci/classic:201808-01
    steps:
      - run:
          name: Install and start K3S v0.5.0
          command: |
            curl -sfL https://get.k3s.io | sh -
            sudo chmod -R a+rw /etc/rancher/k3s
            kubectl version
          background: true
          environment:
            INSTALL_K3S_EXEC: --docker
            INSTALL_K3S_VERSION: v0.5.0
      - before
      - run:
          # do this before we build everything else in the background, as they tend to explode
          name: Make CLI
          command: |
            set -x
            make cli
            # must be added to path for tests
            echo export PATH="`pwd`/dist:\$PATH" | tee -a $BASH_ENV
      - run:
          name: Create namespace
          command: |
            set -x
            cat /etc/rancher/k3s/k3s.yaml | sed "s/localhost/`hostname`/" | tee ~/.kube/config
            echo "127.0.0.1 `hostname`" | sudo tee -a /etc/hosts
            kubectl create ns argocd-e2e
            kubens argocd-e2e
            # install the certificates (not 100% sure we need this)
            sudo cp /var/lib/rancher/k3s/server/tls/token-ca.crt /usr/local/share/ca-certificates/k3s.crt
            sudo update-ca-certificates
      - run:
          name: Apply manifests
          command: kustomize build test/manifests/base | kubectl apply -f -
      - run:
          name: Start Redis
          command: docker run --rm --name argocd-redis -i -p 6379:6379 redis:5.0.3-alpine --save "" --appendonly no
          background: true
      - run:
          name: Start repo server
          command: go run ./cmd/argocd-repo-server/main.go --loglevel debug --redis localhost:6379
          background: true
          environment:
            # pft. if you do not quote "true", CircleCI turns it into "1", stoopid
            ARGOCD_FAKE_IN_CLUSTER: "true"
            ARGOCD_SSH_DATA_PATH: "/tmp/argo-e2e/app/config/ssh"
            ARGOCD_TLS_DATA_PATH: "/tmp/argo-e2e/app/config/tls"
      - run:
          name: Start API server
          command: go run ./cmd/argocd-server/main.go --loglevel debug --redis localhost:6379 --insecure --dex-server http://localhost:5556 --repo-server localhost:8081 --staticassets ../argo-cd-ui/dist/app
          background: true
          environment:
            ARGOCD_FAKE_IN_CLUSTER: "true"
            ARGOCD_SSH_DATA_PATH: "/tmp/argo-e2e/app/config/ssh"
            ARGOCD_TLS_DATA_PATH: "/tmp/argo-e2e/app/config/tls"
            ARGOCD_ZJWT_FEATURE_FLAG: "always"
      - run:
          name: Start Test Git
          command: |
            test/fixture/testrepos/start-git.sh
          background: true
      - run:
          name: Wait for API server
          command: |
            set -x
            until curl -v http://localhost:8080/healthz; do sleep 3; done
      - run:
          name: Start controller
          command: go run ./cmd/argocd-application-controller/main.go --loglevel debug --redis localhost:6379 --repo-server localhost:8081 --kubeconfig ~/.kube/config
          background: true
          environment:
            ARGOCD_FAKE_IN_CLUSTER: "true"
      - run:
          name: Smoke test
          command: |
            set -x
            argocd login localhost:8080 --plaintext  --username admin --password password
            argocd app create guestbook --dest-namespace default --dest-server https://kubernetes.default.svc --repo https://github.com/argoproj/argocd-example-apps.git --path guestbook
            argocd app sync guestbook
            argocd app delete guestbook
      - run:
          name: Run e2e tests
          command: make test-e2e
          environment:
            ARGOCD_OPTS: "--server localhost:8080 --plaintext"
            ARGOCD_E2E_EXPECT_TIMEOUT: "30"
            ARGOCD_E2E_K3S: "true"
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: test-results/
          when: always
  ui:
    # note that we checkout the code in ~/argo-cd/, but then work in ~/argo-cd/ui
    working_directory: ~/argo-cd/ui
    docker:
      - image: node:11.15.0
    steps:
      - checkout:
          path: ~/argo-cd/
      - restore_cache:
          keys:
            - yarn-packages-v3-{{ checksum "yarn.lock" }}
      - run: yarn install --frozen-lockfile --ignore-optional --non-interactive
      - save_cache:
          key: yarn-packages-v3-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn
            - node_modules
      - run: yarn test
      - run: yarn build
      - run: yarn lint
      - check_for_changes
workflows:
  version: 2
  workflow:
    jobs:
      - test
      - lint
      - codegen
      - e2e2