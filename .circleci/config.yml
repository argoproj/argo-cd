version: 2.1
commands:
  configure_git:
    steps:
      - run:
          name: Configure Git
          command: |
            set -x
            # must be configured for tests to run
            git config --global user.email you@example.com
            git config --global user.name "Your Name"
            echo "export PATH=/home/circleci/.go_workspace/src/github.com/argoproj/argo-cd/hack:\$PATH" | tee -a $BASH_ENV
            echo "export PATH=/go/src/github.com/argoproj/argo-cd/hack:\$PATH" | tee -a $BASH_ENV
            echo "export GIT_ASKPASS=git-ask-pass.sh" | tee -a $BASH_ENV
  check_for_changes:
    steps:
      - run:
          name: Check nothing has changed
          command: |
            set -xo pipefail
            # This makes sure you ran `make pre-commit` before you pushed.
            # We exclude the Swagger resources; CircleCI doesn't generate them correctly.
            # When this fails, it will, create a patch file you can apply locally to fix it.
            # To troubleshoot builds: https://argoproj.github.io/argo-cd/developer-guide/ci/
            git diff --exit-code -- . ':!Gopkg.lock'  ':!assets/swagger.json' | tee codegen.patch
      - store_artifacts:
          path: codegen.patch
          when: always
jobs:
  test:
    docker:
      - image: circleci/golang:1.12
    working_directory: /go/src/github.com/argoproj/argo-cd
    resource_class: large
    steps:
      - configure_git
      - checkout
      - restore_cache:
          keys:
            - test-v1
      # - run: ./hack/install.sh kubectl-linux ksonnet-linux
      # helm-linux kustomize-linux
      #  xsltproc-linux go-junit-report
      - run: dep ensure
      - save_cache:
          key: test-v1
          paths:
            - /tmp/dl
            - /go/pkg
            - vendor
      - run: make test
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: test-results
          when: always
      - run:
          name: Uploading code coverage
          command: bash <(curl -s https://codecov.io/bash) -f coverage.out
  codegen:
    docker:
      - image: circleci/golang:1.12
    working_directory: /go/src/github.com/argoproj/argo-cd
    steps:
      - checkout
      - restore_cache:
          keys:
            - codegen-v1
      - run: ./hack/install.sh protoc-linux swagger-linux jq-linux helm-linux kustomize-linux codegen-tools
      - run: dep ensure
      - save_cache:
          key: codegen-v1
          paths:
            - /tmp/dl
            - /go/pkg
            - vendor
      - run: make codegen
      - check_for_changes
  lint:
    docker:
      - image: circleci/golang:1.12
    working_directory: /go/src/github.com/argoproj/argo-cd
    steps:
      - checkout
      - restore_cache:
          keys:
            - lint-v1
      - run: ./hack/install.sh golangci-lint goimports
      - run: dep ensure
      - save_cache:
          key: lint-v1
          paths:
            - /tmp/dl
            - /go/pkg
            - vendor
      - run: make lint
      - check_for_changes
  e2e:
    docker:
      - image: circleci/golang:1.12
        environment:
          ARGOCD_FAKE_IN_CLUSTER: "true"
          ARGOCD_SSH_DATA_PATH: "/tmp/argo-e2e/app/config/ssh"
          ARGOCD_TLS_DATA_PATH: "/tmp/argo-e2e/app/config/tls"
          ARGOCD_ZJWT_FEATURE_FLAG: "always"
          ARGOCD_OPTS: "--server localhost:8080 --plaintext"
          ARGOCD_E2E_EXPECT_TIMEOUT: "30"
          ARGOCD_E2E_K3S: "true"
      - image: rancher/k3s:v0.9.1
        command: server --disable-agent
        environment:
          - K3S_CLUSTER_SECRET=somethingtotallyrandom
      - image: rancher/k3s:v0.9.1
        environment:
          - K3S_URL=https://localhost:6443
          - K3S_CLUSTER_SECRET=somethingtotallyrandom
      - image: redis:5.0.3-alpine
    working_directory: /go/src/github.com/argoproj/argo-cd
    resource_class: large
    steps:
      - checkout
      - restore_cache:
          keys:
            - e2e-v1
      - run: ./hack/install.sh kubectl-linux kustomize-linux packr-linux
      - run: dep ensure
      - save_cache:
          key: e2e-v1
          paths:
            - /tmp/dl
            - /go/pkg
            - vendor
      - run: kubectl config set-cluster k3s --server=https://localhost:6443 --insecure-skip-tls-verify
      - run: kubectl config use-context k3s
      - run: kustomize build test/manifests/base | kubectl apply -f -
  ui:
    # note that we checkout the code in ~/argo-cd/, but then work in ~/argo-cd/ui
    working_directory: ~/argo-cd/ui
    docker:
      - image: node:11.15.0
    steps:
      - checkout:
          path: ~/argo-cd/
      - restore_cache:
          keys:
            - yarn-packages-v3-{{ checksum "yarn.lock" }}
      - run: yarn install --frozen-lockfile --ignore-optional --non-interactive
      - save_cache:
          key: yarn-packages-v3-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn
            - node_modules
      - run: yarn test
      - run: yarn build
      - run: yarn lint
      - check_for_changes
workflows:
  version: 2
  workflow:
    jobs:
      - test
      #- lint
      #- codegen
      - e2e
      #- ui