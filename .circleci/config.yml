version: 2.1
commands:
  configure_git:
    steps:
      - run:
          name: Configure Git
          command: |
            set -x
            # must be configured for tests to run
            git config --global user.email you@example.com
            git config --global user.name "Your Name"
            echo "export PATH=/home/circleci/.go_workspace/src/github.com/argoproj/argo-cd/hack:\$PATH" | tee -a $BASH_ENV
            echo "export GIT_ASKPASS=git-ask-pass.sh" | tee -a $BASH_ENV
  restore_vendor:
    steps:
      - restore_cache:
          keys:
            - vendor-v1-{{ checksum "Gopkg.lock" }}-{{ .Environment.CIRCLE_JOB }}
  save_vendor:
    steps:
      - save_cache:
          key: vendor-v1-{{ checksum "Gopkg.lock" }}-{{ .Environment.CIRCLE_JOB }}
          paths:
            - vendor
  install_golang:
    steps:
      - run:
          name: Install Golang v1.12.6
          command: |
            go get golang.org/dl/go1.12.6
            [ -e /home/circleci/sdk/go1.12.6 ] || go1.12.6 download
            go env
            echo "export GOPATH=/home/circleci/.go_workspace" | tee -a $BASH_ENV
            echo "export PATH=/home/circleci/sdk/go1.12.6/bin:\$PATH" | tee -a $BASH_ENV
  save_go_cache:
    steps:
      - save_cache:
          key: go-v1-{{ .Branch }}-{{ .Environment.CIRCLE_JOB }}
          # https://circleci.com/docs/2.0/language-go/
          paths:
            - /home/circleci/.cache/go-build
            - /home/circleci/sdk/go1.12.6
  restore_go_cache:
    steps:
      - restore_cache:
          keys:
            - go-v1-{{ .Branch }}-{{ .Environment.CIRCLE_JOB }}
            - go-v1-master-{{ .Environment.CIRCLE_JOB }}
jobs:
  codegen:
    docker:
      - image: circleci/golang:1.12
    working_directory: /go/src/github.com/argoproj/argo-cd
    steps:
      - checkout
      - restore_cache:
          keys: [codegen-v2]
      - run: ./hack/install.sh codegen-go-tools
      - run: sudo ./hack/install.sh codegen-tools
      - run: dep ensure
      - save_cache:
          key: codegen-v2
          paths: [vendor, /tmp/dl, /go/pkg]
      - run: helm init --client-only
      - run: make codegen-local
      - run:
          name: Check nothing has changed
          command: |
            set -xo pipefail
            # This makes sure you ran `make pre-commit` before you pushed.
            # We exclude the Swagger resources; CircleCI doesn't generate them correctly.
            # When this fails, it will, create a patch file you can apply locally to fix it.
            # To troubleshoot builds: https://argoproj.github.io/argo-cd/developer-guide/ci/
            git diff --exit-code -- . ':!Gopkg.lock'  ':!assets/swagger.json' | tee codegen.patch
      - store_artifacts:
          path: codegen.patch
          destination: .
  test:
    working_directory: /home/circleci/.go_workspace/src/github.com/argoproj/argo-cd
    machine:
      image: circleci/classic:201808-01
    steps:
      - restore_go_cache
      - install_golang
      - checkout
      - restore_cache:
          key: test-dl-v1
      - run: sudo ./hack/install.sh kubectl-linux kubectx-linux dep-linux ksonnet-linux helm-linux kustomize-linux
      - save_cache:
          key: test-dl-v1
          paths: [/tmp/dl]
      - configure_git
      - run: go get github.com/jstemmer/go-junit-report
      - restore_vendor
      - run: dep ensure
      - run: make test
      - save_vendor
      - save_go_cache
      - run:
          name: Uploading code coverage
          command: bash <(curl -s https://codecov.io/bash) -f coverage.out
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: test-results
          destination: .
  e2e:
    working_directory: /home/circleci/.go_workspace/src/github.com/argoproj/argo-cd
    machine:
      image: circleci/classic:201808-01
    environment:
      ARGOCD_FAKE_IN_CLUSTER: "true"
      ARGOCD_SSH_DATA_PATH: "/tmp/argo-e2e/app/config/ssh"
      ARGOCD_TLS_DATA_PATH: "/tmp/argo-e2e/app/config/tls"
    steps:
      - run:
          name: Install and start K3S v0.5.0
          command: |
            curl -sfL https://get.k3s.io | sh -
            sudo chmod -R a+rw /etc/rancher/k3s
            kubectl version
          background: true
          environment:
            INSTALL_K3S_EXEC: --docker
            INSTALL_K3S_VERSION: v0.5.0
      - restore_go_cache
      - install_golang
      - checkout
      - restore_cache:
          keys: [e2e-dl-v1]
      - run: sudo ./hack/install.sh kubectx-linux dep-linux ksonnet-linux helm-linux kustomize-linux
      - run: go get github.com/jstemmer/go-junit-report
      - save_cache:
          key: e2e-dl-v10
          paths: [/tmp/dl]
      - restore_vendor
      - run: dep ensure
      - configure_git
      - run: make cli
      - run:
          name: Create namespace
          command: |
            set -x
            kubectl create ns argocd-e2e
            kubens argocd-e2e
            # install the certificates (not 100% sure we need this)
            sudo cp /var/lib/rancher/k3s/server/tls/token-ca.crt /usr/local/share/ca-certificates/k3s.crt
            sudo update-ca-certificates
            # create the kubecfg, again - not sure we need this
            cat /etc/rancher/k3s/k3s.yaml | sed "s/localhost/`hostname`/" | tee ~/.kube/config
            echo "127.0.0.1 `hostname`" | sudo tee -a /etc/hosts
      - run:
          name: Apply manifests
          command: kustomize build test/manifests/base | kubectl apply -f -
      - run:
          name: Start Redis
          command: docker run --rm --name argocd-redis -i -p 6379:6379 redis:5.0.3-alpine --save "" --appendonly no
          background: true
      - run:
          name: Start repo server
          command: go run ./cmd/argocd-repo-server/main.go --loglevel debug --redis localhost:6379
          background: true
      - run:
          name: Start API server
          command: go run ./cmd/argocd-server/main.go --loglevel debug --redis localhost:6379 --insecure --dex-server http://localhost:5556 --repo-server localhost:8081 --staticassets ../argo-cd-ui/dist/app
          background: true
      - run:
          name: Start Test Git
          command: |
            test/fixture/testrepos/start-git.sh
          background: true
      - run: until curl -v http://localhost:8080/healthz; do sleep 10; done
      - run:
          name: Start controller
          command: go run ./cmd/argocd-application-controller/main.go --loglevel debug --redis localhost:6379 --repo-server localhost:8081 --kubeconfig ~/.kube/config
          background: true
      - run:
          command: PATH=dist:$PATH make test-e2e
          environment:
            ARGOCD_OPTS: "--server localhost:8080 --plaintext"
            ARGOCD_E2E_EXPECT_TIMEOUT: "30"
            ARGOCD_E2E_K3S: "true"
      - save_vendor
      - save_go_cache
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: test-results
          destination: .
  ui:
    docker:
      - image: node:11.15.0
    working_directory: ~/argo-cd/ui
    steps:
      - checkout:
          path: ~/argo-cd/
      - restore_cache:
          keys:
            - yarn-packages-v4-{{ checksum "yarn.lock" }}
      - run: yarn install --frozen-lockfile --ignore-optional --non-interactive
      - save_cache:
          key: yarn-packages-v4-{{ checksum "yarn.lock" }}
          paths: [~/.cache/yarn, node_modules]
      - run: yarn test
      - run: ./node_modules/.bin/codecov -p ..
      - run: NODE_ENV='production' yarn build
      - run: yarn lint
workflows:
  version: 2
  workflow:
    jobs:
      - test
      - codegen
      - ui:
          requires:
            - codegen
      - e2e