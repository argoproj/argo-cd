version: 2.1
commands:
  before:
    steps:
      - checkout
      - restore_cache:
          keys:
            - dep-ensure-v2-{{ checksum "Gopkg.lock" }}
      - run:
          name: Run dep ensure
          command: '[ -f ./vendor/$(sha256sum Gopkg.lock | cut -d " " -f 1) ] || (dep ensure -v && touch ./vendor/$(sha256sum Gopkg.lock | cut -d " " -f 1) )'
      - save_cache:
          key: dep-ensure-v2-{{ checksum "Gopkg.lock" }}
          paths:
            - vendor

jobs:
  draft:
    working_directory: /home/circleci/.go_workspace/src/github.com/argoproj/argo-cd
    machine:
      image: circleci/classic:201808-01
    environment:
      HOME_PATH: /go/src/github.com/argoproj/argo-cd
      BUILDER_IMG: argoproj/argo-cd-ci-builder:v1.0.0
        
    steps:
      - run:
          name: Pull Image
          command: docker pull $BUILDER_IMG
          background: true
      - checkout
      - restore_cache:
          keys:
            - dep-ensure-v2-{{ checksum "Gopkg.lock" }}
      - run:
          name: Ensure Image Downloaded
          command: until docker inspect $BUILDER_IMG; do sleep 1; done
      - run:
          name: Dep Ensure
          command: |
            docker run --rm -it -v $(pwd):$HOME_PATH -w $HOME_PATH $BUILDER_IMG bash -c "dep ensure"
      - save_cache:
          key: dep-ensure-v2-{{ checksum "Gopkg.lock" }}
          paths:
            - vendor
      - run:
          name: Install and Start K3S
          command: |
            curl -sfL https://get.k3s.io | sh -
            sudo chmod -R a+rw /etc/rancher/k3s
            kubectl version
          background: true
          environment:
            INSTALL_K3S_EXEC: --docker
            INSTALL_K3S_VERSION: v0.6.0
      - run:
          name: Build image
          command: |
            docker pull argoproj/argocd:latest
            docker tag argoproj/argocd:latest argocd:latest
        #   command: |
        #     docker run --rm -it -v /var/run/docker.sock:/var/run/docker.sock -v $(pwd):$HOME_PATH -w $HOME_PATH $BUILDER_IMG bash -c "make image DEV_IMAGE=true"
      - run:
          name: Install Argo CD
          command: |
            docker run -e KUBECONFIG=/k3s/k3s.yaml -w $HOME_PATH -v $(pwd):$HOME_PATH -v /etc/rancher/k3s:/k3s --rm -it $BUILDER_IMG bash -c "\
              until ls /k3s/k3s.yaml; do sleep 3; done && \
              kubectl config set-cluster default --server=https://$(hostname):6443 && kubectl config set-context --current --namespace=argocd-e2e && \
              until kubectl get pods; do sleep 3; done && kubectl create ns argocd-e2e || true && \
              kustomize build test/manifests/ci | kubectl apply -f -"
      - run:
          name: Wait for API server
          command: |
            set -x
            until curl -v -k https://localhost:30585/healthz; do kubectl get pods && sleep 3; done
            mkdir -p ./dist
            curl -k -o /tmp/argocd https://localhost:30585/download/argocd-linux-amd64
            chmod +x /tmp/argocd
            mv /tmp/argocd ./argocd
      - run:
          name: Run E2E Tests
          command: |
            docker run -e ARGOCD_E2E_EXPECT_TIMEOUT=30 -e ARGOCD_E2E_K3S="true" -e ARGOCD_SERVER="$(hostname):30585" -e KUBECONFIG=/k3s/k3s.yaml -w $HOME_PATH -v $(pwd):$HOME_PATH -v /etc/rancher/k3s:/k3s --rm -it $BUILDER_IMG bash -c "\
              go test -v -timeout 10m ./test/e2e"
  # Run tests
  test:
    working_directory: /go/src/github.com/argoproj/argo-cd
    docker:
      - image: argoproj/argo-cd-ci-builder:v1.0.0
    environment:
      GOPATH: /go
    steps:
      - attach_workspace:
          at: /go/src/github.com/argoproj/argo-cd
      - run:
          name: Run unit tests
          command: |
            make test
      - run:
          name: Uploading code coverage
          command: bash <(curl -s https://codecov.io/bash) -f coverage.out
          # This takes 2m, lets background it.
          background: true
      - run:
          name: Generate code
          command: make codegen
      - run:
          name: Lint code
          # use GOGC to limit memory usage in exchange for CPU usage, https://github.com/golangci/golangci-lint#memory-usage-of-golangci-lint
          # we have 8GB RAM, 2CPUs https://circleci.com/docs/2.0/executor-types/#using-machine
          command: LINT_GOGC=50 LINT_CONCURRENCY=2 LINT_DEADLINE=2m0s make lint
      - run:
          name: Check nothing has changed
          command: |
            set -xo pipefail
            # This makes sure you ran `make pre-commit` before you pushed.
            # We exclude the Swagger resources; CircleCI doesn't generate them correctly.
            # When this fails, it will, create a patch file you can apply locally to fix it.
            # To troubleshoot builds: https://argoproj.github.io/argo-cd/developer-guide/ci/
            git diff --exit-code -- . ':!Gopkg.lock'  ':!assets/swagger.json' | tee codegen.patch
      - store_artifacts:
          path: codegen.patch
          when: always

  e2e:
    working_directory: /home/circleci/.go_workspace/src/github.com/argoproj/argo-cd
    machine:
      image: circleci/classic:201808-01
    steps:
      - before
      - run:
          name: Make Image
          command: |
            docker run -w /go/src/github.com/argoproj/argo-cd -v $(pwd):/go/src/github.com/argoproj/argo-cd -v /var/run/docker.sock:/var/run/docker.sock --rm -it argoproj/argo-cd-ci-builder:v1.0.0 bash -c "make image DEV_IMAGE=true"
            mkdir -p /tmp/images
            docker save argocd:latest > /tmp/images/argocd.tar
      - run:
          name: Start K3S
          command: docker run --name k3s -p 8080:30585 -p 6443:6443 --privileged -v /tmp/images:/var/lib/rancher/k3s/agent/images -v /tmp:/etc/rancher/k3s --rm -it rancher/k3s:v0.6.1 server
          background: true
      - run:
          name: Install Argo CD
          command: |
            docker run -e KUBECONFIG=/tmp/k3s.yaml -w /go/src/github.com/argoproj/argo-cd -v $(pwd):/go/src/github.com/argoproj/argo-cd -v /tmp:/tmp --rm -it argoproj/argo-cd-ci-builder:v1.0.0 bash -c "\
              until ls /tmp/k3s.yaml; do sleep 3; done && \
              kubectl config set-cluster default --server=https://$(hostname):6443 && kubectl config set-context --current --namespace=argocd-e2e && \
              until kubectl get pods; do sleep 3; done && kubectl create ns argocd-e2e || true && \
              kustomize build test/manifests/ci | kubectl apply -f -"
      - run:
          name: Wait for API server
          command: |
            set -x
            until curl -v -k https://localhost:8080/healthz; do sleep 3; done
            mkdir -p ./dist
            curl -k -o /tmp/argocd https://localhost:8080/download/argocd-linux-amd64
            chmod +x /tmp/argocd
            mv /tmp/argocd ./argocd
      - run:
          name: Smoke test
          command: |
            set -x
            ./dist/argocd login localhost:8080 --insecure  --username admin --password password
            ./dist/argocd app create guestbook --dest-namespace default --dest-server https://kubernetes.default.svc --repo https://github.com/argoproj/argocd-example-apps.git --path guestbook
            ./dist/argocd app sync guestbook
            ./dist/argocd app delete guestbook
      - run:
          name: Run e2e tests
          command: |
            go test -v -timeout 10m ./test/e2e
          environment:
            ARGOCD_OPTS: "--server localhost:8080 --insecure"
            ARGOCD_E2E_EXPECT_TIMEOUT: "30"
            ARGOCD_E2E_K3S: "true"
      - store_test_results:
          path: /tmp/test-results
  ui:
    # note that we checkout the code in ~/argo-cd/, but then work in ~/argo-cd/ui
    working_directory: ~/argo-cd/ui
    docker:
      - image: node:11.15.0
    steps:
      - checkout:
          path: ~/argo-cd/
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - yarn-packages-v3-{{ checksum "yarn.lock" }}
      - run:
          name: Install
          command:
            yarn install --frozen-lockfile --ignore-optional --non-interactive
      - save_cache:
          name: Save Yarn Package Cache
          key: yarn-packages-v3-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn
            - node_modules
      - run:
          name: Test
          command: yarn test
      # This does not appear to work, and I don't want to spend time on it.
      - store_test_results:
          path: junit.xml
      - run:
          name: Lint
          command: yarn lint
workflows:
  version: 2
  workflow:
    jobs:
#      - build
     - draft
#      - ui:
#          # this isn't strictly true, we just put in here so that we 2/4 executors rather than 3/4
#          requires:
#            - build
