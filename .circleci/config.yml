version: 2
# TODO - split into multiple jobs using command
jobs:
  build:
    working_directory: /home/circleci/.go_workspace/src/github.com/argoproj/argo-cd
    machine:
      image: circleci/classic:201808-01
    environment:
      # TODO - remove thiss
      TEST_RESULTS: /tmp/test-results
    steps:
      # STAGE 1 - add all the tools to the machine that we need before we every checkout code.
      - run:
          name: Install JQ, and Golang
          command: sudo apt-get -y install jq golang-go
      - run:
          name: Install and start K3S 0.5.0
          command: |
            curl -sfL https://get.k3s.io | sh -
            sudo k3s server --docker
          background: true
          environment:
            INSTALL_K3S_SKIP_START: true
            INSTALL_K3S_VERSION: 0.5.0
      - restore_cache:
          keys:
            - go-v10-{{ .Branch }}
            - go-v9-{{ .Branch }}
      - restore_cache:
          keys:
            - dl-v2
      - restore_cache:
          key: vendor-{{ checksum "Gopkg.lock" }}-v2
      - run:
          name: Create downloads dir
          command: mkdir -p /tmp/dl
      - run:
          name: Install Kubectx 0.6.3
          command: |
            [ -e /tmp/dl/kubectx.zip ] || curl -sLf -C - -o /tmp/dl/kubectx.zip https://github.com/ahmetb/kubectx/archive/v0.6.3.zip
            sudo unzip /tmp/dl/kubectx.zip kubectx-0.6.3/kubectx
            sudo unzip /tmp/dl/kubectx.zip kubectx-0.6.3/kubens
            sudo mv kubectx-0.6.3/kubectx /usr/local/bin/
            sudo mv kubectx-0.6.3/kubens /usr/local/bin/
            sudo chmod +x /usr/local/bin/kubectx
            sudo chmod +x /usr/local/bin/kubens
            kubectx
      - run:
          name: Install Dep 0.5.3
          command: |
            [ -e /tmp/dl/dep ] || curl -sLf -C - -o /tmp/dl/dep https://github.com/golang/dep/releases/download/v0.5.3/dep-linux-amd64
            sudo cp /tmp/dl/dep /usr/local/go/bin/dep
            sudo chmod +x /usr/local/go/bin/dep
            dep version
      - run:
          name: Install Go Swagger 0.19.0
          command: |
            [ -e /tmp/dl/swagger ] || curl -sLf -C - -o /tmp/dl/swagger https://github.com/go-swagger/go-swagger/releases/download/v0.19.0/swagger_linux_amd64
            sudo cp /tmp/dl/swagger /usr/local/go/bin/swagger
            sudo chmod +x /usr/local/go/bin/swagger
            swagger version
      - run:
          name: Install Ksonnet 0.13.1
          command: |
            [ -e /tmp/dl/ks.tar.gz ] || curl -sLf -C - -o /tmp/dl/ks.tar.gz https://github.com/ksonnet/ksonnet/releases/download/v0.13.1/ks_0.13.1_linux_amd64.tar.gz
            tar -C /tmp -xf /tmp/dl/ks.tar.gz
            sudo cp /tmp/ks_0.13.1_linux_amd64/ks /usr/local/go/bin/ks
            sudo chmod +x /usr/local/go/bin/ks
            ks version
      - run:
          name: Install Helm 2.13.1
          command: |
            [ -e /tmp/dl/helm.tar.gz ] || curl -sLf -C - -o /tmp/dl/helm.tar.gz https://storage.googleapis.com/kubernetes-helm/helm-v2.13.1-linux-amd64.tar.gz
            tar -C /tmp/ -xf /tmp/dl/helm.tar.gz
            sudo cp /tmp/linux-amd64/helm /usr/local/go/bin/helm
            helm version --client
            helm init --client-only
      - run:
          name: Install Kustomize 1.0.11
          command: |
            [ -e /tmp/dl/kustomize1 ] || curl -sLf -C - -o /tmp/dl/kustomize1 https://github.com/kubernetes-sigs/kustomize/releases/download/v1.0.11/kustomize_1.0.11_linux_amd64
            sudo cp /tmp/dl/kustomize1 /usr/local/go/bin/
            sudo chmod +x /usr/local/go/bin/kustomize1
            kustomize1 version
      - run:
          name: Install Kustomize 2.0.3
          command: |
            [ -e /tmp/dl/kustomize ] || curl -sLf -C - -o /tmp/dl/kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v2.0.3/kustomize_2.0.3_linux_amd64
            sudo cp /tmp/dl/kustomize /usr/local/go/bin/
            sudo chmod +x /usr/local/go/bin/kustomize
            kustomize version
      - run:
          name: Install Protobuf compiler 3.7.1
          command: |
            [ -e /tmp/dl/protoc.zip ] || curl -sLf -C - -o /tmp/dl/protoc.zip https://github.com/protocolbuffers/protobuf/releases/download/v3.7.1/protoc-3.7.1-linux-x86_64.zip
            sudo unzip /tmp/dl/protoc.zip bin/protoc -d /usr/local/
            sudo chmod +x /usr/local/bin/protoc
            sudo unzip /tmp/dl/protoc.zip include/* -d /usr/local/
            protoc --version
      - save_cache:
          key: dl-v2-{{ checksum "Gopkg.lock" }}
          paths:
            - /tmp/dl
      - run:
          name: Install Go deps
          command: |
            go get golang.org/x/tools/cmd/goimports
            go get github.com/gobuffalo/packr/packr
            go get github.com/golang/protobuf/protoc-gen-go
            go get github.com/gogo/protobuf/gogoproto
            go get github.com/grpc-ecosystem/grpc-gateway/protoc-gen-grpc-gateway
            go get github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger
            go get github.com/golangci/golangci-lint/cmd/golangci-lint
            go get github.com/jstemmer/go-junit-report
            go get github.com/mattn/goreman
      - run:
          name: Install Golang 1.11.4
          command: |
            go get golang.org/dl/go1.11.4
            [ -e /home/circleci/sdk/go1.11.4 ] || go1.11.4 download
            echo export PATH="`go1.11.4 env GOROOT`/bin:\$PATH" | tee -a $BASH_ENV
      # STAGE 2 - actually checkout and build the code.
      - checkout
      - run:
          name: Print system info
          command: |
            set -x
            env | sort
            protoc --version
            jq --version
            go version
            go env GOCACHE
            docker version
            k3s --version
      - run:
          name: Run dep ensure
          command: dep ensure -v
      - save_cache:
          key: vendor-{{ checksum "Gopkg.lock" }}-v2
          paths:
            - vendor
      #- run:
      #    name: Generate code
      #    command: make codegen
      - run:
          name: Compile production code
          # builds should be around 30s, if not - maybe the cache has moved?
          command: make build
      #- run:
      #    name: Make CLI
      #    command: |
      #      make cli
      #      echo export PATH="\$PATH:dist" | tee -a $BASH_ENV
      # TODO - maybe re-enable?
      #- run:
      #    name: Lint code
      #    command: |
      #      make lint
      #      git diff
      # TODO
      #- run:
      #    name: Run unit tests
      #    command: |
      #      mkdir -p /tmp/test-results
      #      trap "go-junit-report </tmp/test-results/go-test.out > /tmp/test-results/go-test-report.xml" EXIT
      #      make test | tee /tmp/test-results/go-test.out

      - run:
          name: Start Argo CD
          command: |
            set -x
            k3s kubectl version
            make start-e2e
          background: true
      - run:
          name: Run e2e tests
          command: |
            set -x
            argocd app list
            mkdir -p /tmp/test-results
            trap "go-junit-report </tmp/test-results/go-e2e.out > /tmp/test-results/go-e2e-report.xml" EXIT
            make test-e2e | tee /tmp/test-results/go-e2e.out
      - save_cache:
          key: go-v10-{{ .Branch }}
          paths:
            - /home/circleci/.go_workspace
            - /home/circleci/.cache/go-build
            - /home/circleci/sdk/go1.11.4
          when: always
      # TODO - maybe re-add this step?
      # This produces different output. See https://circleci.com/gh/argoproj/argo-cd/65
      #- run:
      #    name: Check nothing has changed
      #    command: git diff --exit-code
      # FINAL STAGE - upload results
      - run:
          name: Uploading code coverage
          command: bash <(curl -s https://codecov.io/bash) -f coverage.out
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /var/lib/rancher/k3s/agent/containerd/containerd.log
          when: always
workflows:
  version: 2
  workflow:
    jobs:
      - build
