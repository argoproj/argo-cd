version: 2.1
commands:
  configure_git:
    steps:
      - run:
          name: Configure Git
          command: |
            set -x
            # must be configured for tests to run
            git config --global user.email you@example.com
            git config --global user.name "Your Name"
            echo "export PATH=/home/circleci/.go_workspace/src/github.com/argoproj/argo-cd/hack:\$PATH" | tee -a $BASH_ENV
            echo "export GIT_ASKPASS=git-ask-pass.sh" | tee -a $BASH_ENV
  install_golang:
    steps:
      - run:
          name: Install Golang v1.12.6
          command: |
            go get golang.org/dl/go1.12.6
            [ -e /home/circleci/sdk/go1.12.6 ] || go1.12.6 download
            echo "export GOPATH=/home/circleci/.go_workspace" | tee -a $BASH_ENV
            echo "export PATH=/home/circleci/sdk/go1.12.6/bin:\$PATH" | tee -a $BASH_ENV
  check_for_changes:
    steps:
      - run:
          name: Check nothing has changed
          command: |
            set -xo pipefail
            # This makes sure you ran `make pre-commit` before you pushed.
            # We exclude the Swagger resources; CircleCI doesn't generate them correctly.
            # When this fails, it will, create a patch file you can apply locally to fix it.
            # To troubleshoot builds: https://argoproj.github.io/argo-cd/developer-guide/ci/
            git diff --exit-code -- . ':!Gopkg.lock'  ':!assets/swagger.json' | tee codegen.patch
jobs:
  codegen:
    docker:
      - image: circleci/golang:1.12
    working_directory: /go/src/github.com/argoproj/argo-cd
    steps:
      - checkout
      - restore_cache:
          keys: [codegen-v2]
      - run: sudo ./hack/install.sh protoc-linux swagger-linux jq-linux helm-linux kustomize-linux
      - run: ./hack/install.sh codegen-tools
      - run: dep ensure
      - save_cache:
          key: codegen-v2
          paths: [vendor, /tmp/dl, /go/pkg]
      - run: helm init --client-only
      - run: make codegen-local
      - check_for_changes
  lint:
    working_directory: /home/circleci/.go_workspace/src/github.com/argoproj/argo-cd
    machine:
      image: circleci/classic:201808-01
    steps:
      - install_golang
      - checkout
      - restore_cache:
          keys: [lint-v7, lint-v6]
      - run: sudo ./hack/install.sh dep-linux
      - run: dep ensure
      - run: make pre-lint
      - save_cache:
          key: lint-v7
          paths: [vendor, /tmp/dl, /home/circleci/.go_workspace/pkg]
      - run: make lint
      - check_for_changes
  test:
    working_directory: /home/circleci/.go_workspace/src/github.com/argoproj/argo-cd
    machine:
      image: circleci/classic:201808-01
    resource_class: large
    steps:
      - install_golang
      - checkout
      - restore_cache:
          keys: [test-v10]
      - run: sudo ./hack/install.sh kubectl-linux kubectx-linux dep-linux ksonnet-linux helm-linux kustomize-linux
      - run: dep ensure
      - run: go get github.com/jstemmer/go-junit-report
      - save_cache:
          key: test-v10
          paths: [vendor, /tmp/dl, /home/circleci/.go_workspace/pkg]
      - configure_git
      - run: make test
      - run:
          name: Uploading code coverage
          command: bash <(curl -s https://codecov.io/bash) -f coverage.out
      - store_test_results:
          path: test-results
  e2e:
    working_directory: /home/circleci/.go_workspace/src/github.com/argoproj/argo-cd
    machine:
      image: circleci/classic:201808-01
      steps:
        - run:
            name: Install and start K3S v0.5.0
            command: |
              curl -sfL https://get.k3s.io | sh -
              sudo chmod -R a+rw /etc/rancher/k3s
              kubectl version
            background: true
            environment:
              INSTALL_K3S_EXEC: "--docker"
              INSTALL_K3S_VERSION: "v0.5.0"
        - restore_cache:
            keys: [e2e-v1]
        - checkout
        - run: sudo ./hack/install.sh kubectl-linux kubectx-linux dep-linux ksonnet-linux helm-linux kustomize-linux
        - run: dep ensure
        - run: go get github.com/jstemmer/go-junit-report
        - run: go get github.com/mattn/goreman
        - save_cache:
            key: e2e-v1
            paths: [vendor, /tmp/dl, /home/circleci/.go_workspace/pkg]
        - run: configure_git
        - run:
            name: Configure kubectl
            command: |
              set -x
              cat /etc/rancher/k3s/k3s.yaml | sed "s/localhost/`hostname`/" | tee ~/.kube/config
              echo "127.0.0.1 `hostname`" | sudo tee -a /etc/hosts
              # install the certificates (not 100% sure we need this)
              sudo cp /var/lib/rancher/k3s/server/tls/token-ca.crt /usr/local/share/ca-certificates/k3s.crt
              sudo update-ca-certificates
        - run: make start-e2e
        - run: until curl -v http://localhost:8080/healthz; do sleep 5; done
        - run:
            command: make test-e2e
            environment:
              ARGOCD_OPTS: "--server localhost:8080 --plaintext"
              ARGOCD_E2E_EXPECT_TIMEOUT: "30"
              ARGOCD_E2E_K3S: "true"
        - store_test_results:
            path: test-results
  ui:
    # note that we checkout the code in ~/argo-cd/, but then work in ~/argo-cd/ui
    working_directory: ~/argo-cd/ui
    docker:
      - image: node:11.15.0
    steps:
      - checkout:
          path: ~/argo-cd/
      - restore_cache:
          keys:
            - yarn-packages-v4-{{ checksum "yarn.lock" }}
      - run: yarn install --frozen-lockfile --ignore-optional --non-interactive
      - save_cache:
          key: yarn-packages-v4-{{ checksum "yarn.lock" }}
          paths: [~/.cache/yarn, node_modules]
      - run: yarn test
      - run: yarn build
      - run: yarn lint
workflows:
  version: 2
  workflow:
    jobs:
      - test
      - codegen
      - lint
      - e2e
      # TODO
      #- ui
