version: 2.1
commands:
  before:
    steps:
      - restore_go_cache
      - install_golang
      - install_tools
      - clean_checkout
      - configure_git
      - install_go_deps
      - dep_ensure
  configure_git:
    steps:
      - run:
          name: Configure Git
          command: |
            set -x
            # must be configured for tests to run
            git config --global user.email you@example.com
            git config --global user.name "Your Name"
            echo "export PATH=/home/circleci/.go_workspace/src/github.com/argoproj/argo-cd/hack:\$PATH" | tee -a $BASH_ENV
            echo "export GIT_ASKPASS=git-ask-pass.sh" | tee -a $BASH_ENV
  clean_checkout:
    steps:
      - run:
          name: Remove checked out code
          command: rm -Rf /home/circleci/.go_workspace/src/github.com/argoproj/argo-cd
      - checkout
  dep_ensure:
    steps:
      - restore_cache:
          keys:
            - vendor-v4-{{ checksum "Gopkg.lock" }}
      - run:
          name: Run dep ensure
          command: dep ensure -v
      - save_cache:
          key: vendor-v4-{{ checksum "Gopkg.lock" }}
          paths:
            - vendor
  install_golang:
    steps:
      - run:
          name: Install Golang v1.12.6
          command: |
            go get golang.org/dl/go1.12.6
            [ -e /home/circleci/sdk/go1.12.6 ] || go1.12.6 download
            echo "export GOPATH=/home/circleci/.go_workspace" | tee -a $BASH_ENV
            echo "export PATH=/home/circleci/sdk/go1.12.6/bin:\$PATH" | tee -a $BASH_ENV
      - run:
          name: Golang diagnostics
          command: |
            env
            which go
            go version
            go env
  install_go_deps:
    steps:
      - run:
          name: Install Go deps
          command: |
            set -x
            go get github.com/golangci/golangci-lint/cmd/golangci-lint
            go get github.com/jstemmer/go-junit-report
            go get github.com/mattn/goreman
            go get golang.org/x/tools/cmd/goimports
  install_tools:
    steps:
      - run:
          name: Create downloads dir
          command: mkdir -p /tmp/dl
      - restore_cache:
          keys:
            - dl-v6
      - run:
          name: Install Kubectx v0.6.3
          command: |
            set -x
            [ -e /tmp/dl/kubectx.zip ] || curl -sLf -C - -o /tmp/dl/kubectx.zip https://github.com/ahmetb/kubectx/archive/v0.6.3.zip
            sudo unzip /tmp/dl/kubectx.zip kubectx-0.6.3/kubectx
            sudo unzip /tmp/dl/kubectx.zip kubectx-0.6.3/kubens
            sudo mv kubectx-0.6.3/kubectx /usr/local/bin/
            sudo mv kubectx-0.6.3/kubens /usr/local/bin/
            sudo chmod +x /usr/local/bin/kubectx
            sudo chmod +x /usr/local/bin/kubens
      - run:
          name: Install Dep v0.5.3
          command: |
            set -x
            [ -e /tmp/dl/dep ] || curl -sLf -C - -o /tmp/dl/dep https://github.com/golang/dep/releases/download/v0.5.3/dep-linux-amd64
            sudo cp /tmp/dl/dep /usr/local/go/bin/dep
            sudo chmod +x /usr/local/go/bin/dep
            dep version
      - run:
          name: Install Ksonnet v0.13.1
          command: |
            set -x
            [ -e /tmp/dl/ks.tar.gz ] || curl -sLf -C - -o /tmp/dl/ks.tar.gz https://github.com/ksonnet/ksonnet/releases/download/v0.13.1/ks_0.13.1_linux_amd64.tar.gz
            tar -C /tmp -xf /tmp/dl/ks.tar.gz
            sudo cp /tmp/ks_0.13.1_linux_amd64/ks /usr/local/go/bin/ks
            sudo chmod +x /usr/local/go/bin/ks
            ks version
      - run:
          name: Install Helm v2.13.1
          command: |
            set -x
            [ -e /tmp/dl/helm.tar.gz ] || curl -sLf -C - -o /tmp/dl/helm.tar.gz https://storage.googleapis.com/kubernetes-helm/helm-v2.13.1-linux-amd64.tar.gz
            tar -C /tmp/ -xf /tmp/dl/helm.tar.gz
            sudo cp /tmp/linux-amd64/helm /usr/local/go/bin/helm
            helm version --client
            helm init --client-only
      - run:
          name: Install Kustomize v3.1.0
          command: |
            set -x
            export VER=3.1.0
            [ -e /tmp/dl/kustomize_${VER} ] || curl -sLf -C - -o /tmp/dl/kustomize_${VER} https://github.com/kubernetes-sigs/kustomize/releases/download/v${VER}/kustomize_${VER}_linux_amd64
            sudo cp /tmp/dl/kustomize_${VER} /usr/local/go/bin/kustomize
            sudo chmod +x /usr/local/go/bin/kustomize
            kustomize version
      - save_cache:
          key: dl-v6
          paths:
            - /tmp/dl
  save_go_cache:
    steps:
      - save_cache:
          key: go-v17-{{ .Branch }}
          paths:
            - /home/circleci/.go_workspace
            - /home/circleci/.cache/go-build
            - /home/circleci/sdk/go1.12.6
  restore_go_cache:
    steps:
      - restore_cache:
          keys:
            - go-v17-{{ .Branch }}
            - go-v17-master
            - go-v16-{{ .Branch }}
            - go-v16-master
jobs:
  build:
    working_directory: /home/circleci/.go_workspace/src/github.com/argoproj/argo-cd
    machine:
      image: circleci/classic:201808-01
    steps:
      - before
      - run:
          name: Run unit tests
          command: |
            set -x
            mkdir -p /tmp/test-results
            trap "go-junit-report </tmp/test-results/go-test.out > /tmp/test-results/go-test-report.xml" EXIT
            make test | tee /tmp/test-results/go-test.out
      - save_go_cache
      - run:
          name: Uploading code coverage
          command: bash <(curl -s https://codecov.io/bash) -f coverage.out
          # This takes 2m, lets background it.
          background: true
      - store_test_results:
          path: /tmp/test-results
      - run:
          name: Generate code
          command: make codegen
      - run:
          name: Lint code
          # use GOGC to limit memory usage in exchange for CPU usage, https://github.com/golangci/golangci-lint#memory-usage-of-golangci-lint
          # we have 8GB RAM, 2CPUs https://circleci.com/docs/2.0/executor-types/#using-machine
          command: LINT_GOGC=20 LINT_CONCURRENCY=1 LINT_DEADLINE=3m0s make lint
      - run:
          name: Check nothing has changed
          command: |
            set -xo pipefail
            # This makes sure you ran `make pre-commit` before you pushed.
            # We exclude the Swagger resources; CircleCI doesn't generate them correctly.
            # When this fails, it will, create a patch file you can apply locally to fix it.
            # To troubleshoot builds: https://argoproj.github.io/argo-cd/developer-guide/ci/
            git diff --exit-code -- . ':!Gopkg.lock'  ':!assets/swagger.json' | tee codegen.patch
      - store_artifacts:
          path: codegen.patch
          when: always
  e2e:
    working_directory: /home/circleci/.go_workspace/src/github.com/argoproj/argo-cd
    machine:
      image: circleci/classic:201808-01
    steps:
      - run:
          name: Install and start K3S v0.5.0
          command: |
            curl -sfL https://get.k3s.io | sh -
            sudo chmod -R a+rw /etc/rancher/k3s
            kubectl version
          background: true
          environment:
            INSTALL_K3S_EXEC: --docker
            INSTALL_K3S_VERSION: v0.5.0
      - before
      - run:
          # do this before we build everything else in the background, as they tend to explode
          name: Make CLI
          command: |
            set -x
            make cli
            # must be added to path for tests
            echo export PATH="`pwd`/dist:\$PATH" | tee -a $BASH_ENV
      - run:
          name: Create namespace
          command: |
            set -x
            kubectl create ns argocd-e2e
            kubens argocd-e2e
            # install the certificates (not 100% sure we need this)
            sudo cp /var/lib/rancher/k3s/server/tls/token-ca.crt /usr/local/share/ca-certificates/k3s.crt
            sudo update-ca-certificates
            # create the kubecfg, again - not sure we need this
            cat /etc/rancher/k3s/k3s.yaml | sed "s/localhost/`hostname`/" | tee ~/.kube/config
            echo "127.0.0.1 `hostname`" | sudo tee -a /etc/hosts
      - run:
          name: Apply manifests
          command: kustomize build test/manifests/base | kubectl apply -f -
      - run:
          name: Start Redis
          command: docker run --rm --name argocd-redis -i -p 6379:6379 redis:5.0.3-alpine --save "" --appendonly no
          background: true
      - run:
          name: Start repo server
          command: go run ./cmd/argocd-repo-server/main.go --loglevel debug --redis localhost:6379
          background: true
          environment:
            # pft. if you do not quote "true", CircleCI turns it into "1", stoopid
            ARGOCD_FAKE_IN_CLUSTER: "true"
            ARGOCD_SSH_DATA_PATH: "/tmp/argo-e2e/app/config/ssh"
            ARGOCD_TLS_DATA_PATH: "/tmp/argo-e2e/app/config/tls"
      - run:
          name: Start API server
          command: go run ./cmd/argocd-server/main.go --loglevel debug --redis localhost:6379 --insecure --dex-server http://localhost:5556 --repo-server localhost:8081 --staticassets ../argo-cd-ui/dist/app
          background: true
          environment:
            ARGOCD_FAKE_IN_CLUSTER: "true"
            ARGOCD_SSH_DATA_PATH: "/tmp/argo-e2e/app/config/ssh"
            ARGOCD_TLS_DATA_PATH: "/tmp/argo-e2e/app/config/tls"
      - run:
          name: Start Test Git
          command: |
            test/fixture/testrepos/start-git.sh
          background: true
      - run:
          name: Wait for API server
          command: |
            set -x
            until curl -v http://localhost:8080/healthz; do sleep 3; done
      - run:
          name: Start controller
          command: go run ./cmd/argocd-application-controller/main.go --loglevel debug --redis localhost:6379 --repo-server localhost:8081 --kubeconfig ~/.kube/config
          background: true
          environment:
            ARGOCD_FAKE_IN_CLUSTER: "true"
      - run:
          name: Smoke test
          command: |
            set -x
            argocd login localhost:8080 --plaintext  --username admin --password password
            argocd app create guestbook --dest-namespace default --dest-server https://kubernetes.default.svc --repo https://github.com/argoproj/argocd-example-apps.git --path guestbook
            argocd app sync guestbook
            argocd app delete guestbook
      - run:
          name: Run e2e tests
          command: |
            set -x
            mkdir -p /tmp/test-results
            trap "go-junit-report </tmp/test-results/go-e2e.out > /tmp/test-results/go-e2e-report.xml" EXIT
            make test-e2e | tee /tmp/test-results/go-e2e.out
          environment:
            ARGOCD_OPTS: "--server localhost:8080 --plaintext"
            ARGOCD_E2E_EXPECT_TIMEOUT: "30"
            ARGOCD_E2E_K3S: "true"
      - store_test_results:
          path: /tmp/test-results
  ui:
    # note that we checkout the code in ~/argo-cd/, but then work in ~/argo-cd/ui
    working_directory: ~/argo-cd/ui
    docker:
      - image: node:11.15.0
    steps:
      - checkout:
          path: ~/argo-cd/
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - yarn-packages-v3-{{ checksum "yarn.lock" }}
      - run:
          name: Install
          command:
            yarn install --frozen-lockfile --ignore-optional --non-interactive
      - save_cache:
          name: Save Yarn Package Cache
          key: yarn-packages-v3-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn
            - node_modules
      - run:
          name: Test
          command: yarn test
      # This does not appear to work, and I don't want to spend time on it.
      - store_test_results:
          path: junit.xml
      - run:
          name: Build
          command: yarn build
      - run:
          name: Lint
          command: yarn lint
workflows:
  version: 2
  workflow:
    jobs:
      - build
      - e2e
      - ui:
          # this isn't strictly true, we just put in here so that we 2/4 executors rather than 3/4
          requires:
            - build
