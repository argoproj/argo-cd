// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/argoproj/argo-cd/v3/reposerver/apiclient"
	mock "github.com/stretchr/testify/mock"
	"google.golang.org/grpc/metadata"
)

// NewRepoServerService_GenerateManifestWithFilesClient creates a new instance of RepoServerService_GenerateManifestWithFilesClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepoServerService_GenerateManifestWithFilesClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *RepoServerService_GenerateManifestWithFilesClient {
	mock := &RepoServerService_GenerateManifestWithFilesClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// RepoServerService_GenerateManifestWithFilesClient is an autogenerated mock type for the RepoServerService_GenerateManifestWithFilesClient type
type RepoServerService_GenerateManifestWithFilesClient struct {
	mock.Mock
}

type RepoServerService_GenerateManifestWithFilesClient_Expecter struct {
	mock *mock.Mock
}

func (_m *RepoServerService_GenerateManifestWithFilesClient) EXPECT() *RepoServerService_GenerateManifestWithFilesClient_Expecter {
	return &RepoServerService_GenerateManifestWithFilesClient_Expecter{mock: &_m.Mock}
}

// CloseAndRecv provides a mock function for the type RepoServerService_GenerateManifestWithFilesClient
func (_mock *RepoServerService_GenerateManifestWithFilesClient) CloseAndRecv() (*apiclient.ManifestResponse, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for CloseAndRecv")
	}

	var r0 *apiclient.ManifestResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (*apiclient.ManifestResponse, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() *apiclient.ManifestResponse); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apiclient.ManifestResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// RepoServerService_GenerateManifestWithFilesClient_CloseAndRecv_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CloseAndRecv'
type RepoServerService_GenerateManifestWithFilesClient_CloseAndRecv_Call struct {
	*mock.Call
}

// CloseAndRecv is a helper method to define mock.On call
func (_e *RepoServerService_GenerateManifestWithFilesClient_Expecter) CloseAndRecv() *RepoServerService_GenerateManifestWithFilesClient_CloseAndRecv_Call {
	return &RepoServerService_GenerateManifestWithFilesClient_CloseAndRecv_Call{Call: _e.mock.On("CloseAndRecv")}
}

func (_c *RepoServerService_GenerateManifestWithFilesClient_CloseAndRecv_Call) Run(run func()) *RepoServerService_GenerateManifestWithFilesClient_CloseAndRecv_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RepoServerService_GenerateManifestWithFilesClient_CloseAndRecv_Call) Return(manifestResponse *apiclient.ManifestResponse, err error) *RepoServerService_GenerateManifestWithFilesClient_CloseAndRecv_Call {
	_c.Call.Return(manifestResponse, err)
	return _c
}

func (_c *RepoServerService_GenerateManifestWithFilesClient_CloseAndRecv_Call) RunAndReturn(run func() (*apiclient.ManifestResponse, error)) *RepoServerService_GenerateManifestWithFilesClient_CloseAndRecv_Call {
	_c.Call.Return(run)
	return _c
}

// CloseSend provides a mock function for the type RepoServerService_GenerateManifestWithFilesClient
func (_mock *RepoServerService_GenerateManifestWithFilesClient) CloseSend() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for CloseSend")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// RepoServerService_GenerateManifestWithFilesClient_CloseSend_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CloseSend'
type RepoServerService_GenerateManifestWithFilesClient_CloseSend_Call struct {
	*mock.Call
}

// CloseSend is a helper method to define mock.On call
func (_e *RepoServerService_GenerateManifestWithFilesClient_Expecter) CloseSend() *RepoServerService_GenerateManifestWithFilesClient_CloseSend_Call {
	return &RepoServerService_GenerateManifestWithFilesClient_CloseSend_Call{Call: _e.mock.On("CloseSend")}
}

func (_c *RepoServerService_GenerateManifestWithFilesClient_CloseSend_Call) Run(run func()) *RepoServerService_GenerateManifestWithFilesClient_CloseSend_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RepoServerService_GenerateManifestWithFilesClient_CloseSend_Call) Return(err error) *RepoServerService_GenerateManifestWithFilesClient_CloseSend_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *RepoServerService_GenerateManifestWithFilesClient_CloseSend_Call) RunAndReturn(run func() error) *RepoServerService_GenerateManifestWithFilesClient_CloseSend_Call {
	_c.Call.Return(run)
	return _c
}

// Context provides a mock function for the type RepoServerService_GenerateManifestWithFilesClient
func (_mock *RepoServerService_GenerateManifestWithFilesClient) Context() context.Context {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Context")
	}

	var r0 context.Context
	if returnFunc, ok := ret.Get(0).(func() context.Context); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}
	return r0
}

// RepoServerService_GenerateManifestWithFilesClient_Context_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Context'
type RepoServerService_GenerateManifestWithFilesClient_Context_Call struct {
	*mock.Call
}

// Context is a helper method to define mock.On call
func (_e *RepoServerService_GenerateManifestWithFilesClient_Expecter) Context() *RepoServerService_GenerateManifestWithFilesClient_Context_Call {
	return &RepoServerService_GenerateManifestWithFilesClient_Context_Call{Call: _e.mock.On("Context")}
}

func (_c *RepoServerService_GenerateManifestWithFilesClient_Context_Call) Run(run func()) *RepoServerService_GenerateManifestWithFilesClient_Context_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RepoServerService_GenerateManifestWithFilesClient_Context_Call) Return(context1 context.Context) *RepoServerService_GenerateManifestWithFilesClient_Context_Call {
	_c.Call.Return(context1)
	return _c
}

func (_c *RepoServerService_GenerateManifestWithFilesClient_Context_Call) RunAndReturn(run func() context.Context) *RepoServerService_GenerateManifestWithFilesClient_Context_Call {
	_c.Call.Return(run)
	return _c
}

// Header provides a mock function for the type RepoServerService_GenerateManifestWithFilesClient
func (_mock *RepoServerService_GenerateManifestWithFilesClient) Header() (metadata.MD, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Header")
	}

	var r0 metadata.MD
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (metadata.MD, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() metadata.MD); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(metadata.MD)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// RepoServerService_GenerateManifestWithFilesClient_Header_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Header'
type RepoServerService_GenerateManifestWithFilesClient_Header_Call struct {
	*mock.Call
}

// Header is a helper method to define mock.On call
func (_e *RepoServerService_GenerateManifestWithFilesClient_Expecter) Header() *RepoServerService_GenerateManifestWithFilesClient_Header_Call {
	return &RepoServerService_GenerateManifestWithFilesClient_Header_Call{Call: _e.mock.On("Header")}
}

func (_c *RepoServerService_GenerateManifestWithFilesClient_Header_Call) Run(run func()) *RepoServerService_GenerateManifestWithFilesClient_Header_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RepoServerService_GenerateManifestWithFilesClient_Header_Call) Return(mD metadata.MD, err error) *RepoServerService_GenerateManifestWithFilesClient_Header_Call {
	_c.Call.Return(mD, err)
	return _c
}

func (_c *RepoServerService_GenerateManifestWithFilesClient_Header_Call) RunAndReturn(run func() (metadata.MD, error)) *RepoServerService_GenerateManifestWithFilesClient_Header_Call {
	_c.Call.Return(run)
	return _c
}

// RecvMsg provides a mock function for the type RepoServerService_GenerateManifestWithFilesClient
func (_mock *RepoServerService_GenerateManifestWithFilesClient) RecvMsg(m any) error {
	ret := _mock.Called(m)

	if len(ret) == 0 {
		panic("no return value specified for RecvMsg")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(any) error); ok {
		r0 = returnFunc(m)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// RepoServerService_GenerateManifestWithFilesClient_RecvMsg_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecvMsg'
type RepoServerService_GenerateManifestWithFilesClient_RecvMsg_Call struct {
	*mock.Call
}

// RecvMsg is a helper method to define mock.On call
//   - m
func (_e *RepoServerService_GenerateManifestWithFilesClient_Expecter) RecvMsg(m interface{}) *RepoServerService_GenerateManifestWithFilesClient_RecvMsg_Call {
	return &RepoServerService_GenerateManifestWithFilesClient_RecvMsg_Call{Call: _e.mock.On("RecvMsg", m)}
}

func (_c *RepoServerService_GenerateManifestWithFilesClient_RecvMsg_Call) Run(run func(m any)) *RepoServerService_GenerateManifestWithFilesClient_RecvMsg_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(any))
	})
	return _c
}

func (_c *RepoServerService_GenerateManifestWithFilesClient_RecvMsg_Call) Return(err error) *RepoServerService_GenerateManifestWithFilesClient_RecvMsg_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *RepoServerService_GenerateManifestWithFilesClient_RecvMsg_Call) RunAndReturn(run func(m any) error) *RepoServerService_GenerateManifestWithFilesClient_RecvMsg_Call {
	_c.Call.Return(run)
	return _c
}

// Send provides a mock function for the type RepoServerService_GenerateManifestWithFilesClient
func (_mock *RepoServerService_GenerateManifestWithFilesClient) Send(manifestRequestWithFiles *apiclient.ManifestRequestWithFiles) error {
	ret := _mock.Called(manifestRequestWithFiles)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*apiclient.ManifestRequestWithFiles) error); ok {
		r0 = returnFunc(manifestRequestWithFiles)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// RepoServerService_GenerateManifestWithFilesClient_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type RepoServerService_GenerateManifestWithFilesClient_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - manifestRequestWithFiles
func (_e *RepoServerService_GenerateManifestWithFilesClient_Expecter) Send(manifestRequestWithFiles interface{}) *RepoServerService_GenerateManifestWithFilesClient_Send_Call {
	return &RepoServerService_GenerateManifestWithFilesClient_Send_Call{Call: _e.mock.On("Send", manifestRequestWithFiles)}
}

func (_c *RepoServerService_GenerateManifestWithFilesClient_Send_Call) Run(run func(manifestRequestWithFiles *apiclient.ManifestRequestWithFiles)) *RepoServerService_GenerateManifestWithFilesClient_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*apiclient.ManifestRequestWithFiles))
	})
	return _c
}

func (_c *RepoServerService_GenerateManifestWithFilesClient_Send_Call) Return(err error) *RepoServerService_GenerateManifestWithFilesClient_Send_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *RepoServerService_GenerateManifestWithFilesClient_Send_Call) RunAndReturn(run func(manifestRequestWithFiles *apiclient.ManifestRequestWithFiles) error) *RepoServerService_GenerateManifestWithFilesClient_Send_Call {
	_c.Call.Return(run)
	return _c
}

// SendMsg provides a mock function for the type RepoServerService_GenerateManifestWithFilesClient
func (_mock *RepoServerService_GenerateManifestWithFilesClient) SendMsg(m any) error {
	ret := _mock.Called(m)

	if len(ret) == 0 {
		panic("no return value specified for SendMsg")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(any) error); ok {
		r0 = returnFunc(m)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// RepoServerService_GenerateManifestWithFilesClient_SendMsg_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendMsg'
type RepoServerService_GenerateManifestWithFilesClient_SendMsg_Call struct {
	*mock.Call
}

// SendMsg is a helper method to define mock.On call
//   - m
func (_e *RepoServerService_GenerateManifestWithFilesClient_Expecter) SendMsg(m interface{}) *RepoServerService_GenerateManifestWithFilesClient_SendMsg_Call {
	return &RepoServerService_GenerateManifestWithFilesClient_SendMsg_Call{Call: _e.mock.On("SendMsg", m)}
}

func (_c *RepoServerService_GenerateManifestWithFilesClient_SendMsg_Call) Run(run func(m any)) *RepoServerService_GenerateManifestWithFilesClient_SendMsg_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(any))
	})
	return _c
}

func (_c *RepoServerService_GenerateManifestWithFilesClient_SendMsg_Call) Return(err error) *RepoServerService_GenerateManifestWithFilesClient_SendMsg_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *RepoServerService_GenerateManifestWithFilesClient_SendMsg_Call) RunAndReturn(run func(m any) error) *RepoServerService_GenerateManifestWithFilesClient_SendMsg_Call {
	_c.Call.Return(run)
	return _c
}

// Trailer provides a mock function for the type RepoServerService_GenerateManifestWithFilesClient
func (_mock *RepoServerService_GenerateManifestWithFilesClient) Trailer() metadata.MD {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Trailer")
	}

	var r0 metadata.MD
	if returnFunc, ok := ret.Get(0).(func() metadata.MD); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(metadata.MD)
		}
	}
	return r0
}

// RepoServerService_GenerateManifestWithFilesClient_Trailer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Trailer'
type RepoServerService_GenerateManifestWithFilesClient_Trailer_Call struct {
	*mock.Call
}

// Trailer is a helper method to define mock.On call
func (_e *RepoServerService_GenerateManifestWithFilesClient_Expecter) Trailer() *RepoServerService_GenerateManifestWithFilesClient_Trailer_Call {
	return &RepoServerService_GenerateManifestWithFilesClient_Trailer_Call{Call: _e.mock.On("Trailer")}
}

func (_c *RepoServerService_GenerateManifestWithFilesClient_Trailer_Call) Run(run func()) *RepoServerService_GenerateManifestWithFilesClient_Trailer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RepoServerService_GenerateManifestWithFilesClient_Trailer_Call) Return(mD metadata.MD) *RepoServerService_GenerateManifestWithFilesClient_Trailer_Call {
	_c.Call.Return(mD)
	return _c
}

func (_c *RepoServerService_GenerateManifestWithFilesClient_Trailer_Call) RunAndReturn(run func() metadata.MD) *RepoServerService_GenerateManifestWithFilesClient_Trailer_Call {
	_c.Call.Return(run)
	return _c
}
