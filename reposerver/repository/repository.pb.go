// Code generated by protoc-gen-go. DO NOT EDIT.
// source: reposerver/repository/repository.proto

/*
Package repository is a generated protocol buffer package.

It is generated from these files:
	reposerver/repository/repository.proto

It has these top-level messages:
	ManifestRequest
	ManifestResponse
	EnvParamsRequest
	EnvParamsResponse
	KsonnetAppRequest
	KsonnetAppResponse
	KsonnetEnvironment
	KsonnetEnvironmentDestination
*/
package repository

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "k8s.io/api/core/v1"
import github_com_argoproj_argo_cd_pkg_apis_application_v1alpha1 "github.com/argoproj/argo-cd/pkg/apis/application/v1alpha1"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// ManifestRequest is a query for manifest generation.
type ManifestRequest struct {
	Repo                        *github_com_argoproj_argo_cd_pkg_apis_application_v1alpha1.Repository           `protobuf:"bytes,1,opt,name=repo" json:"repo,omitempty"`
	Revision                    string                                                                          `protobuf:"bytes,2,opt,name=revision" json:"revision,omitempty"`
	Path                        string                                                                          `protobuf:"bytes,3,opt,name=path" json:"path,omitempty"`
	Environment                 string                                                                          `protobuf:"bytes,4,opt,name=environment" json:"environment,omitempty"`
	AppLabel                    string                                                                          `protobuf:"bytes,5,opt,name=appLabel" json:"appLabel,omitempty"`
	ComponentParameterOverrides []*github_com_argoproj_argo_cd_pkg_apis_application_v1alpha1.ComponentParameter `protobuf:"bytes,6,rep,name=componentParameterOverrides" json:"componentParameterOverrides,omitempty"`
}

func (m *ManifestRequest) Reset()                    { *m = ManifestRequest{} }
func (m *ManifestRequest) String() string            { return proto.CompactTextString(m) }
func (*ManifestRequest) ProtoMessage()               {}
func (*ManifestRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ManifestRequest) GetRepo() *github_com_argoproj_argo_cd_pkg_apis_application_v1alpha1.Repository {
	if m != nil {
		return m.Repo
	}
	return nil
}

func (m *ManifestRequest) GetRevision() string {
	if m != nil {
		return m.Revision
	}
	return ""
}

func (m *ManifestRequest) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *ManifestRequest) GetEnvironment() string {
	if m != nil {
		return m.Environment
	}
	return ""
}

func (m *ManifestRequest) GetAppLabel() string {
	if m != nil {
		return m.AppLabel
	}
	return ""
}

func (m *ManifestRequest) GetComponentParameterOverrides() []*github_com_argoproj_argo_cd_pkg_apis_application_v1alpha1.ComponentParameter {
	if m != nil {
		return m.ComponentParameterOverrides
	}
	return nil
}

type ManifestResponse struct {
	Manifests []string `protobuf:"bytes,1,rep,name=manifests" json:"manifests,omitempty"`
	Namespace string   `protobuf:"bytes,2,opt,name=namespace" json:"namespace,omitempty"`
	Server    string   `protobuf:"bytes,3,opt,name=server" json:"server,omitempty"`
	Revision  string   `protobuf:"bytes,4,opt,name=revision" json:"revision,omitempty"`
}

func (m *ManifestResponse) Reset()                    { *m = ManifestResponse{} }
func (m *ManifestResponse) String() string            { return proto.CompactTextString(m) }
func (*ManifestResponse) ProtoMessage()               {}
func (*ManifestResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ManifestResponse) GetManifests() []string {
	if m != nil {
		return m.Manifests
	}
	return nil
}

func (m *ManifestResponse) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ManifestResponse) GetServer() string {
	if m != nil {
		return m.Server
	}
	return ""
}

func (m *ManifestResponse) GetRevision() string {
	if m != nil {
		return m.Revision
	}
	return ""
}

type EnvParamsRequest struct {
	Repo        *github_com_argoproj_argo_cd_pkg_apis_application_v1alpha1.Repository `protobuf:"bytes,1,opt,name=repo" json:"repo,omitempty"`
	Revision    string                                                                `protobuf:"bytes,2,opt,name=revision" json:"revision,omitempty"`
	Path        string                                                                `protobuf:"bytes,3,opt,name=path" json:"path,omitempty"`
	Environment string                                                                `protobuf:"bytes,4,opt,name=environment" json:"environment,omitempty"`
}

func (m *EnvParamsRequest) Reset()                    { *m = EnvParamsRequest{} }
func (m *EnvParamsRequest) String() string            { return proto.CompactTextString(m) }
func (*EnvParamsRequest) ProtoMessage()               {}
func (*EnvParamsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *EnvParamsRequest) GetRepo() *github_com_argoproj_argo_cd_pkg_apis_application_v1alpha1.Repository {
	if m != nil {
		return m.Repo
	}
	return nil
}

func (m *EnvParamsRequest) GetRevision() string {
	if m != nil {
		return m.Revision
	}
	return ""
}

func (m *EnvParamsRequest) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *EnvParamsRequest) GetEnvironment() string {
	if m != nil {
		return m.Environment
	}
	return ""
}

type EnvParamsResponse struct {
	Params []*github_com_argoproj_argo_cd_pkg_apis_application_v1alpha1.ComponentParameter `protobuf:"bytes,1,rep,name=params" json:"params,omitempty"`
}

func (m *EnvParamsResponse) Reset()                    { *m = EnvParamsResponse{} }
func (m *EnvParamsResponse) String() string            { return proto.CompactTextString(m) }
func (*EnvParamsResponse) ProtoMessage()               {}
func (*EnvParamsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *EnvParamsResponse) GetParams() []*github_com_argoproj_argo_cd_pkg_apis_application_v1alpha1.ComponentParameter {
	if m != nil {
		return m.Params
	}
	return nil
}

// KsonnetAppRequest is a query for ksonnet app
type KsonnetAppRequest struct {
	Repo     *github_com_argoproj_argo_cd_pkg_apis_application_v1alpha1.Repository `protobuf:"bytes,1,opt,name=repo" json:"repo,omitempty"`
	Revision string                                                                `protobuf:"bytes,2,opt,name=revision" json:"revision,omitempty"`
	Path     string                                                                `protobuf:"bytes,3,opt,name=path" json:"path,omitempty"`
}

func (m *KsonnetAppRequest) Reset()                    { *m = KsonnetAppRequest{} }
func (m *KsonnetAppRequest) String() string            { return proto.CompactTextString(m) }
func (*KsonnetAppRequest) ProtoMessage()               {}
func (*KsonnetAppRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *KsonnetAppRequest) GetRepo() *github_com_argoproj_argo_cd_pkg_apis_application_v1alpha1.Repository {
	if m != nil {
		return m.Repo
	}
	return nil
}

func (m *KsonnetAppRequest) GetRevision() string {
	if m != nil {
		return m.Revision
	}
	return ""
}

func (m *KsonnetAppRequest) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

// KsonnetAppResponse contains Ksonnet app response
// This roughly reflects: ksonnet/ksonnet/metadata/app/schema.go
// NOTE: we may expose ksonnet apps from API server, in which case these definitions will move to
// a more public place. For now, these types are only used internally.
type KsonnetAppResponse struct {
	Name         string                         `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Environments map[string]*KsonnetEnvironment `protobuf:"bytes,2,rep,name=environments" json:"environments,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *KsonnetAppResponse) Reset()                    { *m = KsonnetAppResponse{} }
func (m *KsonnetAppResponse) String() string            { return proto.CompactTextString(m) }
func (*KsonnetAppResponse) ProtoMessage()               {}
func (*KsonnetAppResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *KsonnetAppResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *KsonnetAppResponse) GetEnvironments() map[string]*KsonnetEnvironment {
	if m != nil {
		return m.Environments
	}
	return nil
}

type KsonnetEnvironment struct {
	// Name is the user defined name of an environment
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// KubernetesVersion is the kubernetes version the targetted cluster is running on.
	K8SVersion string `protobuf:"bytes,2,opt,name=k8sVersion" json:"k8sVersion,omitempty"`
	// Path is the relative project path containing metadata for this environment.
	Path string `protobuf:"bytes,3,opt,name=path" json:"path,omitempty"`
	// Destination stores the cluster address that this environment points to.
	Destination *KsonnetEnvironmentDestination `protobuf:"bytes,4,opt,name=destination" json:"destination,omitempty"`
}

func (m *KsonnetEnvironment) Reset()                    { *m = KsonnetEnvironment{} }
func (m *KsonnetEnvironment) String() string            { return proto.CompactTextString(m) }
func (*KsonnetEnvironment) ProtoMessage()               {}
func (*KsonnetEnvironment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *KsonnetEnvironment) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *KsonnetEnvironment) GetK8SVersion() string {
	if m != nil {
		return m.K8SVersion
	}
	return ""
}

func (m *KsonnetEnvironment) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *KsonnetEnvironment) GetDestination() *KsonnetEnvironmentDestination {
	if m != nil {
		return m.Destination
	}
	return nil
}

type KsonnetEnvironmentDestination struct {
	// Server is the Kubernetes server that the cluster is running on.
	Server string `protobuf:"bytes,1,opt,name=server" json:"server,omitempty"`
	// Namespace is the namespace of the Kubernetes server that targets should be deployed to
	Namespace string `protobuf:"bytes,2,opt,name=namespace" json:"namespace,omitempty"`
}

func (m *KsonnetEnvironmentDestination) Reset()                    { *m = KsonnetEnvironmentDestination{} }
func (m *KsonnetEnvironmentDestination) String() string            { return proto.CompactTextString(m) }
func (*KsonnetEnvironmentDestination) ProtoMessage()               {}
func (*KsonnetEnvironmentDestination) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *KsonnetEnvironmentDestination) GetServer() string {
	if m != nil {
		return m.Server
	}
	return ""
}

func (m *KsonnetEnvironmentDestination) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func init() {
	proto.RegisterType((*ManifestRequest)(nil), "repository.ManifestRequest")
	proto.RegisterType((*ManifestResponse)(nil), "repository.ManifestResponse")
	proto.RegisterType((*EnvParamsRequest)(nil), "repository.EnvParamsRequest")
	proto.RegisterType((*EnvParamsResponse)(nil), "repository.EnvParamsResponse")
	proto.RegisterType((*KsonnetAppRequest)(nil), "repository.KsonnetAppRequest")
	proto.RegisterType((*KsonnetAppResponse)(nil), "repository.KsonnetAppResponse")
	proto.RegisterType((*KsonnetEnvironment)(nil), "repository.KsonnetEnvironment")
	proto.RegisterType((*KsonnetEnvironmentDestination)(nil), "repository.KsonnetEnvironmentDestination")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RepositoryService service

type RepositoryServiceClient interface {
	// Generate manifest for application in specified repo name and revision
	GenerateManifest(ctx context.Context, in *ManifestRequest, opts ...grpc.CallOption) (*ManifestResponse, error)
	// Retrieve Ksonnet environment params in specified repo name and revision
	GetEnvParams(ctx context.Context, in *EnvParamsRequest, opts ...grpc.CallOption) (*EnvParamsResponse, error)
	// Retrieve Ksonnet environment params in specified repo name and revision
	GetKsonnetApp(ctx context.Context, in *KsonnetAppRequest, opts ...grpc.CallOption) (*KsonnetAppResponse, error)
}

type repositoryServiceClient struct {
	cc *grpc.ClientConn
}

func NewRepositoryServiceClient(cc *grpc.ClientConn) RepositoryServiceClient {
	return &repositoryServiceClient{cc}
}

func (c *repositoryServiceClient) GenerateManifest(ctx context.Context, in *ManifestRequest, opts ...grpc.CallOption) (*ManifestResponse, error) {
	out := new(ManifestResponse)
	err := grpc.Invoke(ctx, "/repository.RepositoryService/GenerateManifest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryServiceClient) GetEnvParams(ctx context.Context, in *EnvParamsRequest, opts ...grpc.CallOption) (*EnvParamsResponse, error) {
	out := new(EnvParamsResponse)
	err := grpc.Invoke(ctx, "/repository.RepositoryService/GetEnvParams", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryServiceClient) GetKsonnetApp(ctx context.Context, in *KsonnetAppRequest, opts ...grpc.CallOption) (*KsonnetAppResponse, error) {
	out := new(KsonnetAppResponse)
	err := grpc.Invoke(ctx, "/repository.RepositoryService/GetKsonnetApp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RepositoryService service

type RepositoryServiceServer interface {
	// Generate manifest for application in specified repo name and revision
	GenerateManifest(context.Context, *ManifestRequest) (*ManifestResponse, error)
	// Retrieve Ksonnet environment params in specified repo name and revision
	GetEnvParams(context.Context, *EnvParamsRequest) (*EnvParamsResponse, error)
	// Retrieve Ksonnet environment params in specified repo name and revision
	GetKsonnetApp(context.Context, *KsonnetAppRequest) (*KsonnetAppResponse, error)
}

func RegisterRepositoryServiceServer(s *grpc.Server, srv RepositoryServiceServer) {
	s.RegisterService(&_RepositoryService_serviceDesc, srv)
}

func _RepositoryService_GenerateManifest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManifestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServiceServer).GenerateManifest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository.RepositoryService/GenerateManifest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServiceServer).GenerateManifest(ctx, req.(*ManifestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepositoryService_GetEnvParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnvParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServiceServer).GetEnvParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository.RepositoryService/GetEnvParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServiceServer).GetEnvParams(ctx, req.(*EnvParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepositoryService_GetKsonnetApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KsonnetAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServiceServer).GetKsonnetApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository.RepositoryService/GetKsonnetApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServiceServer).GetKsonnetApp(ctx, req.(*KsonnetAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RepositoryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "repository.RepositoryService",
	HandlerType: (*RepositoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateManifest",
			Handler:    _RepositoryService_GenerateManifest_Handler,
		},
		{
			MethodName: "GetEnvParams",
			Handler:    _RepositoryService_GetEnvParams_Handler,
		},
		{
			MethodName: "GetKsonnetApp",
			Handler:    _RepositoryService_GetKsonnetApp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "reposerver/repository/repository.proto",
}

func init() { proto.RegisterFile("reposerver/repository/repository.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 675 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x55, 0xcf, 0x6e, 0x13, 0x3d,
	0x10, 0xef, 0x26, 0x69, 0xf4, 0x65, 0xd2, 0x4f, 0x5f, 0x6a, 0x7d, 0x42, 0xab, 0xf4, 0x8f, 0xa2,
	0x3d, 0xa0, 0x70, 0x60, 0x97, 0xa6, 0x1c, 0x2a, 0x6e, 0xfc, 0x89, 0x2a, 0x54, 0xaa, 0x56, 0xcb,
	0x1f, 0x09, 0x2e, 0x95, 0xbb, 0x19, 0xb6, 0x26, 0x89, 0x6d, 0x6c, 0x77, 0xa5, 0x72, 0x44, 0xe2,
	0xcc, 0x1b, 0x70, 0xe7, 0x29, 0x78, 0x14, 0x5e, 0x80, 0x87, 0x40, 0xeb, 0xdd, 0x74, 0x9d, 0x36,
	0xcd, 0x05, 0x0e, 0x70, 0x1b, 0xcf, 0x8c, 0x7f, 0x33, 0xf3, 0x9b, 0xf1, 0x18, 0x6e, 0x2b, 0x94,
	0x42, 0xa3, 0xca, 0x50, 0x45, 0x56, 0x64, 0x46, 0xa8, 0x0b, 0x47, 0x0c, 0xa5, 0x12, 0x46, 0x10,
	0xa8, 0x34, 0xdd, 0xff, 0x53, 0x91, 0x0a, 0xab, 0x8e, 0x72, 0xa9, 0xf0, 0xe8, 0x6e, 0xa6, 0x42,
	0xa4, 0x13, 0x8c, 0xa8, 0x64, 0x11, 0xe5, 0x5c, 0x18, 0x6a, 0x98, 0xe0, 0xba, 0xb4, 0x06, 0xe3,
	0x3d, 0x1d, 0x32, 0x61, 0xad, 0x89, 0x50, 0x18, 0x65, 0x3b, 0x51, 0x8a, 0x1c, 0x15, 0x35, 0x38,
	0x2a, 0x7d, 0x9e, 0xa6, 0xcc, 0x9c, 0x9d, 0x9f, 0x86, 0x89, 0x98, 0x46, 0x54, 0xd9, 0x10, 0xef,
	0xac, 0x70, 0x37, 0x19, 0x45, 0x72, 0x9c, 0xe6, 0x97, 0x75, 0x44, 0xa5, 0x9c, 0xb0, 0xc4, 0x82,
	0x47, 0xd9, 0x0e, 0x9d, 0xc8, 0x33, 0x7a, 0x0d, 0x2a, 0xf8, 0x51, 0x83, 0xff, 0x0e, 0x29, 0x67,
	0x6f, 0x51, 0x9b, 0x18, 0xdf, 0x9f, 0xa3, 0x36, 0xe4, 0x35, 0x34, 0xf2, 0x22, 0x7c, 0xaf, 0xe7,
	0xf5, 0xdb, 0x83, 0x61, 0x58, 0x45, 0x0b, 0x67, 0xd1, 0xac, 0x70, 0x92, 0x8c, 0x42, 0x39, 0x4e,
	0xc3, 0x3c, 0x5a, 0xe8, 0x44, 0x0b, 0x67, 0xd1, 0xc2, 0xf8, 0x92, 0x8b, 0xd8, 0x42, 0x92, 0x2e,
	0xfc, 0xa3, 0x30, 0x63, 0x9a, 0x09, 0xee, 0xd7, 0x7a, 0x5e, 0xbf, 0x15, 0x5f, 0x9e, 0x09, 0x81,
	0x86, 0xa4, 0xe6, 0xcc, 0xaf, 0x5b, 0xbd, 0x95, 0x49, 0x0f, 0xda, 0xc8, 0x33, 0xa6, 0x04, 0x9f,
	0x22, 0x37, 0x7e, 0xc3, 0x9a, 0x5c, 0x55, 0x8e, 0x48, 0xa5, 0x7c, 0x46, 0x4f, 0x71, 0xe2, 0xaf,
	0x16, 0x88, 0xb3, 0x33, 0xf9, 0xec, 0xc1, 0x46, 0x22, 0xa6, 0x52, 0x70, 0xe4, 0xe6, 0x98, 0x2a,
	0x3a, 0x45, 0x83, 0xea, 0x28, 0x43, 0xa5, 0xd8, 0x08, 0xb5, 0xdf, 0xec, 0xd5, 0xfb, 0xed, 0xc1,
	0xe1, 0x2f, 0x14, 0xf8, 0xf8, 0x1a, 0x7a, 0xbc, 0x2c, 0x62, 0xf0, 0xd1, 0x83, 0x4e, 0x45, 0xb7,
	0x96, 0x82, 0x6b, 0x24, 0x9b, 0xd0, 0x9a, 0x96, 0x3a, 0xed, 0x7b, 0xbd, 0x7a, 0xbf, 0x15, 0x57,
	0x8a, 0xdc, 0xca, 0xe9, 0x14, 0xb5, 0xa4, 0x09, 0x96, 0x9c, 0x55, 0x0a, 0x72, 0x0b, 0x9a, 0xc5,
	0x50, 0x96, 0xb4, 0x95, 0xa7, 0x39, 0xa2, 0x1b, 0xf3, 0x44, 0x07, 0xdf, 0x3c, 0xe8, 0x0c, 0x79,
	0x66, 0xd3, 0xd3, 0x7f, 0x63, 0xd3, 0x83, 0x0f, 0xb0, 0xee, 0x14, 0x50, 0xd2, 0x88, 0xd0, 0x94,
	0x56, 0x63, 0x39, 0xfc, 0xed, 0x7d, 0x2d, 0xc1, 0x83, 0x2f, 0x1e, 0xac, 0x1f, 0x68, 0xc1, 0x39,
	0x9a, 0x87, 0x52, 0xfe, 0x79, 0xf4, 0x05, 0xdf, 0x3d, 0x20, 0x6e, 0x82, 0x25, 0x3d, 0x04, 0x1a,
	0xf9, 0xd8, 0xd8, 0x0c, 0x5b, 0xb1, 0x95, 0xc9, 0x0b, 0x58, 0x73, 0x68, 0xd5, 0x7e, 0xcd, 0x12,
	0x77, 0x2f, 0x74, 0xb6, 0xda, 0x75, 0xa4, 0x70, 0xe8, 0x5c, 0x19, 0x72, 0xa3, 0x2e, 0xe2, 0x39,
	0x94, 0xee, 0x89, 0xed, 0xce, 0xbc, 0x0b, 0xe9, 0x40, 0x7d, 0x8c, 0x17, 0x65, 0xf4, 0x5c, 0x24,
	0xf7, 0x61, 0x35, 0xa3, 0x93, 0xf3, 0x62, 0xa8, 0xdb, 0x83, 0xed, 0x05, 0x51, 0x1d, 0x98, 0xb8,
	0x70, 0x7e, 0x50, 0xdb, 0xf3, 0x82, 0xaf, 0x55, 0x85, 0x8e, 0xc7, 0xc2, 0x0a, 0xb7, 0x01, 0xc6,
	0x7b, 0xfa, 0x15, 0x2a, 0x87, 0x3e, 0x47, 0xb3, 0x70, 0xfe, 0x0e, 0xa0, 0x3d, 0x42, 0x6d, 0x18,
	0xb7, 0x9d, 0xb1, 0xf3, 0xd7, 0x1e, 0xdc, 0x59, 0x9e, 0xde, 0x93, 0xea, 0x42, 0xec, 0xde, 0x0e,
	0x5e, 0xc2, 0xd6, 0x52, 0x6f, 0xe7, 0x05, 0x7b, 0x73, 0x2f, 0x78, 0xe9, 0xbb, 0x1f, 0x7c, 0xaa,
	0xc1, 0x7a, 0x35, 0x29, 0xcf, 0x51, 0x65, 0x2c, 0x41, 0x72, 0x04, 0x9d, 0xfd, 0x72, 0xc1, 0xcf,
	0xb6, 0x0c, 0xd9, 0x70, 0x13, 0xbf, 0xb2, 0xea, 0xbb, 0x9b, 0x8b, 0x8d, 0x45, 0xa3, 0x83, 0x15,
	0x72, 0x08, 0x6b, 0xfb, 0x36, 0xf3, 0xe2, 0xad, 0x91, 0x39, 0xff, 0xab, 0x3b, 0xa4, 0xbb, 0x75,
	0x83, 0xf5, 0x12, 0xee, 0x18, 0xfe, 0xdd, 0x47, 0x53, 0x8d, 0x14, 0xd9, 0xba, 0x69, 0xd4, 0x0a,
	0xc0, 0xed, 0xe5, 0x93, 0x18, 0xac, 0x3c, 0xda, 0x7d, 0xb3, 0xb3, 0xec, 0x33, 0x5c, 0xf8, 0x69,
	0x9f, 0x36, 0xed, 0xdf, 0xb7, 0xfb, 0x33, 0x00, 0x00, 0xff, 0xff, 0xd2, 0x53, 0xe0, 0x36, 0xd4,
	0x07, 0x00, 0x00,
}
