// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: reposerver/repository/repository.proto

package repository // import "github.com/argoproj/argo-cd/reposerver/repository"

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import v1alpha1 "github.com/argoproj/argo-cd/pkg/apis/application/v1alpha1"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "k8s.io/api/core/v1"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// ManifestRequest is a query for manifest generation.
type ManifestRequest struct {
	Repo                 *v1alpha1.Repository               `protobuf:"bytes,1,opt,name=repo" json:"repo,omitempty"`
	Revision             string                             `protobuf:"bytes,2,opt,name=revision,proto3" json:"revision,omitempty"`
	NoCache              bool                               `protobuf:"varint,3,opt,name=noCache,proto3" json:"noCache,omitempty"`
	AppLabelKey          string                             `protobuf:"bytes,4,opt,name=appLabelKey,proto3" json:"appLabelKey,omitempty"`
	AppLabelValue        string                             `protobuf:"bytes,5,opt,name=appLabelValue,proto3" json:"appLabelValue,omitempty"`
	Namespace            string                             `protobuf:"bytes,8,opt,name=namespace,proto3" json:"namespace,omitempty"`
	ApplicationSource    *v1alpha1.ApplicationSource        `protobuf:"bytes,10,opt,name=applicationSource" json:"applicationSource,omitempty"`
	Repos                []*v1alpha1.Repository             `protobuf:"bytes,11,rep,name=repos" json:"repos,omitempty"`
	Plugins              []*v1alpha1.ConfigManagementPlugin `protobuf:"bytes,12,rep,name=plugins" json:"plugins,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                           `json:"-"`
	XXX_unrecognized     []byte                             `json:"-"`
	XXX_sizecache        int32                              `json:"-"`
}

func (m *ManifestRequest) Reset()         { *m = ManifestRequest{} }
func (m *ManifestRequest) String() string { return proto.CompactTextString(m) }
func (*ManifestRequest) ProtoMessage()    {}
func (*ManifestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_repository_e8bb89bd6498b700, []int{0}
}
func (m *ManifestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ManifestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ManifestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ManifestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ManifestRequest.Merge(dst, src)
}
func (m *ManifestRequest) XXX_Size() int {
	return m.Size()
}
func (m *ManifestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ManifestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ManifestRequest proto.InternalMessageInfo

func (m *ManifestRequest) GetRepo() *v1alpha1.Repository {
	if m != nil {
		return m.Repo
	}
	return nil
}

func (m *ManifestRequest) GetRevision() string {
	if m != nil {
		return m.Revision
	}
	return ""
}

func (m *ManifestRequest) GetNoCache() bool {
	if m != nil {
		return m.NoCache
	}
	return false
}

func (m *ManifestRequest) GetAppLabelKey() string {
	if m != nil {
		return m.AppLabelKey
	}
	return ""
}

func (m *ManifestRequest) GetAppLabelValue() string {
	if m != nil {
		return m.AppLabelValue
	}
	return ""
}

func (m *ManifestRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ManifestRequest) GetApplicationSource() *v1alpha1.ApplicationSource {
	if m != nil {
		return m.ApplicationSource
	}
	return nil
}

func (m *ManifestRequest) GetRepos() []*v1alpha1.Repository {
	if m != nil {
		return m.Repos
	}
	return nil
}

func (m *ManifestRequest) GetPlugins() []*v1alpha1.ConfigManagementPlugin {
	if m != nil {
		return m.Plugins
	}
	return nil
}

type ManifestResponse struct {
	Manifests            []string `protobuf:"bytes,1,rep,name=manifests" json:"manifests,omitempty"`
	Namespace            string   `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Server               string   `protobuf:"bytes,3,opt,name=server,proto3" json:"server,omitempty"`
	Revision             string   `protobuf:"bytes,4,opt,name=revision,proto3" json:"revision,omitempty"`
	SourceType           string   `protobuf:"bytes,6,opt,name=sourceType,proto3" json:"sourceType,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ManifestResponse) Reset()         { *m = ManifestResponse{} }
func (m *ManifestResponse) String() string { return proto.CompactTextString(m) }
func (*ManifestResponse) ProtoMessage()    {}
func (*ManifestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_repository_e8bb89bd6498b700, []int{1}
}
func (m *ManifestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ManifestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ManifestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ManifestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ManifestResponse.Merge(dst, src)
}
func (m *ManifestResponse) XXX_Size() int {
	return m.Size()
}
func (m *ManifestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ManifestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ManifestResponse proto.InternalMessageInfo

func (m *ManifestResponse) GetManifests() []string {
	if m != nil {
		return m.Manifests
	}
	return nil
}

func (m *ManifestResponse) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ManifestResponse) GetServer() string {
	if m != nil {
		return m.Server
	}
	return ""
}

func (m *ManifestResponse) GetRevision() string {
	if m != nil {
		return m.Revision
	}
	return ""
}

func (m *ManifestResponse) GetSourceType() string {
	if m != nil {
		return m.SourceType
	}
	return ""
}

// ListAppCfgRequest requests a repository's apps
type ListAppCfgsRequest struct {
	Repo                 *v1alpha1.Repository `protobuf:"bytes,1,opt,name=repo" json:"repo,omitempty"`
	Revision             string               `protobuf:"bytes,2,opt,name=revision,proto3" json:"revision,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ListAppCfgsRequest) Reset()         { *m = ListAppCfgsRequest{} }
func (m *ListAppCfgsRequest) String() string { return proto.CompactTextString(m) }
func (*ListAppCfgsRequest) ProtoMessage()    {}
func (*ListAppCfgsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_repository_e8bb89bd6498b700, []int{2}
}
func (m *ListAppCfgsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListAppCfgsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListAppCfgsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ListAppCfgsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListAppCfgsRequest.Merge(dst, src)
}
func (m *ListAppCfgsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListAppCfgsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListAppCfgsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListAppCfgsRequest proto.InternalMessageInfo

func (m *ListAppCfgsRequest) GetRepo() *v1alpha1.Repository {
	if m != nil {
		return m.Repo
	}
	return nil
}

func (m *ListAppCfgsRequest) GetRevision() string {
	if m != nil {
		return m.Revision
	}
	return ""
}

// AppCfgList returns a list of app c fgs
type AppCfgList struct {
	AppCfgs              map[string]string `protobuf:"bytes,1,rep,name=appCfgs" json:"appCfgs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *AppCfgList) Reset()         { *m = AppCfgList{} }
func (m *AppCfgList) String() string { return proto.CompactTextString(m) }
func (*AppCfgList) ProtoMessage()    {}
func (*AppCfgList) Descriptor() ([]byte, []int) {
	return fileDescriptor_repository_e8bb89bd6498b700, []int{3}
}
func (m *AppCfgList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppCfgList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppCfgList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AppCfgList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppCfgList.Merge(dst, src)
}
func (m *AppCfgList) XXX_Size() int {
	return m.Size()
}
func (m *AppCfgList) XXX_DiscardUnknown() {
	xxx_messageInfo_AppCfgList.DiscardUnknown(m)
}

var xxx_messageInfo_AppCfgList proto.InternalMessageInfo

func (m *AppCfgList) GetAppCfgs() map[string]string {
	if m != nil {
		return m.AppCfgs
	}
	return nil
}

// GetFileRequest return
type GetAppCfgRequest struct {
	Repo                 *v1alpha1.Repository `protobuf:"bytes,1,opt,name=repo" json:"repo,omitempty"`
	Revision             string               `protobuf:"bytes,2,opt,name=revision,proto3" json:"revision,omitempty"`
	Path                 string               `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *GetAppCfgRequest) Reset()         { *m = GetAppCfgRequest{} }
func (m *GetAppCfgRequest) String() string { return proto.CompactTextString(m) }
func (*GetAppCfgRequest) ProtoMessage()    {}
func (*GetAppCfgRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_repository_e8bb89bd6498b700, []int{4}
}
func (m *GetAppCfgRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAppCfgRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAppCfgRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetAppCfgRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAppCfgRequest.Merge(dst, src)
}
func (m *GetAppCfgRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetAppCfgRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAppCfgRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAppCfgRequest proto.InternalMessageInfo

func (m *GetAppCfgRequest) GetRepo() *v1alpha1.Repository {
	if m != nil {
		return m.Repo
	}
	return nil
}

func (m *GetAppCfgRequest) GetRevision() string {
	if m != nil {
		return m.Revision
	}
	return ""
}

func (m *GetAppCfgRequest) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

// GetAppCfgResponse returns the type of app
type GetAppCfgResponse struct {
	AppType              string   `protobuf:"bytes,1,opt,name=appType,proto3" json:"appType,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAppCfgResponse) Reset()         { *m = GetAppCfgResponse{} }
func (m *GetAppCfgResponse) String() string { return proto.CompactTextString(m) }
func (*GetAppCfgResponse) ProtoMessage()    {}
func (*GetAppCfgResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_repository_e8bb89bd6498b700, []int{5}
}
func (m *GetAppCfgResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAppCfgResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAppCfgResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetAppCfgResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAppCfgResponse.Merge(dst, src)
}
func (m *GetAppCfgResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetAppCfgResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAppCfgResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAppCfgResponse proto.InternalMessageInfo

func (m *GetAppCfgResponse) GetAppType() string {
	if m != nil {
		return m.AppType
	}
	return ""
}

// RepoServerAppDetailsQuery contains query information for app details request
type RepoServerAppDetailsQuery struct {
	Repo                 *v1alpha1.Repository               `protobuf:"bytes,1,opt,name=repo" json:"repo,omitempty"`
	Revision             string                             `protobuf:"bytes,2,opt,name=revision,proto3" json:"revision,omitempty"`
	Path                 string                             `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	Repos                []*v1alpha1.Repository             `protobuf:"bytes,4,rep,name=repos" json:"repos,omitempty"`
	Plugins              []*v1alpha1.ConfigManagementPlugin `protobuf:"bytes,5,rep,name=plugins" json:"plugins,omitempty"`
	Helm                 *HelmAppDetailsQuery               `protobuf:"bytes,6,opt,name=helm" json:"helm,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                           `json:"-"`
	XXX_unrecognized     []byte                             `json:"-"`
	XXX_sizecache        int32                              `json:"-"`
}

func (m *RepoServerAppDetailsQuery) Reset()         { *m = RepoServerAppDetailsQuery{} }
func (m *RepoServerAppDetailsQuery) String() string { return proto.CompactTextString(m) }
func (*RepoServerAppDetailsQuery) ProtoMessage()    {}
func (*RepoServerAppDetailsQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_repository_e8bb89bd6498b700, []int{6}
}
func (m *RepoServerAppDetailsQuery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RepoServerAppDetailsQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RepoServerAppDetailsQuery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RepoServerAppDetailsQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RepoServerAppDetailsQuery.Merge(dst, src)
}
func (m *RepoServerAppDetailsQuery) XXX_Size() int {
	return m.Size()
}
func (m *RepoServerAppDetailsQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_RepoServerAppDetailsQuery.DiscardUnknown(m)
}

var xxx_messageInfo_RepoServerAppDetailsQuery proto.InternalMessageInfo

func (m *RepoServerAppDetailsQuery) GetRepo() *v1alpha1.Repository {
	if m != nil {
		return m.Repo
	}
	return nil
}

func (m *RepoServerAppDetailsQuery) GetRevision() string {
	if m != nil {
		return m.Revision
	}
	return ""
}

func (m *RepoServerAppDetailsQuery) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *RepoServerAppDetailsQuery) GetRepos() []*v1alpha1.Repository {
	if m != nil {
		return m.Repos
	}
	return nil
}

func (m *RepoServerAppDetailsQuery) GetPlugins() []*v1alpha1.ConfigManagementPlugin {
	if m != nil {
		return m.Plugins
	}
	return nil
}

func (m *RepoServerAppDetailsQuery) GetHelm() *HelmAppDetailsQuery {
	if m != nil {
		return m.Helm
	}
	return nil
}

type HelmAppDetailsQuery struct {
	ValueFiles           []string `protobuf:"bytes,1,rep,name=valueFiles" json:"valueFiles,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HelmAppDetailsQuery) Reset()         { *m = HelmAppDetailsQuery{} }
func (m *HelmAppDetailsQuery) String() string { return proto.CompactTextString(m) }
func (*HelmAppDetailsQuery) ProtoMessage()    {}
func (*HelmAppDetailsQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_repository_e8bb89bd6498b700, []int{7}
}
func (m *HelmAppDetailsQuery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HelmAppDetailsQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HelmAppDetailsQuery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *HelmAppDetailsQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelmAppDetailsQuery.Merge(dst, src)
}
func (m *HelmAppDetailsQuery) XXX_Size() int {
	return m.Size()
}
func (m *HelmAppDetailsQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_HelmAppDetailsQuery.DiscardUnknown(m)
}

var xxx_messageInfo_HelmAppDetailsQuery proto.InternalMessageInfo

func (m *HelmAppDetailsQuery) GetValueFiles() []string {
	if m != nil {
		return m.ValueFiles
	}
	return nil
}

// RepoAppDetailsResponse application details
type RepoAppDetailsResponse struct {
	Type                 string            `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Ksonnet              *KsonnetAppSpec   `protobuf:"bytes,2,opt,name=ksonnet" json:"ksonnet,omitempty"`
	Helm                 *HelmAppSpec      `protobuf:"bytes,3,opt,name=helm" json:"helm,omitempty"`
	Kustomize            *KustomizeAppSpec `protobuf:"bytes,4,opt,name=kustomize" json:"kustomize,omitempty"`
	Directory            *DirectoryAppSpec `protobuf:"bytes,5,opt,name=directory" json:"directory,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *RepoAppDetailsResponse) Reset()         { *m = RepoAppDetailsResponse{} }
func (m *RepoAppDetailsResponse) String() string { return proto.CompactTextString(m) }
func (*RepoAppDetailsResponse) ProtoMessage()    {}
func (*RepoAppDetailsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_repository_e8bb89bd6498b700, []int{8}
}
func (m *RepoAppDetailsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RepoAppDetailsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RepoAppDetailsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RepoAppDetailsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RepoAppDetailsResponse.Merge(dst, src)
}
func (m *RepoAppDetailsResponse) XXX_Size() int {
	return m.Size()
}
func (m *RepoAppDetailsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RepoAppDetailsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RepoAppDetailsResponse proto.InternalMessageInfo

func (m *RepoAppDetailsResponse) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *RepoAppDetailsResponse) GetKsonnet() *KsonnetAppSpec {
	if m != nil {
		return m.Ksonnet
	}
	return nil
}

func (m *RepoAppDetailsResponse) GetHelm() *HelmAppSpec {
	if m != nil {
		return m.Helm
	}
	return nil
}

func (m *RepoAppDetailsResponse) GetKustomize() *KustomizeAppSpec {
	if m != nil {
		return m.Kustomize
	}
	return nil
}

func (m *RepoAppDetailsResponse) GetDirectory() *DirectoryAppSpec {
	if m != nil {
		return m.Directory
	}
	return nil
}

// KsonnetAppSpec contains Ksonnet app response
// This roughly reflects: ksonnet/ksonnet/metadata/app/schema.go
type KsonnetAppSpec struct {
	Name                 string                         `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Path                 string                         `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Environments         map[string]*KsonnetEnvironment `protobuf:"bytes,3,rep,name=environments" json:"environments,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	Parameters           []*v1alpha1.KsonnetParameter   `protobuf:"bytes,4,rep,name=parameters" json:"parameters,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *KsonnetAppSpec) Reset()         { *m = KsonnetAppSpec{} }
func (m *KsonnetAppSpec) String() string { return proto.CompactTextString(m) }
func (*KsonnetAppSpec) ProtoMessage()    {}
func (*KsonnetAppSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_repository_e8bb89bd6498b700, []int{9}
}
func (m *KsonnetAppSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KsonnetAppSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KsonnetAppSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *KsonnetAppSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KsonnetAppSpec.Merge(dst, src)
}
func (m *KsonnetAppSpec) XXX_Size() int {
	return m.Size()
}
func (m *KsonnetAppSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_KsonnetAppSpec.DiscardUnknown(m)
}

var xxx_messageInfo_KsonnetAppSpec proto.InternalMessageInfo

func (m *KsonnetAppSpec) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *KsonnetAppSpec) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *KsonnetAppSpec) GetEnvironments() map[string]*KsonnetEnvironment {
	if m != nil {
		return m.Environments
	}
	return nil
}

func (m *KsonnetAppSpec) GetParameters() []*v1alpha1.KsonnetParameter {
	if m != nil {
		return m.Parameters
	}
	return nil
}

// HelmAppSpec contains helm app name and path in source repo
type HelmAppSpec struct {
	Name                 string                    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Path                 string                    `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	ValueFiles           []string                  `protobuf:"bytes,3,rep,name=valueFiles" json:"valueFiles,omitempty"`
	Parameters           []*v1alpha1.HelmParameter `protobuf:"bytes,4,rep,name=parameters" json:"parameters,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *HelmAppSpec) Reset()         { *m = HelmAppSpec{} }
func (m *HelmAppSpec) String() string { return proto.CompactTextString(m) }
func (*HelmAppSpec) ProtoMessage()    {}
func (*HelmAppSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_repository_e8bb89bd6498b700, []int{10}
}
func (m *HelmAppSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HelmAppSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HelmAppSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *HelmAppSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelmAppSpec.Merge(dst, src)
}
func (m *HelmAppSpec) XXX_Size() int {
	return m.Size()
}
func (m *HelmAppSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_HelmAppSpec.DiscardUnknown(m)
}

var xxx_messageInfo_HelmAppSpec proto.InternalMessageInfo

func (m *HelmAppSpec) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *HelmAppSpec) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *HelmAppSpec) GetValueFiles() []string {
	if m != nil {
		return m.ValueFiles
	}
	return nil
}

func (m *HelmAppSpec) GetParameters() []*v1alpha1.HelmParameter {
	if m != nil {
		return m.Parameters
	}
	return nil
}

// KustomizeAppSpec contains kustomize app name and path in source repo
type KustomizeAppSpec struct {
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// imageTags is a list of available image tags. This is only populated for Kustomize 1.
	ImageTags []*v1alpha1.KustomizeImageTag `protobuf:"bytes,2,rep,name=imageTags" json:"imageTags,omitempty"`
	// images is a list of available images. This is only populated for Kustomize 2.
	Images               []string `protobuf:"bytes,3,rep,name=images" json:"images,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KustomizeAppSpec) Reset()         { *m = KustomizeAppSpec{} }
func (m *KustomizeAppSpec) String() string { return proto.CompactTextString(m) }
func (*KustomizeAppSpec) ProtoMessage()    {}
func (*KustomizeAppSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_repository_e8bb89bd6498b700, []int{11}
}
func (m *KustomizeAppSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KustomizeAppSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KustomizeAppSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *KustomizeAppSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KustomizeAppSpec.Merge(dst, src)
}
func (m *KustomizeAppSpec) XXX_Size() int {
	return m.Size()
}
func (m *KustomizeAppSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_KustomizeAppSpec.DiscardUnknown(m)
}

var xxx_messageInfo_KustomizeAppSpec proto.InternalMessageInfo

func (m *KustomizeAppSpec) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *KustomizeAppSpec) GetImageTags() []*v1alpha1.KustomizeImageTag {
	if m != nil {
		return m.ImageTags
	}
	return nil
}

func (m *KustomizeAppSpec) GetImages() []string {
	if m != nil {
		return m.Images
	}
	return nil
}

type KsonnetEnvironment struct {
	// Name is the user defined name of an environment
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// KubernetesVersion is the kubernetes version the targetted cluster is running on.
	K8SVersion string `protobuf:"bytes,2,opt,name=k8sVersion,proto3" json:"k8sVersion,omitempty"`
	// Path is the relative project path containing metadata for this environment.
	Path string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	// Destination stores the cluster address that this environment points to.
	Destination          *KsonnetEnvironmentDestination `protobuf:"bytes,4,opt,name=destination" json:"destination,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *KsonnetEnvironment) Reset()         { *m = KsonnetEnvironment{} }
func (m *KsonnetEnvironment) String() string { return proto.CompactTextString(m) }
func (*KsonnetEnvironment) ProtoMessage()    {}
func (*KsonnetEnvironment) Descriptor() ([]byte, []int) {
	return fileDescriptor_repository_e8bb89bd6498b700, []int{12}
}
func (m *KsonnetEnvironment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KsonnetEnvironment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KsonnetEnvironment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *KsonnetEnvironment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KsonnetEnvironment.Merge(dst, src)
}
func (m *KsonnetEnvironment) XXX_Size() int {
	return m.Size()
}
func (m *KsonnetEnvironment) XXX_DiscardUnknown() {
	xxx_messageInfo_KsonnetEnvironment.DiscardUnknown(m)
}

var xxx_messageInfo_KsonnetEnvironment proto.InternalMessageInfo

func (m *KsonnetEnvironment) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *KsonnetEnvironment) GetK8SVersion() string {
	if m != nil {
		return m.K8SVersion
	}
	return ""
}

func (m *KsonnetEnvironment) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *KsonnetEnvironment) GetDestination() *KsonnetEnvironmentDestination {
	if m != nil {
		return m.Destination
	}
	return nil
}

type KsonnetEnvironmentDestination struct {
	// Server is the Kubernetes server that the cluster is running on.
	Server string `protobuf:"bytes,1,opt,name=server,proto3" json:"server,omitempty"`
	// Namespace is the namespace of the Kubernetes server that targets should be deployed to
	Namespace            string   `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KsonnetEnvironmentDestination) Reset()         { *m = KsonnetEnvironmentDestination{} }
func (m *KsonnetEnvironmentDestination) String() string { return proto.CompactTextString(m) }
func (*KsonnetEnvironmentDestination) ProtoMessage()    {}
func (*KsonnetEnvironmentDestination) Descriptor() ([]byte, []int) {
	return fileDescriptor_repository_e8bb89bd6498b700, []int{13}
}
func (m *KsonnetEnvironmentDestination) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KsonnetEnvironmentDestination) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KsonnetEnvironmentDestination.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *KsonnetEnvironmentDestination) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KsonnetEnvironmentDestination.Merge(dst, src)
}
func (m *KsonnetEnvironmentDestination) XXX_Size() int {
	return m.Size()
}
func (m *KsonnetEnvironmentDestination) XXX_DiscardUnknown() {
	xxx_messageInfo_KsonnetEnvironmentDestination.DiscardUnknown(m)
}

var xxx_messageInfo_KsonnetEnvironmentDestination proto.InternalMessageInfo

func (m *KsonnetEnvironmentDestination) GetServer() string {
	if m != nil {
		return m.Server
	}
	return ""
}

func (m *KsonnetEnvironmentDestination) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

// DirectoryAppSpec contains directory
type DirectoryAppSpec struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DirectoryAppSpec) Reset()         { *m = DirectoryAppSpec{} }
func (m *DirectoryAppSpec) String() string { return proto.CompactTextString(m) }
func (*DirectoryAppSpec) ProtoMessage()    {}
func (*DirectoryAppSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_repository_e8bb89bd6498b700, []int{14}
}
func (m *DirectoryAppSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DirectoryAppSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DirectoryAppSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DirectoryAppSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DirectoryAppSpec.Merge(dst, src)
}
func (m *DirectoryAppSpec) XXX_Size() int {
	return m.Size()
}
func (m *DirectoryAppSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_DirectoryAppSpec.DiscardUnknown(m)
}

var xxx_messageInfo_DirectoryAppSpec proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ManifestRequest)(nil), "repository.ManifestRequest")
	proto.RegisterType((*ManifestResponse)(nil), "repository.ManifestResponse")
	proto.RegisterType((*ListAppCfgsRequest)(nil), "repository.ListAppCfgsRequest")
	proto.RegisterType((*AppCfgList)(nil), "repository.AppCfgList")
	proto.RegisterMapType((map[string]string)(nil), "repository.AppCfgList.AppCfgsEntry")
	proto.RegisterType((*GetAppCfgRequest)(nil), "repository.GetAppCfgRequest")
	proto.RegisterType((*GetAppCfgResponse)(nil), "repository.GetAppCfgResponse")
	proto.RegisterType((*RepoServerAppDetailsQuery)(nil), "repository.RepoServerAppDetailsQuery")
	proto.RegisterType((*HelmAppDetailsQuery)(nil), "repository.HelmAppDetailsQuery")
	proto.RegisterType((*RepoAppDetailsResponse)(nil), "repository.RepoAppDetailsResponse")
	proto.RegisterType((*KsonnetAppSpec)(nil), "repository.KsonnetAppSpec")
	proto.RegisterMapType((map[string]*KsonnetEnvironment)(nil), "repository.KsonnetAppSpec.EnvironmentsEntry")
	proto.RegisterType((*HelmAppSpec)(nil), "repository.HelmAppSpec")
	proto.RegisterType((*KustomizeAppSpec)(nil), "repository.KustomizeAppSpec")
	proto.RegisterType((*KsonnetEnvironment)(nil), "repository.KsonnetEnvironment")
	proto.RegisterType((*KsonnetEnvironmentDestination)(nil), "repository.KsonnetEnvironmentDestination")
	proto.RegisterType((*DirectoryAppSpec)(nil), "repository.DirectoryAppSpec")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RepoServerService service

type RepoServerServiceClient interface {
	// GenerateManifest generates manifest for application in specified repo name and revision
	GenerateManifest(ctx context.Context, in *ManifestRequest, opts ...grpc.CallOption) (*ManifestResponse, error)
	// ListDir returns the file contents at the specified repo and path
	ListAppCfgs(ctx context.Context, in *ListAppCfgsRequest, opts ...grpc.CallOption) (*AppCfgList, error)
	// GetFile returns the file contents at the specified repo and path
	GetAppCfg(ctx context.Context, in *GetAppCfgRequest, opts ...grpc.CallOption) (*GetAppCfgResponse, error)
	// Generate manifest for application in specified repo name and revision
	GetAppDetails(ctx context.Context, in *RepoServerAppDetailsQuery, opts ...grpc.CallOption) (*RepoAppDetailsResponse, error)
}

type repoServerServiceClient struct {
	cc *grpc.ClientConn
}

func NewRepoServerServiceClient(cc *grpc.ClientConn) RepoServerServiceClient {
	return &repoServerServiceClient{cc}
}

func (c *repoServerServiceClient) GenerateManifest(ctx context.Context, in *ManifestRequest, opts ...grpc.CallOption) (*ManifestResponse, error) {
	out := new(ManifestResponse)
	err := c.cc.Invoke(ctx, "/repository.RepoServerService/GenerateManifest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repoServerServiceClient) ListAppCfgs(ctx context.Context, in *ListAppCfgsRequest, opts ...grpc.CallOption) (*AppCfgList, error) {
	out := new(AppCfgList)
	err := c.cc.Invoke(ctx, "/repository.RepoServerService/ListAppCfgs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repoServerServiceClient) GetAppCfg(ctx context.Context, in *GetAppCfgRequest, opts ...grpc.CallOption) (*GetAppCfgResponse, error) {
	out := new(GetAppCfgResponse)
	err := c.cc.Invoke(ctx, "/repository.RepoServerService/GetAppCfg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repoServerServiceClient) GetAppDetails(ctx context.Context, in *RepoServerAppDetailsQuery, opts ...grpc.CallOption) (*RepoAppDetailsResponse, error) {
	out := new(RepoAppDetailsResponse)
	err := c.cc.Invoke(ctx, "/repository.RepoServerService/GetAppDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RepoServerService service

type RepoServerServiceServer interface {
	// GenerateManifest generates manifest for application in specified repo name and revision
	GenerateManifest(context.Context, *ManifestRequest) (*ManifestResponse, error)
	// ListDir returns the file contents at the specified repo and path
	ListAppCfgs(context.Context, *ListAppCfgsRequest) (*AppCfgList, error)
	// GetFile returns the file contents at the specified repo and path
	GetAppCfg(context.Context, *GetAppCfgRequest) (*GetAppCfgResponse, error)
	// Generate manifest for application in specified repo name and revision
	GetAppDetails(context.Context, *RepoServerAppDetailsQuery) (*RepoAppDetailsResponse, error)
}

func RegisterRepoServerServiceServer(s *grpc.Server, srv RepoServerServiceServer) {
	s.RegisterService(&_RepoServerService_serviceDesc, srv)
}

func _RepoServerService_GenerateManifest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManifestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepoServerServiceServer).GenerateManifest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository.RepoServerService/GenerateManifest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepoServerServiceServer).GenerateManifest(ctx, req.(*ManifestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepoServerService_ListAppCfgs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppCfgsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepoServerServiceServer).ListAppCfgs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository.RepoServerService/ListAppCfgs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepoServerServiceServer).ListAppCfgs(ctx, req.(*ListAppCfgsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepoServerService_GetAppCfg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppCfgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepoServerServiceServer).GetAppCfg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository.RepoServerService/GetAppCfg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepoServerServiceServer).GetAppCfg(ctx, req.(*GetAppCfgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepoServerService_GetAppDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoServerAppDetailsQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepoServerServiceServer).GetAppDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repository.RepoServerService/GetAppDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepoServerServiceServer).GetAppDetails(ctx, req.(*RepoServerAppDetailsQuery))
	}
	return interceptor(ctx, in, info, handler)
}

var _RepoServerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "repository.RepoServerService",
	HandlerType: (*RepoServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateManifest",
			Handler:    _RepoServerService_GenerateManifest_Handler,
		},
		{
			MethodName: "ListAppCfgs",
			Handler:    _RepoServerService_ListAppCfgs_Handler,
		},
		{
			MethodName: "GetAppCfg",
			Handler:    _RepoServerService_GetAppCfg_Handler,
		},
		{
			MethodName: "GetAppDetails",
			Handler:    _RepoServerService_GetAppDetails_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "reposerver/repository/repository.proto",
}

func (m *ManifestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ManifestRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Repo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRepository(dAtA, i, uint64(m.Repo.Size()))
		n1, err := m.Repo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Revision) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRepository(dAtA, i, uint64(len(m.Revision)))
		i += copy(dAtA[i:], m.Revision)
	}
	if m.NoCache {
		dAtA[i] = 0x18
		i++
		if m.NoCache {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.AppLabelKey) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintRepository(dAtA, i, uint64(len(m.AppLabelKey)))
		i += copy(dAtA[i:], m.AppLabelKey)
	}
	if len(m.AppLabelValue) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintRepository(dAtA, i, uint64(len(m.AppLabelValue)))
		i += copy(dAtA[i:], m.AppLabelValue)
	}
	if len(m.Namespace) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintRepository(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if m.ApplicationSource != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintRepository(dAtA, i, uint64(m.ApplicationSource.Size()))
		n2, err := m.ApplicationSource.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.Repos) > 0 {
		for _, msg := range m.Repos {
			dAtA[i] = 0x5a
			i++
			i = encodeVarintRepository(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Plugins) > 0 {
		for _, msg := range m.Plugins {
			dAtA[i] = 0x62
			i++
			i = encodeVarintRepository(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ManifestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ManifestResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Manifests) > 0 {
		for _, s := range m.Manifests {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Namespace) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRepository(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if len(m.Server) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRepository(dAtA, i, uint64(len(m.Server)))
		i += copy(dAtA[i:], m.Server)
	}
	if len(m.Revision) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintRepository(dAtA, i, uint64(len(m.Revision)))
		i += copy(dAtA[i:], m.Revision)
	}
	if len(m.SourceType) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintRepository(dAtA, i, uint64(len(m.SourceType)))
		i += copy(dAtA[i:], m.SourceType)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ListAppCfgsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListAppCfgsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Repo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRepository(dAtA, i, uint64(m.Repo.Size()))
		n3, err := m.Repo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.Revision) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRepository(dAtA, i, uint64(len(m.Revision)))
		i += copy(dAtA[i:], m.Revision)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AppCfgList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppCfgList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AppCfgs) > 0 {
		for k, _ := range m.AppCfgs {
			dAtA[i] = 0xa
			i++
			v := m.AppCfgs[k]
			mapSize := 1 + len(k) + sovRepository(uint64(len(k))) + 1 + len(v) + sovRepository(uint64(len(v)))
			i = encodeVarintRepository(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintRepository(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintRepository(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetAppCfgRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAppCfgRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Repo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRepository(dAtA, i, uint64(m.Repo.Size()))
		n4, err := m.Repo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if len(m.Revision) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRepository(dAtA, i, uint64(len(m.Revision)))
		i += copy(dAtA[i:], m.Revision)
	}
	if len(m.Path) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRepository(dAtA, i, uint64(len(m.Path)))
		i += copy(dAtA[i:], m.Path)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetAppCfgResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAppCfgResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AppType) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRepository(dAtA, i, uint64(len(m.AppType)))
		i += copy(dAtA[i:], m.AppType)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RepoServerAppDetailsQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RepoServerAppDetailsQuery) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Repo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRepository(dAtA, i, uint64(m.Repo.Size()))
		n5, err := m.Repo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if len(m.Revision) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRepository(dAtA, i, uint64(len(m.Revision)))
		i += copy(dAtA[i:], m.Revision)
	}
	if len(m.Path) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRepository(dAtA, i, uint64(len(m.Path)))
		i += copy(dAtA[i:], m.Path)
	}
	if len(m.Repos) > 0 {
		for _, msg := range m.Repos {
			dAtA[i] = 0x22
			i++
			i = encodeVarintRepository(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Plugins) > 0 {
		for _, msg := range m.Plugins {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintRepository(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Helm != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintRepository(dAtA, i, uint64(m.Helm.Size()))
		n6, err := m.Helm.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *HelmAppDetailsQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HelmAppDetailsQuery) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ValueFiles) > 0 {
		for _, s := range m.ValueFiles {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RepoAppDetailsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RepoAppDetailsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRepository(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Ksonnet != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRepository(dAtA, i, uint64(m.Ksonnet.Size()))
		n7, err := m.Ksonnet.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.Helm != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRepository(dAtA, i, uint64(m.Helm.Size()))
		n8, err := m.Helm.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.Kustomize != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintRepository(dAtA, i, uint64(m.Kustomize.Size()))
		n9, err := m.Kustomize.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.Directory != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintRepository(dAtA, i, uint64(m.Directory.Size()))
		n10, err := m.Directory.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *KsonnetAppSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KsonnetAppSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRepository(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Path) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRepository(dAtA, i, uint64(len(m.Path)))
		i += copy(dAtA[i:], m.Path)
	}
	if len(m.Environments) > 0 {
		for k, _ := range m.Environments {
			dAtA[i] = 0x1a
			i++
			v := m.Environments[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovRepository(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovRepository(uint64(len(k))) + msgSize
			i = encodeVarintRepository(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintRepository(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintRepository(dAtA, i, uint64(v.Size()))
				n11, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n11
			}
		}
	}
	if len(m.Parameters) > 0 {
		for _, msg := range m.Parameters {
			dAtA[i] = 0x22
			i++
			i = encodeVarintRepository(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *HelmAppSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HelmAppSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRepository(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Path) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRepository(dAtA, i, uint64(len(m.Path)))
		i += copy(dAtA[i:], m.Path)
	}
	if len(m.ValueFiles) > 0 {
		for _, s := range m.ValueFiles {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Parameters) > 0 {
		for _, msg := range m.Parameters {
			dAtA[i] = 0x22
			i++
			i = encodeVarintRepository(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *KustomizeAppSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KustomizeAppSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Path) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRepository(dAtA, i, uint64(len(m.Path)))
		i += copy(dAtA[i:], m.Path)
	}
	if len(m.ImageTags) > 0 {
		for _, msg := range m.ImageTags {
			dAtA[i] = 0x12
			i++
			i = encodeVarintRepository(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Images) > 0 {
		for _, s := range m.Images {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *KsonnetEnvironment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KsonnetEnvironment) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRepository(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.K8SVersion) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRepository(dAtA, i, uint64(len(m.K8SVersion)))
		i += copy(dAtA[i:], m.K8SVersion)
	}
	if len(m.Path) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRepository(dAtA, i, uint64(len(m.Path)))
		i += copy(dAtA[i:], m.Path)
	}
	if m.Destination != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintRepository(dAtA, i, uint64(m.Destination.Size()))
		n12, err := m.Destination.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *KsonnetEnvironmentDestination) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KsonnetEnvironmentDestination) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Server) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRepository(dAtA, i, uint64(len(m.Server)))
		i += copy(dAtA[i:], m.Server)
	}
	if len(m.Namespace) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRepository(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DirectoryAppSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DirectoryAppSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintRepository(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ManifestRequest) Size() (n int) {
	var l int
	_ = l
	if m.Repo != nil {
		l = m.Repo.Size()
		n += 1 + l + sovRepository(uint64(l))
	}
	l = len(m.Revision)
	if l > 0 {
		n += 1 + l + sovRepository(uint64(l))
	}
	if m.NoCache {
		n += 2
	}
	l = len(m.AppLabelKey)
	if l > 0 {
		n += 1 + l + sovRepository(uint64(l))
	}
	l = len(m.AppLabelValue)
	if l > 0 {
		n += 1 + l + sovRepository(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovRepository(uint64(l))
	}
	if m.ApplicationSource != nil {
		l = m.ApplicationSource.Size()
		n += 1 + l + sovRepository(uint64(l))
	}
	if len(m.Repos) > 0 {
		for _, e := range m.Repos {
			l = e.Size()
			n += 1 + l + sovRepository(uint64(l))
		}
	}
	if len(m.Plugins) > 0 {
		for _, e := range m.Plugins {
			l = e.Size()
			n += 1 + l + sovRepository(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ManifestResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Manifests) > 0 {
		for _, s := range m.Manifests {
			l = len(s)
			n += 1 + l + sovRepository(uint64(l))
		}
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovRepository(uint64(l))
	}
	l = len(m.Server)
	if l > 0 {
		n += 1 + l + sovRepository(uint64(l))
	}
	l = len(m.Revision)
	if l > 0 {
		n += 1 + l + sovRepository(uint64(l))
	}
	l = len(m.SourceType)
	if l > 0 {
		n += 1 + l + sovRepository(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListAppCfgsRequest) Size() (n int) {
	var l int
	_ = l
	if m.Repo != nil {
		l = m.Repo.Size()
		n += 1 + l + sovRepository(uint64(l))
	}
	l = len(m.Revision)
	if l > 0 {
		n += 1 + l + sovRepository(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AppCfgList) Size() (n int) {
	var l int
	_ = l
	if len(m.AppCfgs) > 0 {
		for k, v := range m.AppCfgs {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovRepository(uint64(len(k))) + 1 + len(v) + sovRepository(uint64(len(v)))
			n += mapEntrySize + 1 + sovRepository(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAppCfgRequest) Size() (n int) {
	var l int
	_ = l
	if m.Repo != nil {
		l = m.Repo.Size()
		n += 1 + l + sovRepository(uint64(l))
	}
	l = len(m.Revision)
	if l > 0 {
		n += 1 + l + sovRepository(uint64(l))
	}
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovRepository(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAppCfgResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.AppType)
	if l > 0 {
		n += 1 + l + sovRepository(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RepoServerAppDetailsQuery) Size() (n int) {
	var l int
	_ = l
	if m.Repo != nil {
		l = m.Repo.Size()
		n += 1 + l + sovRepository(uint64(l))
	}
	l = len(m.Revision)
	if l > 0 {
		n += 1 + l + sovRepository(uint64(l))
	}
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovRepository(uint64(l))
	}
	if len(m.Repos) > 0 {
		for _, e := range m.Repos {
			l = e.Size()
			n += 1 + l + sovRepository(uint64(l))
		}
	}
	if len(m.Plugins) > 0 {
		for _, e := range m.Plugins {
			l = e.Size()
			n += 1 + l + sovRepository(uint64(l))
		}
	}
	if m.Helm != nil {
		l = m.Helm.Size()
		n += 1 + l + sovRepository(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HelmAppDetailsQuery) Size() (n int) {
	var l int
	_ = l
	if len(m.ValueFiles) > 0 {
		for _, s := range m.ValueFiles {
			l = len(s)
			n += 1 + l + sovRepository(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RepoAppDetailsResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovRepository(uint64(l))
	}
	if m.Ksonnet != nil {
		l = m.Ksonnet.Size()
		n += 1 + l + sovRepository(uint64(l))
	}
	if m.Helm != nil {
		l = m.Helm.Size()
		n += 1 + l + sovRepository(uint64(l))
	}
	if m.Kustomize != nil {
		l = m.Kustomize.Size()
		n += 1 + l + sovRepository(uint64(l))
	}
	if m.Directory != nil {
		l = m.Directory.Size()
		n += 1 + l + sovRepository(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *KsonnetAppSpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRepository(uint64(l))
	}
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovRepository(uint64(l))
	}
	if len(m.Environments) > 0 {
		for k, v := range m.Environments {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovRepository(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovRepository(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovRepository(uint64(mapEntrySize))
		}
	}
	if len(m.Parameters) > 0 {
		for _, e := range m.Parameters {
			l = e.Size()
			n += 1 + l + sovRepository(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HelmAppSpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRepository(uint64(l))
	}
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovRepository(uint64(l))
	}
	if len(m.ValueFiles) > 0 {
		for _, s := range m.ValueFiles {
			l = len(s)
			n += 1 + l + sovRepository(uint64(l))
		}
	}
	if len(m.Parameters) > 0 {
		for _, e := range m.Parameters {
			l = e.Size()
			n += 1 + l + sovRepository(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *KustomizeAppSpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovRepository(uint64(l))
	}
	if len(m.ImageTags) > 0 {
		for _, e := range m.ImageTags {
			l = e.Size()
			n += 1 + l + sovRepository(uint64(l))
		}
	}
	if len(m.Images) > 0 {
		for _, s := range m.Images {
			l = len(s)
			n += 1 + l + sovRepository(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *KsonnetEnvironment) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRepository(uint64(l))
	}
	l = len(m.K8SVersion)
	if l > 0 {
		n += 1 + l + sovRepository(uint64(l))
	}
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovRepository(uint64(l))
	}
	if m.Destination != nil {
		l = m.Destination.Size()
		n += 1 + l + sovRepository(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *KsonnetEnvironmentDestination) Size() (n int) {
	var l int
	_ = l
	l = len(m.Server)
	if l > 0 {
		n += 1 + l + sovRepository(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovRepository(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DirectoryAppSpec) Size() (n int) {
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovRepository(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRepository(x uint64) (n int) {
	return sovRepository(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ManifestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ManifestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ManifestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Repo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Repo == nil {
				m.Repo = &v1alpha1.Repository{}
			}
			if err := m.Repo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Revision", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Revision = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoCache", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NoCache = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppLabelKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppLabelKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppLabelValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppLabelValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationSource", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApplicationSource == nil {
				m.ApplicationSource = &v1alpha1.ApplicationSource{}
			}
			if err := m.ApplicationSource.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Repos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Repos = append(m.Repos, &v1alpha1.Repository{})
			if err := m.Repos[len(m.Repos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plugins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Plugins = append(m.Plugins, &v1alpha1.ConfigManagementPlugin{})
			if err := m.Plugins[len(m.Plugins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ManifestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ManifestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ManifestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Manifests", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Manifests = append(m.Manifests, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Server", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Server = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Revision", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Revision = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListAppCfgsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListAppCfgsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListAppCfgsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Repo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Repo == nil {
				m.Repo = &v1alpha1.Repository{}
			}
			if err := m.Repo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Revision", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Revision = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppCfgList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppCfgList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppCfgList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppCfgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AppCfgs == nil {
				m.AppCfgs = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRepository
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRepository
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthRepository
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRepository
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthRepository
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRepository(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthRepository
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.AppCfgs[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAppCfgRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAppCfgRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAppCfgRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Repo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Repo == nil {
				m.Repo = &v1alpha1.Repository{}
			}
			if err := m.Repo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Revision", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Revision = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAppCfgResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAppCfgResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAppCfgResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RepoServerAppDetailsQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RepoServerAppDetailsQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RepoServerAppDetailsQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Repo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Repo == nil {
				m.Repo = &v1alpha1.Repository{}
			}
			if err := m.Repo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Revision", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Revision = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Repos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Repos = append(m.Repos, &v1alpha1.Repository{})
			if err := m.Repos[len(m.Repos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plugins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Plugins = append(m.Plugins, &v1alpha1.ConfigManagementPlugin{})
			if err := m.Plugins[len(m.Plugins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Helm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Helm == nil {
				m.Helm = &HelmAppDetailsQuery{}
			}
			if err := m.Helm.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HelmAppDetailsQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HelmAppDetailsQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HelmAppDetailsQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueFiles", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValueFiles = append(m.ValueFiles, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RepoAppDetailsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RepoAppDetailsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RepoAppDetailsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ksonnet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ksonnet == nil {
				m.Ksonnet = &KsonnetAppSpec{}
			}
			if err := m.Ksonnet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Helm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Helm == nil {
				m.Helm = &HelmAppSpec{}
			}
			if err := m.Helm.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kustomize", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Kustomize == nil {
				m.Kustomize = &KustomizeAppSpec{}
			}
			if err := m.Kustomize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Directory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Directory == nil {
				m.Directory = &DirectoryAppSpec{}
			}
			if err := m.Directory.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KsonnetAppSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KsonnetAppSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KsonnetAppSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Environments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Environments == nil {
				m.Environments = make(map[string]*KsonnetEnvironment)
			}
			var mapkey string
			var mapvalue *KsonnetEnvironment
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRepository
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRepository
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthRepository
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRepository
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthRepository
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthRepository
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &KsonnetEnvironment{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRepository(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthRepository
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Environments[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parameters = append(m.Parameters, &v1alpha1.KsonnetParameter{})
			if err := m.Parameters[len(m.Parameters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HelmAppSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HelmAppSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HelmAppSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueFiles", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValueFiles = append(m.ValueFiles, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parameters = append(m.Parameters, &v1alpha1.HelmParameter{})
			if err := m.Parameters[len(m.Parameters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KustomizeAppSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KustomizeAppSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KustomizeAppSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageTags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageTags = append(m.ImageTags, &v1alpha1.KustomizeImageTag{})
			if err := m.ImageTags[len(m.ImageTags)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Images", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Images = append(m.Images, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KsonnetEnvironment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KsonnetEnvironment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KsonnetEnvironment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field K8SVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.K8SVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Destination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Destination == nil {
				m.Destination = &KsonnetEnvironmentDestination{}
			}
			if err := m.Destination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KsonnetEnvironmentDestination) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KsonnetEnvironmentDestination: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KsonnetEnvironmentDestination: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Server", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Server = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DirectoryAppSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DirectoryAppSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DirectoryAppSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRepository(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRepository
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRepository
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRepository
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRepository(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRepository = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRepository   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("reposerver/repository/repository.proto", fileDescriptor_repository_e8bb89bd6498b700)
}

var fileDescriptor_repository_e8bb89bd6498b700 = []byte{
	// 1101 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x57, 0x5b, 0x6f, 0xdc, 0x44,
	0x14, 0xae, 0x77, 0x37, 0x97, 0x3d, 0x4e, 0x21, 0x19, 0xaa, 0x60, 0x96, 0x74, 0x59, 0x99, 0x8b,
	0x82, 0xa0, 0x5e, 0x65, 0x5b, 0xa4, 0x28, 0x12, 0x42, 0x21, 0x09, 0x6d, 0x49, 0x2a, 0x52, 0xa7,
	0x54, 0xe2, 0x22, 0x55, 0x13, 0x67, 0xe2, 0x75, 0x77, 0xd7, 0x33, 0x78, 0xbc, 0x2b, 0x6d, 0xff,
	0x40, 0x1f, 0xf8, 0x0d, 0xbc, 0x20, 0xf1, 0x00, 0x7f, 0x82, 0x57, 0x9e, 0x10, 0x6f, 0xf0, 0x88,
	0xf2, 0x4b, 0x90, 0x8f, 0x6f, 0x63, 0xaf, 0x13, 0x21, 0x2d, 0x55, 0x79, 0xb1, 0x66, 0xce, 0x9c,
	0xfb, 0x7c, 0xe7, 0xcc, 0x31, 0xbc, 0x17, 0x30, 0xc1, 0x25, 0x0b, 0x26, 0x2c, 0xe8, 0xe2, 0xd2,
	0x0b, 0x79, 0x30, 0x55, 0x96, 0x96, 0x08, 0x78, 0xc8, 0x09, 0xe4, 0x94, 0xd6, 0x0d, 0x97, 0xbb,
	0x1c, 0xc9, 0xdd, 0x68, 0x15, 0x73, 0xb4, 0x36, 0x5c, 0xce, 0xdd, 0x21, 0xeb, 0x52, 0xe1, 0x75,
	0xa9, 0xef, 0xf3, 0x90, 0x86, 0x1e, 0xf7, 0x65, 0x72, 0x6a, 0x0e, 0xb6, 0xa5, 0xe5, 0x71, 0x3c,
	0x75, 0x78, 0xc0, 0xba, 0x93, 0xad, 0xae, 0xcb, 0x7c, 0x16, 0xd0, 0x90, 0x9d, 0x25, 0x3c, 0xf7,
	0x5d, 0x2f, 0xec, 0x8f, 0x4f, 0x2d, 0x87, 0x8f, 0xba, 0x34, 0x40, 0x13, 0x4f, 0x71, 0x71, 0xcb,
	0x39, 0xeb, 0x8a, 0x81, 0x1b, 0x09, 0xcb, 0x2e, 0x15, 0x62, 0xe8, 0x39, 0xa8, 0xbc, 0x3b, 0xd9,
	0xa2, 0x43, 0xd1, 0xa7, 0x33, 0xaa, 0xcc, 0xdf, 0x1b, 0xf0, 0xea, 0x03, 0xea, 0x7b, 0xe7, 0x4c,
	0x86, 0x36, 0xfb, 0x6e, 0xcc, 0x64, 0x48, 0xbe, 0x82, 0x46, 0x14, 0x84, 0xa1, 0x75, 0xb4, 0x4d,
	0xbd, 0x77, 0x60, 0xe5, 0xd6, 0xac, 0xd4, 0x1a, 0x2e, 0x9e, 0x38, 0x67, 0x96, 0x18, 0xb8, 0x56,
	0x64, 0xcd, 0x52, 0xac, 0x59, 0xa9, 0x35, 0xcb, 0xce, 0x72, 0x61, 0xa3, 0x4a, 0xd2, 0x82, 0xe5,
	0x80, 0x4d, 0x3c, 0xe9, 0x71, 0xdf, 0xa8, 0x75, 0xb4, 0xcd, 0xa6, 0x9d, 0xed, 0x89, 0x01, 0x4b,
	0x3e, 0xdf, 0xa3, 0x4e, 0x9f, 0x19, 0xf5, 0x8e, 0xb6, 0xb9, 0x6c, 0xa7, 0x5b, 0xd2, 0x01, 0x9d,
	0x0a, 0x71, 0x44, 0x4f, 0xd9, 0xf0, 0x90, 0x4d, 0x8d, 0x06, 0x0a, 0xaa, 0x24, 0xf2, 0x0e, 0x5c,
	0x4f, 0xb7, 0x8f, 0xe9, 0x70, 0xcc, 0x8c, 0x05, 0xe4, 0x29, 0x12, 0xc9, 0x06, 0x34, 0x7d, 0x3a,
	0x62, 0x52, 0x50, 0x87, 0x19, 0xcb, 0xc8, 0x91, 0x13, 0xc8, 0x33, 0x58, 0x53, 0x82, 0x38, 0xe1,
	0xe3, 0xc0, 0x61, 0x06, 0x60, 0x0e, 0x8e, 0xe6, 0xc8, 0xc1, 0x6e, 0x59, 0xa7, 0x3d, 0x6b, 0x86,
	0x7c, 0x03, 0x0b, 0x88, 0x1b, 0x43, 0xef, 0xd4, 0xff, 0xbb, 0x9c, 0xc7, 0x3a, 0xc9, 0x00, 0x96,
	0xc4, 0x70, 0xec, 0x7a, 0xbe, 0x34, 0x56, 0x50, 0xfd, 0xc3, 0x39, 0xd4, 0xef, 0x71, 0xff, 0xdc,
	0x73, 0x1f, 0x50, 0x9f, 0xba, 0x6c, 0xc4, 0xfc, 0xf0, 0x18, 0x35, 0xdb, 0xa9, 0x05, 0xf3, 0x47,
	0x0d, 0x56, 0x73, 0x40, 0x49, 0xc1, 0x7d, 0x89, 0x89, 0x1f, 0x25, 0x34, 0x69, 0x68, 0x9d, 0x7a,
	0x94, 0xf8, 0x8c, 0x50, 0xbc, 0x96, 0x5a, 0xf9, 0x5a, 0xd6, 0x61, 0x31, 0x2e, 0x3b, 0x44, 0x45,
	0xd3, 0x4e, 0x76, 0x05, 0x28, 0x35, 0x4a, 0x50, 0x6a, 0x03, 0x48, 0x4c, 0xec, 0xa3, 0xa9, 0x60,
	0xc6, 0x22, 0x9e, 0x2a, 0x14, 0xf3, 0x7b, 0x0d, 0xc8, 0x91, 0x27, 0xc3, 0x5d, 0x21, 0xf6, 0xce,
	0x5d, 0xf9, 0x72, 0x81, 0x6f, 0x3e, 0xd7, 0x00, 0x62, 0x4f, 0x22, 0x9f, 0xc8, 0xc7, 0xb0, 0x44,
	0x63, 0xbf, 0x30, 0x55, 0x7a, 0xef, 0x6d, 0x4b, 0xe9, 0x32, 0x39, 0x63, 0xb2, 0x94, 0x07, 0x7e,
	0x18, 0x4c, 0xed, 0x54, 0xa6, 0xb5, 0x03, 0x2b, 0xea, 0x01, 0x59, 0x85, 0xfa, 0x80, 0x4d, 0x31,
	0xa6, 0xa6, 0x1d, 0x2d, 0xc9, 0x0d, 0x58, 0x98, 0x60, 0x91, 0xc4, 0x8e, 0xc4, 0x9b, 0x9d, 0xda,
	0xb6, 0x66, 0xfe, 0xa0, 0xc1, 0xea, 0x5d, 0x96, 0xa4, 0xe5, 0x25, 0xb7, 0x03, 0x02, 0x0d, 0x41,
	0xc3, 0x7e, 0x72, 0xeb, 0xb8, 0x36, 0x6f, 0xc1, 0x9a, 0xe2, 0x5e, 0x02, 0x2e, 0x03, 0xf3, 0x85,
	0x37, 0x1d, 0x07, 0x99, 0x6e, 0xcd, 0x9f, 0xea, 0xf0, 0x46, 0x64, 0xf3, 0x04, 0x11, 0xb3, 0x2b,
	0xc4, 0x3e, 0x0b, 0xa9, 0x37, 0x94, 0x0f, 0xc7, 0x2c, 0x98, 0xfe, 0x8f, 0xe2, 0xca, 0xcb, 0xbf,
	0xf1, 0x62, 0xcb, 0x7f, 0xe1, 0x45, 0x97, 0x3f, 0xb9, 0x0d, 0x8d, 0x3e, 0x1b, 0x8e, 0xb0, 0xe6,
	0xf4, 0xde, 0x5b, 0x2a, 0x72, 0xef, 0xb1, 0xe1, 0xa8, 0x74, 0x07, 0x36, 0x32, 0x9b, 0x1f, 0xc1,
	0x6b, 0x15, 0x87, 0x51, 0x15, 0x23, 0x34, 0x3f, 0xf3, 0x86, 0x2c, 0x6d, 0x1b, 0x0a, 0xc5, 0x7c,
	0x5e, 0x83, 0xf5, 0x28, 0xdc, 0x5c, 0x2e, 0xc3, 0x04, 0x81, 0x46, 0x98, 0x03, 0x02, 0xd7, 0xe4,
	0x0e, 0x2c, 0x0d, 0x24, 0xf7, 0x7d, 0x16, 0xe2, 0x9d, 0xe8, 0xbd, 0x96, 0xea, 0xdd, 0x61, 0x7c,
	0xb4, 0x2b, 0xc4, 0x89, 0x60, 0x8e, 0x9d, 0xb2, 0x92, 0x0f, 0x92, 0x80, 0xea, 0x28, 0xf2, 0x7a,
	0x45, 0x40, 0xc8, 0x8f, 0x4c, 0x64, 0x07, 0x9a, 0x83, 0xb1, 0x0c, 0xf9, 0xc8, 0x7b, 0xc6, 0xb0,
	0x29, 0xe9, 0xbd, 0x8d, 0x82, 0x91, 0xf4, 0x30, 0x15, 0xcb, 0xd9, 0x23, 0xd9, 0x33, 0x2f, 0x60,
	0x4e, 0xc4, 0x88, 0xcf, 0x57, 0x49, 0x76, 0x3f, 0x3d, 0xcc, 0x64, 0x33, 0x76, 0xf3, 0xaf, 0x1a,
	0xbc, 0x52, 0x0c, 0x20, 0xca, 0x40, 0xd4, 0x43, 0xd3, 0x0c, 0x44, 0xeb, 0x0c, 0x7a, 0x35, 0x05,
	0x7a, 0xc7, 0xb0, 0xc2, 0xfc, 0x89, 0x17, 0x70, 0x3f, 0xba, 0x4e, 0x69, 0xd4, 0x11, 0x22, 0x1f,
	0x5e, 0x9e, 0x1a, 0xeb, 0x40, 0x61, 0x8f, 0x7b, 0x4f, 0x41, 0x03, 0x19, 0x00, 0x08, 0x1a, 0xd0,
	0x11, 0x0b, 0x59, 0x90, 0x22, 0xfa, 0x70, 0x0e, 0xc8, 0x25, 0xe6, 0x8f, 0x53, 0x9d, 0xb6, 0xa2,
	0xbe, 0xf5, 0x04, 0xd6, 0x66, 0xfc, 0xa9, 0x68, 0x79, 0x77, 0xd4, 0x96, 0xa7, 0xf7, 0xda, 0x15,
	0xe1, 0x29, 0x6a, 0xd4, 0x96, 0xf8, 0xab, 0x06, 0xba, 0x72, 0xd1, 0xff, 0x3a, 0xaf, 0x45, 0xf0,
	0xd6, 0xcb, 0xe0, 0x25, 0xfd, 0x8a, 0x2c, 0xdd, 0x9b, 0x23, 0x4b, 0x91, 0x8f, 0x95, 0x29, 0x32,
	0x7f, 0xd1, 0x60, 0xb5, 0x0c, 0xbc, 0xcc, 0x65, 0x4d, 0x71, 0xf9, 0x29, 0x34, 0xbd, 0x11, 0x75,
	0xd9, 0x23, 0xea, 0x4a, 0xa3, 0x86, 0x1e, 0xcd, 0x33, 0xf8, 0x64, 0x36, 0xef, 0x27, 0x4a, 0xed,
	0x5c, 0x7d, 0xf4, 0xaa, 0xe3, 0x26, 0x4d, 0x4d, 0xb2, 0x33, 0x7f, 0xd6, 0x80, 0xcc, 0x5e, 0x48,
	0x65, 0xd6, 0xdb, 0x00, 0x83, 0x6d, 0xf9, 0x98, 0x05, 0x4a, 0x9b, 0x55, 0x28, 0x95, 0x8d, 0xf6,
	0x10, 0xf4, 0x33, 0x26, 0x43, 0xcf, 0x47, 0x5f, 0x93, 0x12, 0x7d, 0xff, 0x6a, 0x34, 0xec, 0xe7,
	0x02, 0xb6, 0x2a, 0x6d, 0x7e, 0x09, 0x37, 0xaf, 0xe4, 0x56, 0x46, 0x17, 0xad, 0x30, 0xba, 0x5c,
	0x39, 0xf0, 0x98, 0x04, 0x56, 0xcb, 0xb5, 0xde, 0xfb, 0xb3, 0x06, 0x6b, 0xf9, 0x4b, 0x16, 0x7d,
	0x3d, 0x87, 0x91, 0x2f, 0xa2, 0xd7, 0x3a, 0x9e, 0xe7, 0xd3, 0x91, 0x8b, 0xbc, 0xa9, 0x06, 0x53,
	0x9a, 0xec, 0x5b, 0x1b, 0xd5, 0x87, 0x71, 0xd3, 0x34, 0xaf, 0x91, 0xbb, 0xa0, 0x2b, 0x63, 0x11,
	0x29, 0x94, 0xc9, 0xec, 0xbc, 0xd4, 0x5a, 0xaf, 0x1e, 0x4c, 0xcc, 0x6b, 0xe4, 0x73, 0x68, 0x66,
	0x0f, 0x35, 0x29, 0x58, 0x2d, 0x8f, 0x17, 0xad, 0x9b, 0x97, 0x9c, 0x66, 0x4e, 0x7d, 0x0b, 0xd7,
	0x63, 0x72, 0xd2, 0xe4, 0xc9, 0xbb, 0xaa, 0xc4, 0xa5, 0xef, 0x7b, 0xcb, 0x2c, 0xb3, 0xcd, 0xbe,
	0x13, 0xe6, 0xb5, 0x4f, 0x3f, 0xf9, 0xed, 0xa2, 0xad, 0xfd, 0x71, 0xd1, 0xd6, 0xfe, 0xbe, 0x68,
	0x6b, 0x5f, 0x6f, 0x5d, 0xf5, 0x67, 0x55, 0xf9, 0x07, 0x78, 0xba, 0x88, 0x3f, 0x52, 0xb7, 0xff,
	0x09, 0x00, 0x00, 0xff, 0xff, 0x56, 0x5f, 0xbe, 0x2f, 0x21, 0x0e, 0x00, 0x00,
}
