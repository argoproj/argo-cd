syntax = "proto3";
option go_package = "github.com/argoproj/argo-cd/reposerver/repository";

package repository;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "k8s.io/api/core/v1/generated.proto";
import "github.com/argoproj/argo-cd/pkg/apis/application/v1alpha1/generated.proto";

// ManifestRequest is a query for manifest generation.
message ManifestRequest {
    github.com.argoproj.argo_cd.pkg.apis.application.v1alpha1.Repository repo = 1;
    string revision = 2;
    string path = 3;
    string environment = 4;
    string appLabel = 5;
    repeated github.com.argoproj.argo_cd.pkg.apis.application.v1alpha1.ComponentParameter componentParameterOverrides = 6;
}

message ManifestResponse {
    repeated string manifests = 1;
    string namespace = 2;
    string server = 3;
    string revision = 4;
    repeated github.com.argoproj.argo_cd.pkg.apis.application.v1alpha1.ComponentParameter params = 5;
}

// ListDirRequest requests a repository directory structure
message ListDirRequest {
    github.com.argoproj.argo_cd.pkg.apis.application.v1alpha1.Repository repo = 1;
    string revision = 2;
    string path = 3;
}

// FileList returns the contents of the repo of a ListDir request
message FileList {
    repeated string items = 1;
}

// GetFileRequest return
message GetFileRequest {
    github.com.argoproj.argo_cd.pkg.apis.application.v1alpha1.Repository repo = 1;
    string revision = 2;
    string path = 3;
}


// GetFileResponse returns the contents of the file of a GetFile request
message GetFileResponse {
    bytes data = 1;
}

// ManifestService
service RepositoryService {

    // Generate manifest for application in specified repo name and revision
    rpc GenerateManifest(ManifestRequest) returns (ManifestResponse) {
    }

    // ListDir returns the file contents at the specified repo and path
    rpc ListDir(ListDirRequest) returns (FileList) {
    }

    // GetFile returns the file contents at the specified repo and path
    rpc GetFile(GetFileRequest) returns (GetFileResponse) {
    }
    
}
