syntax = "proto3";
option go_package = "github.com/argoproj/argo-cd/reposerver/apiclient";

package repository;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "k8s.io/api/core/v1/generated.proto";
import "github.com/argoproj/argo-cd/pkg/apis/application/v1alpha1/generated.proto";

// ManifestRequest is a query for manifest generation.
message ManifestRequest {
    github.com.argoproj.argo_cd.pkg.apis.application.v1alpha1.Repository repo = 1;
    string revision = 2;
    bool noCache = 3;
    string appLabelKey = 4;
    string appLabelValue = 5;
    string namespace = 8;
    github.com.argoproj.argo_cd.pkg.apis.application.v1alpha1.ApplicationSource applicationSource = 10;
    repeated github.com.argoproj.argo_cd.pkg.apis.application.v1alpha1.HelmRepository helmRepos = 11;
    repeated github.com.argoproj.argo_cd.pkg.apis.application.v1alpha1.ConfigManagementPlugin plugins = 12;
    github.com.argoproj.argo_cd.pkg.apis.application.v1alpha1.KustomizeOptions kustomizeOptions = 13;
}

message ManifestResponse {
    repeated string manifests = 1;
    string namespace = 2;
    string server = 3;
    string revision = 4;
    string sourceType = 6;
}

// ListDirRequest requests a repository directory structure
message ListDirRequest {
    github.com.argoproj.argo_cd.pkg.apis.application.v1alpha1.Repository repo = 1;
    string revision = 2;
    string path = 3;
}

// FileList returns the contents of the repo of a ListDir request
message FileList {
    repeated string items = 1;
}

// GetFileRequest return
message GetFileRequest {
    github.com.argoproj.argo_cd.pkg.apis.application.v1alpha1.Repository repo = 1;
    string revision = 2;
    string path = 3;
}


// GetFileResponse returns the contents of the file of a GetFile request
message GetFileResponse {
    bytes data = 1;
}

// RepoServerAppDetailsQuery contains query information for app details request
message RepoServerAppDetailsQuery {
    github.com.argoproj.argo_cd.pkg.apis.application.v1alpha1.Repository repo = 1;
	string revision = 2;
	string path = 3;
    repeated github.com.argoproj.argo_cd.pkg.apis.application.v1alpha1.HelmRepository helmRepos = 4;
    repeated github.com.argoproj.argo_cd.pkg.apis.application.v1alpha1.ConfigManagementPlugin plugins = 5;
    HelmAppDetailsQuery helm = 6;
    KsonnetAppDetailsQuery ksonnet = 7;
    github.com.argoproj.argo_cd.pkg.apis.application.v1alpha1.KustomizeOptions kustomizeOptions = 8;
}

message HelmAppDetailsQuery {
	repeated string valueFiles = 1;
}

message KsonnetAppDetailsQuery {
    string environment = 1;
}

// RepoAppDetailsResponse application details
message RepoAppDetailsResponse {
	string type = 1;
	KsonnetAppSpec ksonnet = 2;
	HelmAppSpec helm = 3;
	KustomizeAppSpec kustomize = 4;
	DirectoryAppSpec directory = 5;
}

message RepoServerRevisionMetadataRequest {
    // the repo
    github.com.argoproj.argo_cd.pkg.apis.application.v1alpha1.Repository repo = 1;
    // the revision within the repo
    string revision = 2;
}

// KsonnetAppSpec contains Ksonnet app response
// This roughly reflects: ksonnet/ksonnet/metadata/app/schema.go
message KsonnetAppSpec {
	string name = 1;
	string path = 2;
	map<string, KsonnetEnvironment> environments = 3;
	repeated github.com.argoproj.argo_cd.pkg.apis.application.v1alpha1.KsonnetParameter parameters = 4;
}

// HelmAppSpec contains helm app name and path in source repo
message HelmAppSpec {
	string name = 1;
	string path = 2;
	repeated string valueFiles = 3;
	// the output of `helm inspect values`
	repeated github.com.argoproj.argo_cd.pkg.apis.application.v1alpha1.HelmParameter parameters = 4;
	// the contents of values.yaml
	string values = 5;
}

// KustomizeAppSpec contains kustomize app name and path in source repo
message KustomizeAppSpec {
	string path = 1;
	// images is a list of available images.
	repeated string images = 3;
}

message KsonnetEnvironment {
    // Name is the user defined name of an environment
    string name = 1;
    // KubernetesVersion is the kubernetes version the targetted cluster is running on.
    string k8sVersion = 2;
    // Path is the relative project path containing metadata for this environment.
    string path = 3;
    // Destination stores the cluster address that this environment points to.
    KsonnetEnvironmentDestination destination = 4;
}

message KsonnetEnvironmentDestination {
    // Server is the Kubernetes server that the cluster is running on.
    string server = 1;
    // Namespace is the namespace of the Kubernetes server that targets should be deployed to
    string namespace = 2;
}

// DirectoryAppSpec contains directory
message DirectoryAppSpec {

}

// ManifestService
service RepoServerService {

    // GenerateManifest generates manifest for application in specified repo name and revision
    rpc GenerateManifest(ManifestRequest) returns (ManifestResponse) {
    }

    // ListDir returns the file contents at the specified repo and path
    rpc ListDir(ListDirRequest) returns (FileList) {
    }

    // GetFile returns the file contents at the specified repo and path
    rpc GetFile(GetFileRequest) returns (GetFileResponse) {
    }

    // Generate manifest for application in specified repo name and revision
    rpc GetAppDetails(RepoServerAppDetailsQuery) returns (RepoAppDetailsResponse) {
    }

    // Get the meta-data (author, date, tags, message) for a specific revision of the repo
    rpc GetRevisionMetadata(RepoServerRevisionMetadataRequest) returns (github.com.argoproj.argo_cd.pkg.apis.application.v1alpha1.RevisionMetadata) {
    }
}
