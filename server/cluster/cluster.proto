syntax = "proto3";
option go_package = "github.com/argoproj/argo-cd/server/cluster";

// Cluster Service
//
// Cluster Service API performs CRUD actions against cluster resources 
package cluster;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "k8s.io/api/core/v1/generated.proto";
import "github.com/argoproj/argo-cd/pkg/apis/application/v1alpha1/generated.proto";


// ClusterQuery is a query for cluster resources
message ClusterQuery {
	string server = 1;
}

message ClusterResponse {}

message ClusterCreateRequest {
	github.com.argoproj.argo_cd.pkg.apis.application.v1alpha1.Cluster cluster = 1;
	bool upsert = 2;
}

message ClusterCreateFromKubeConfigRequest {
	string kubeconfig = 1;
	string context = 2;
	bool upsert = 3;
	bool inCluster = 4;
	// Optional alternative system namespace to use (defaults to "kube-system")
	string systemNamespace = 5; 
}

message ClusterUpdateRequest {
	github.com.argoproj.argo_cd.pkg.apis.application.v1alpha1.Cluster cluster = 1;
}

// ClusterService 
service ClusterService {

	// List returns list of clusters
	rpc List(ClusterQuery) returns (github.com.argoproj.argo_cd.pkg.apis.application.v1alpha1.ClusterList) {
		option (google.api.http).get = "/api/v1/clusters";
	}

	// Create creates a cluster
	rpc Create(ClusterCreateRequest) returns (github.com.argoproj.argo_cd.pkg.apis.application.v1alpha1.Cluster) {
		option (google.api.http) = {
			post: "/api/v1/clusters"
			body: "cluster"
		};
	}

	// CreateFromKubeConfig installs the argocd-manager service account into the cluster specified in the given kubeconfig and context
	rpc CreateFromKubeConfig(ClusterCreateFromKubeConfigRequest) returns (github.com.argoproj.argo_cd.pkg.apis.application.v1alpha1.Cluster) {
		option (google.api.http) = {
			post: "/api/v1/clusters-kubeconfig"
			body: "*"
		};
	}
	
	// Get returns a cluster by server address
	rpc Get(ClusterQuery) returns (github.com.argoproj.argo_cd.pkg.apis.application.v1alpha1.Cluster) {
		option (google.api.http).get = "/api/v1/clusters/{server}";
	}

	// Update updates a cluster
	rpc Update(ClusterUpdateRequest) returns (github.com.argoproj.argo_cd.pkg.apis.application.v1alpha1.Cluster) {
		option (google.api.http) = {
			put: "/api/v1/clusters/{cluster.server}"
			body: "cluster"
		};
	}

	// Delete deletes a cluster
	rpc Delete(ClusterQuery) returns (ClusterResponse) {
		option (google.api.http).delete = "/api/v1/clusters/{server}";
	}

}
