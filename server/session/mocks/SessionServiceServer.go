// Code generated by mockery v1.0.0
package mocks

import session "github.com/argoproj/argo-cd/server/session"
import context "context"
import mock "github.com/stretchr/testify/mock"
import v1 "k8s.io/api/core/v1"
import v1alpha1 "github.com/argoproj/argo-cd/pkg/apis/application/v1alpha1"

// SessionServiceServer is an autogenerated mock type for the SessionServiceServer type
type SessionServiceServer struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *SessionServiceServer) Create(_a0 context.Context, _a1 *v1alpha1.Session) (*v1alpha1.Session, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v1alpha1.Session
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.Session) *v1alpha1.Session); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.Session)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v1alpha1.Session) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: _a0, _a1
func (_m *SessionServiceServer) Delete(_a0 context.Context, _a1 *session.SessionQuery) (*session.SessionResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *session.SessionResponse
	if rf, ok := ret.Get(0).(func(context.Context, *session.SessionQuery) *session.SessionResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*session.SessionResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *session.SessionQuery) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: _a0, _a1
func (_m *SessionServiceServer) Get(_a0 context.Context, _a1 *session.SessionQuery) (*v1alpha1.Session, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v1alpha1.Session
	if rf, ok := ret.Get(0).(func(context.Context, *session.SessionQuery) *v1alpha1.Session); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.Session)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *session.SessionQuery) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: _a0, _a1
func (_m *SessionServiceServer) List(_a0 context.Context, _a1 *session.SessionQuery) (*v1alpha1.SessionList, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v1alpha1.SessionList
	if rf, ok := ret.Get(0).(func(context.Context, *session.SessionQuery) *v1alpha1.SessionList); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.SessionList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *session.SessionQuery) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPods provides a mock function with given fields: _a0, _a1
func (_m *SessionServiceServer) ListPods(_a0 context.Context, _a1 *session.SessionQuery) (*v1.PodList, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v1.PodList
	if rf, ok := ret.Get(0).(func(context.Context, *session.SessionQuery) *v1.PodList); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.PodList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *session.SessionQuery) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0, _a1
func (_m *SessionServiceServer) Update(_a0 context.Context, _a1 *v1alpha1.Session) (*v1alpha1.Session, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v1alpha1.Session
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.Session) *v1alpha1.Session); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.Session)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v1alpha1.Session) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateREST provides a mock function with given fields: _a0, _a1
func (_m *SessionServiceServer) UpdateREST(_a0 context.Context, _a1 *session.SessionUpdateRequest) (*v1alpha1.Session, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v1alpha1.Session
	if rf, ok := ret.Get(0).(func(context.Context, *session.SessionUpdateRequest) *v1alpha1.Session); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.Session)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *session.SessionUpdateRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
