syntax = "proto3";
option go_package = "github.com/argoproj/argo-cd/server/repository";

// Repository Service
//
// Repository Service API performs CRUD actions against repository resources 
package configmap;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "k8s.io/api/core/v1/generated.proto";
import "github.com/argoproj/argo-cd/pkg/apis/application/v1alpha1/generated.proto";


// ConfigMapQuery is a query for ConfigMap resources
message ConfigMapQuery {
  string name = 1;
}

message ConfigMapResponse {}

message DeleteConfigMapRequest {
  string name = 1;
  string namespace = 2;
  string server = 3;
}

// ConfigMapService 
service ConfigMapService {

  // List returns list of ConfigMap
  rpc List(ConfigMapQuery) returns (github.com.argoproj.argo_cd.pkg.apis.application.v1alpha1.ConfigMapList) {
    option (google.api.http).get = "/api/v1/configmaps";
  }

  // Create creates a ConfigMap
  rpc Create(github.com.argoproj.argo_cd.pkg.apis.application.v1alpha1.ConfigMap) returns (github.com.argoproj.argo_cd.pkg.apis.application.v1alpha1.Repository) {
    option (google.api.http) = {
      post: "/api/v1/configmaps"
      body: "*"
    };
  }
	
  // Get returns a ConfigMap by name
  rpc Get(ConfigMapQuery) returns (github.com.argoproj.argo_cd.pkg.apis.application.v1alpha1.ConfigMap) {
    option (google.api.http).get = "/api/v1/configmaps/{name}";
  }

  // Update updates a ConfigMap
  rpc Update(github.com.argoproj.argo_cd.pkg.apis.application.v1alpha1.ConfigMap) returns (github.com.argoproj.argo_cd.pkg.apis.application.v1alpha1.ConfigMap) {
    option (google.api.http) = {
      put: "/api/v1/configmaps/{metadata.name}"
      body: "*"
    };
  }

  // Delete updates a ConfigMap
  rpc Delete(DeleteConfigMapRequest) returns (ConfigMapResponse) {
    option (google.api.http).delete = "/api/v1/configmaps/{name}";
  }

}
