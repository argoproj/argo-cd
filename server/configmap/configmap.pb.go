// Code generated by protoc-gen-go. DO NOT EDIT.
// source: server/configmap/configmap.proto

/*
Package configmap is a generated protocol buffer package.

ConfigMap Service

ConfigMap Service API performs CRUD actions against ConfigMap resources

It is generated from these files:
	server/configmap/configmap.proto

It has these top-level messages:
	ConfigMapQuery
	ConfigMapResponse
	DeleteConfigMapRequest
*/
package configmap

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "k8s.io/api/core/v1"
import github_com_argoproj_argo_cd_pkg_apis_application_v1alpha1 "github.com/argoproj/argo-cd/pkg/apis/application/v1alpha1"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// ConfigMapQuery is a query for ConfigMap resources
type ConfigMapQuery struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *ConfigMapQuery) Reset()                    { *m = ConfigMapQuery{} }
func (m *ConfigMapQuery) String() string            { return proto.CompactTextString(m) }
func (*ConfigMapQuery) ProtoMessage()               {}
func (*ConfigMapQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ConfigMapQuery) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ConfigMapResponse struct {
}

func (m *ConfigMapResponse) Reset()                    { *m = ConfigMapResponse{} }
func (m *ConfigMapResponse) String() string            { return proto.CompactTextString(m) }
func (*ConfigMapResponse) ProtoMessage()               {}
func (*ConfigMapResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type DeleteConfigMapRequest struct {
	Name      string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Namespace string `protobuf:"bytes,2,opt,name=namespace" json:"namespace,omitempty"`
	Server    string `protobuf:"bytes,3,opt,name=server" json:"server,omitempty"`
}

func (m *DeleteConfigMapRequest) Reset()                    { *m = DeleteConfigMapRequest{} }
func (m *DeleteConfigMapRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteConfigMapRequest) ProtoMessage()               {}
func (*DeleteConfigMapRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *DeleteConfigMapRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DeleteConfigMapRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *DeleteConfigMapRequest) GetServer() string {
	if m != nil {
		return m.Server
	}
	return ""
}

func init() {
	proto.RegisterType((*ConfigMapQuery)(nil), "configmap.ConfigMapQuery")
	proto.RegisterType((*ConfigMapResponse)(nil), "configmap.ConfigMapResponse")
	proto.RegisterType((*DeleteConfigMapRequest)(nil), "configmap.DeleteConfigMapRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ConfigMapService service

type ConfigMapServiceClient interface {
	// List returns list of ConfigMap
	List(ctx context.Context, in *ConfigMapQuery, opts ...grpc.CallOption) (*github_com_argoproj_argo_cd_pkg_apis_application_v1alpha1.ConfigMapList, error)
	// Create creates a ConfigMap
	Create(ctx context.Context, in *github_com_argoproj_argo_cd_pkg_apis_application_v1alpha1.ConfigMap, opts ...grpc.CallOption) (*github_com_argoproj_argo_cd_pkg_apis_application_v1alpha1.ConfigMap, error)
	// Get returns a ConfigMap by name
	Get(ctx context.Context, in *ConfigMapQuery, opts ...grpc.CallOption) (*github_com_argoproj_argo_cd_pkg_apis_application_v1alpha1.ConfigMap, error)
	// Update updates a ConfigMap
	Update(ctx context.Context, in *github_com_argoproj_argo_cd_pkg_apis_application_v1alpha1.ConfigMap, opts ...grpc.CallOption) (*github_com_argoproj_argo_cd_pkg_apis_application_v1alpha1.ConfigMap, error)
	// Delete updates a ConfigMap
	Delete(ctx context.Context, in *DeleteConfigMapRequest, opts ...grpc.CallOption) (*ConfigMapResponse, error)
}

type configMapServiceClient struct {
	cc *grpc.ClientConn
}

func NewConfigMapServiceClient(cc *grpc.ClientConn) ConfigMapServiceClient {
	return &configMapServiceClient{cc}
}

func (c *configMapServiceClient) List(ctx context.Context, in *ConfigMapQuery, opts ...grpc.CallOption) (*github_com_argoproj_argo_cd_pkg_apis_application_v1alpha1.ConfigMapList, error) {
	out := new(github_com_argoproj_argo_cd_pkg_apis_application_v1alpha1.ConfigMapList)
	err := grpc.Invoke(ctx, "/configmap.ConfigMapService/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configMapServiceClient) Create(ctx context.Context, in *github_com_argoproj_argo_cd_pkg_apis_application_v1alpha1.ConfigMap, opts ...grpc.CallOption) (*github_com_argoproj_argo_cd_pkg_apis_application_v1alpha1.ConfigMap, error) {
	out := new(github_com_argoproj_argo_cd_pkg_apis_application_v1alpha1.ConfigMap)
	err := grpc.Invoke(ctx, "/configmap.ConfigMapService/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configMapServiceClient) Get(ctx context.Context, in *ConfigMapQuery, opts ...grpc.CallOption) (*github_com_argoproj_argo_cd_pkg_apis_application_v1alpha1.ConfigMap, error) {
	out := new(github_com_argoproj_argo_cd_pkg_apis_application_v1alpha1.ConfigMap)
	err := grpc.Invoke(ctx, "/configmap.ConfigMapService/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configMapServiceClient) Update(ctx context.Context, in *github_com_argoproj_argo_cd_pkg_apis_application_v1alpha1.ConfigMap, opts ...grpc.CallOption) (*github_com_argoproj_argo_cd_pkg_apis_application_v1alpha1.ConfigMap, error) {
	out := new(github_com_argoproj_argo_cd_pkg_apis_application_v1alpha1.ConfigMap)
	err := grpc.Invoke(ctx, "/configmap.ConfigMapService/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configMapServiceClient) Delete(ctx context.Context, in *DeleteConfigMapRequest, opts ...grpc.CallOption) (*ConfigMapResponse, error) {
	out := new(ConfigMapResponse)
	err := grpc.Invoke(ctx, "/configmap.ConfigMapService/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ConfigMapService service

type ConfigMapServiceServer interface {
	// List returns list of ConfigMap
	List(context.Context, *ConfigMapQuery) (*github_com_argoproj_argo_cd_pkg_apis_application_v1alpha1.ConfigMapList, error)
	// Create creates a ConfigMap
	Create(context.Context, *github_com_argoproj_argo_cd_pkg_apis_application_v1alpha1.ConfigMap) (*github_com_argoproj_argo_cd_pkg_apis_application_v1alpha1.ConfigMap, error)
	// Get returns a ConfigMap by name
	Get(context.Context, *ConfigMapQuery) (*github_com_argoproj_argo_cd_pkg_apis_application_v1alpha1.ConfigMap, error)
	// Update updates a ConfigMap
	Update(context.Context, *github_com_argoproj_argo_cd_pkg_apis_application_v1alpha1.ConfigMap) (*github_com_argoproj_argo_cd_pkg_apis_application_v1alpha1.ConfigMap, error)
	// Delete updates a ConfigMap
	Delete(context.Context, *DeleteConfigMapRequest) (*ConfigMapResponse, error)
}

func RegisterConfigMapServiceServer(s *grpc.Server, srv ConfigMapServiceServer) {
	s.RegisterService(&_ConfigMapService_serviceDesc, srv)
}

func _ConfigMapService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigMapQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigMapServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configmap.ConfigMapService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigMapServiceServer).List(ctx, req.(*ConfigMapQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigMapService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(github_com_argoproj_argo_cd_pkg_apis_application_v1alpha1.ConfigMap)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigMapServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configmap.ConfigMapService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigMapServiceServer).Create(ctx, req.(*github_com_argoproj_argo_cd_pkg_apis_application_v1alpha1.ConfigMap))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigMapService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigMapQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigMapServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configmap.ConfigMapService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigMapServiceServer).Get(ctx, req.(*ConfigMapQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigMapService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(github_com_argoproj_argo_cd_pkg_apis_application_v1alpha1.ConfigMap)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigMapServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configmap.ConfigMapService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigMapServiceServer).Update(ctx, req.(*github_com_argoproj_argo_cd_pkg_apis_application_v1alpha1.ConfigMap))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigMapService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConfigMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigMapServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configmap.ConfigMapService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigMapServiceServer).Delete(ctx, req.(*DeleteConfigMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ConfigMapService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "configmap.ConfigMapService",
	HandlerType: (*ConfigMapServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _ConfigMapService_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _ConfigMapService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ConfigMapService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ConfigMapService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ConfigMapService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server/configmap/configmap.proto",
}

func init() { proto.RegisterFile("server/configmap/configmap.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 456 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x94, 0xc1, 0x6e, 0x13, 0x31,
	0x10, 0x86, 0xb5, 0x6d, 0xb5, 0x52, 0x7c, 0x40, 0x60, 0xaa, 0x92, 0x2e, 0x41, 0x6a, 0x57, 0x48,
	0xa0, 0x8a, 0xda, 0x0a, 0x5c, 0x10, 0x47, 0x5a, 0x09, 0x90, 0xe0, 0x40, 0x11, 0x17, 0x2e, 0x68,
	0xe2, 0x1d, 0x5c, 0x93, 0xcd, 0xda, 0xd8, 0xce, 0x4a, 0x08, 0x71, 0xe1, 0x82, 0xb8, 0xc2, 0xa3,
	0xf0, 0x08, 0x3c, 0x02, 0xaf, 0xc0, 0x83, 0xa0, 0x9d, 0xa4, 0xbb, 0x81, 0x2e, 0x3d, 0xe5, 0xc0,
	0x29, 0x13, 0xcf, 0xec, 0x3f, 0xbf, 0xbf, 0xd1, 0x98, 0xed, 0x05, 0xf4, 0x35, 0x7a, 0xa9, 0x6c,
	0xf5, 0xc6, 0xe8, 0x19, 0xb8, 0x2e, 0x12, 0xce, 0xdb, 0x68, 0xf9, 0xa0, 0x3d, 0xc8, 0xb6, 0xb5,
	0xd5, 0x96, 0x4e, 0x65, 0x13, 0x2d, 0x0a, 0xb2, 0x91, 0xb6, 0x56, 0x97, 0x28, 0xc1, 0x19, 0x09,
	0x55, 0x65, 0x23, 0x44, 0x63, 0xab, 0xb0, 0xcc, 0xe6, 0xd3, 0xfb, 0x41, 0x18, 0x4b, 0x59, 0x65,
	0x3d, 0xca, 0x7a, 0x2c, 0x35, 0x56, 0xe8, 0x21, 0x62, 0xb1, 0xac, 0x79, 0xa2, 0x4d, 0x3c, 0x9d,
	0x4f, 0x84, 0xb2, 0x33, 0x09, 0x9e, 0x5a, 0xbc, 0xa5, 0xe0, 0x50, 0x15, 0xd2, 0x4d, 0x75, 0xf3,
	0x71, 0x90, 0xe0, 0x5c, 0x69, 0x14, 0x89, 0xcb, 0x7a, 0x0c, 0xa5, 0x3b, 0x85, 0x73, 0x52, 0xf9,
	0x4d, 0x76, 0xe9, 0x88, 0xfc, 0x3e, 0x03, 0xf7, 0x7c, 0x8e, 0xfe, 0x3d, 0xe7, 0x6c, 0xab, 0x82,
	0x19, 0x0e, 0x93, 0xbd, 0xe4, 0xf6, 0xe0, 0x84, 0xe2, 0xfc, 0x2a, 0xbb, 0xd2, 0x56, 0x9d, 0x60,
	0x70, 0xb6, 0x0a, 0x98, 0x4f, 0xd8, 0xce, 0x31, 0x96, 0x18, 0x71, 0x25, 0xf5, 0x6e, 0x8e, 0x21,
	0xf6, 0x49, 0xf0, 0x11, 0x1b, 0x34, 0xbf, 0xc1, 0x81, 0xc2, 0xe1, 0x06, 0x25, 0xba, 0x03, 0xbe,
	0xc3, 0xd2, 0x05, 0xd8, 0xe1, 0x26, 0xa5, 0x96, 0xff, 0xee, 0x7e, 0x4d, 0xd9, 0xe5, 0x56, 0xfe,
	0x05, 0xfa, 0xda, 0x28, 0xe4, 0x9f, 0x13, 0xb6, 0xf5, 0xd4, 0x84, 0xc8, 0x77, 0x45, 0x07, 0xff,
	0xcf, 0x5b, 0x64, 0x8f, 0x45, 0xc7, 0x48, 0x9c, 0x31, 0xa2, 0xe0, 0xb5, 0x2a, 0x84, 0x9b, 0x6a,
	0xd1, 0x30, 0x12, 0x2b, 0x8c, 0xc4, 0x19, 0xa3, 0x4e, 0xaa, 0x69, 0x92, 0x67, 0x9f, 0x7e, 0xfe,
	0xfa, 0xb6, 0xb1, 0xcd, 0x39, 0x8d, 0xa4, 0x1e, 0x77, 0x03, 0x0f, 0xfc, 0x7b, 0xc2, 0xd2, 0x23,
	0x8f, 0x10, 0x91, 0x1f, 0xaf, 0xa3, 0x61, 0xb6, 0x16, 0x95, 0xfc, 0x06, 0x59, 0xbe, 0x96, 0xf7,
	0x58, 0x7e, 0x90, 0x1c, 0xf0, 0x2f, 0x09, 0xdb, 0x7c, 0x84, 0x17, 0xe2, 0x5b, 0x8f, 0x8f, 0x7d,
	0xf2, 0x71, 0x9d, 0xef, 0x9e, 0xf7, 0x21, 0x3f, 0x34, 0xc3, 0xff, 0xc8, 0x7f, 0x24, 0x2c, 0x7d,
	0xe9, 0x8a, 0xff, 0x8d, 0xe0, 0x21, 0x39, 0xbf, 0x95, 0xe5, 0x7d, 0xce, 0x67, 0x18, 0xa1, 0x80,
	0x08, 0x82, 0xae, 0xd0, 0x10, 0x2d, 0x59, 0xba, 0x58, 0x05, 0xbe, 0xbf, 0xc2, 0xb4, 0x7f, 0x3b,
	0xb2, 0x51, 0x1f, 0xf6, 0x76, 0xab, 0x96, 0xcc, 0x0e, 0xfe, 0xcd, 0xec, 0xa1, 0x78, 0x75, 0xe7,
	0xa2, 0x07, 0xe0, 0xef, 0x17, 0x6a, 0x92, 0xd2, 0xaa, 0xdf, 0xfb, 0x1d, 0x00, 0x00, 0xff, 0xff,
	0x26, 0x60, 0x63, 0x0d, 0xbc, 0x04, 0x00, 0x00,
}
