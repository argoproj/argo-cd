// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	settings "github.com/argoproj/argo-cd/v3/util/settings"
	mock "github.com/stretchr/testify/mock"
)

// SettingsGetter is an autogenerated mock type for the SettingsGetter type
type SettingsGetter struct {
	mock.Mock
}

type SettingsGetter_Expecter struct {
	mock *mock.Mock
}

func (_m *SettingsGetter) EXPECT() *SettingsGetter_Expecter {
	return &SettingsGetter_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with no fields
func (_m *SettingsGetter) Get() (*settings.ArgoCDSettings, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *settings.ArgoCDSettings
	var r1 error
	if rf, ok := ret.Get(0).(func() (*settings.ArgoCDSettings, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *settings.ArgoCDSettings); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*settings.ArgoCDSettings)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SettingsGetter_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type SettingsGetter_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
func (_e *SettingsGetter_Expecter) Get() *SettingsGetter_Get_Call {
	return &SettingsGetter_Get_Call{Call: _e.mock.On("Get")}
}

func (_c *SettingsGetter_Get_Call) Run(run func()) *SettingsGetter_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SettingsGetter_Get_Call) Return(_a0 *settings.ArgoCDSettings, _a1 error) *SettingsGetter_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SettingsGetter_Get_Call) RunAndReturn(run func() (*settings.ArgoCDSettings, error)) *SettingsGetter_Get_Call {
	_c.Call.Return(run)
	return _c
}

// NewSettingsGetter creates a new instance of SettingsGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSettingsGetter(t interface {
	mock.TestingT
	Cleanup(func())
}) *SettingsGetter {
	mock := &SettingsGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
