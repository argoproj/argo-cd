// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewUserGetter creates a new instance of UserGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserGetter(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserGetter {
	mock := &UserGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// UserGetter is an autogenerated mock type for the UserGetter type
type UserGetter struct {
	mock.Mock
}

type UserGetter_Expecter struct {
	mock *mock.Mock
}

func (_m *UserGetter) EXPECT() *UserGetter_Expecter {
	return &UserGetter_Expecter{mock: &_m.Mock}
}

// GetGroups provides a mock function for the type UserGetter
func (_mock *UserGetter) GetGroups(ctx context.Context) []string {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetGroups")
	}

	var r0 []string
	if returnFunc, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	return r0
}

// UserGetter_GetGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroups'
type UserGetter_GetGroups_Call struct {
	*mock.Call
}

// GetGroups is a helper method to define mock.On call
//   - ctx context.Context
func (_e *UserGetter_Expecter) GetGroups(ctx interface{}) *UserGetter_GetGroups_Call {
	return &UserGetter_GetGroups_Call{Call: _e.mock.On("GetGroups", ctx)}
}

func (_c *UserGetter_GetGroups_Call) Run(run func(ctx context.Context)) *UserGetter_GetGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *UserGetter_GetGroups_Call) Return(strings []string) *UserGetter_GetGroups_Call {
	_c.Call.Return(strings)
	return _c
}

func (_c *UserGetter_GetGroups_Call) RunAndReturn(run func(ctx context.Context) []string) *UserGetter_GetGroups_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserId provides a mock function for the type UserGetter
func (_mock *UserGetter) GetUserId(ctx context.Context) string {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetUserId")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// UserGetter_GetUserId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserId'
type UserGetter_GetUserId_Call struct {
	*mock.Call
}

// GetUserId is a helper method to define mock.On call
//   - ctx context.Context
func (_e *UserGetter_Expecter) GetUserId(ctx interface{}) *UserGetter_GetUserId_Call {
	return &UserGetter_GetUserId_Call{Call: _e.mock.On("GetUserId", ctx)}
}

func (_c *UserGetter_GetUserId_Call) Run(run func(ctx context.Context)) *UserGetter_GetUserId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *UserGetter_GetUserId_Call) Return(s string) *UserGetter_GetUserId_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *UserGetter_GetUserId_Call) RunAndReturn(run func(ctx context.Context) string) *UserGetter_GetUserId_Call {
	_c.Call.Return(run)
	return _c
}

// GetUsername provides a mock function for the type UserGetter
func (_mock *UserGetter) GetUsername(ctx context.Context) string {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetUsername")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// UserGetter_GetUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsername'
type UserGetter_GetUsername_Call struct {
	*mock.Call
}

// GetUsername is a helper method to define mock.On call
//   - ctx context.Context
func (_e *UserGetter_Expecter) GetUsername(ctx interface{}) *UserGetter_GetUsername_Call {
	return &UserGetter_GetUsername_Call{Call: _e.mock.On("GetUsername", ctx)}
}

func (_c *UserGetter_GetUsername_Call) Run(run func(ctx context.Context)) *UserGetter_GetUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *UserGetter_GetUsername_Call) Return(s string) *UserGetter_GetUsername_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *UserGetter_GetUsername_Call) RunAndReturn(run func(ctx context.Context) string) *UserGetter_GetUsername_Call {
	_c.Call.Return(run)
	return _c
}
