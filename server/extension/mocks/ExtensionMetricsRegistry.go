// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"time"

	mock "github.com/stretchr/testify/mock"
)

// NewExtensionMetricsRegistry creates a new instance of ExtensionMetricsRegistry. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExtensionMetricsRegistry(t interface {
	mock.TestingT
	Cleanup(func())
}) *ExtensionMetricsRegistry {
	mock := &ExtensionMetricsRegistry{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ExtensionMetricsRegistry is an autogenerated mock type for the ExtensionMetricsRegistry type
type ExtensionMetricsRegistry struct {
	mock.Mock
}

type ExtensionMetricsRegistry_Expecter struct {
	mock *mock.Mock
}

func (_m *ExtensionMetricsRegistry) EXPECT() *ExtensionMetricsRegistry_Expecter {
	return &ExtensionMetricsRegistry_Expecter{mock: &_m.Mock}
}

// IncExtensionRequestCounter provides a mock function for the type ExtensionMetricsRegistry
func (_mock *ExtensionMetricsRegistry) IncExtensionRequestCounter(extension string, status int) {
	_mock.Called(extension, status)
	return
}

// ExtensionMetricsRegistry_IncExtensionRequestCounter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncExtensionRequestCounter'
type ExtensionMetricsRegistry_IncExtensionRequestCounter_Call struct {
	*mock.Call
}

// IncExtensionRequestCounter is a helper method to define mock.On call
//   - extension
//   - status
func (_e *ExtensionMetricsRegistry_Expecter) IncExtensionRequestCounter(extension interface{}, status interface{}) *ExtensionMetricsRegistry_IncExtensionRequestCounter_Call {
	return &ExtensionMetricsRegistry_IncExtensionRequestCounter_Call{Call: _e.mock.On("IncExtensionRequestCounter", extension, status)}
}

func (_c *ExtensionMetricsRegistry_IncExtensionRequestCounter_Call) Run(run func(extension string, status int)) *ExtensionMetricsRegistry_IncExtensionRequestCounter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int))
	})
	return _c
}

func (_c *ExtensionMetricsRegistry_IncExtensionRequestCounter_Call) Return() *ExtensionMetricsRegistry_IncExtensionRequestCounter_Call {
	_c.Call.Return()
	return _c
}

func (_c *ExtensionMetricsRegistry_IncExtensionRequestCounter_Call) RunAndReturn(run func(extension string, status int)) *ExtensionMetricsRegistry_IncExtensionRequestCounter_Call {
	_c.Run(run)
	return _c
}

// ObserveExtensionRequestDuration provides a mock function for the type ExtensionMetricsRegistry
func (_mock *ExtensionMetricsRegistry) ObserveExtensionRequestDuration(extension string, duration time.Duration) {
	_mock.Called(extension, duration)
	return
}

// ExtensionMetricsRegistry_ObserveExtensionRequestDuration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ObserveExtensionRequestDuration'
type ExtensionMetricsRegistry_ObserveExtensionRequestDuration_Call struct {
	*mock.Call
}

// ObserveExtensionRequestDuration is a helper method to define mock.On call
//   - extension
//   - duration
func (_e *ExtensionMetricsRegistry_Expecter) ObserveExtensionRequestDuration(extension interface{}, duration interface{}) *ExtensionMetricsRegistry_ObserveExtensionRequestDuration_Call {
	return &ExtensionMetricsRegistry_ObserveExtensionRequestDuration_Call{Call: _e.mock.On("ObserveExtensionRequestDuration", extension, duration)}
}

func (_c *ExtensionMetricsRegistry_ObserveExtensionRequestDuration_Call) Run(run func(extension string, duration time.Duration)) *ExtensionMetricsRegistry_ObserveExtensionRequestDuration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(time.Duration))
	})
	return _c
}

func (_c *ExtensionMetricsRegistry_ObserveExtensionRequestDuration_Call) Return() *ExtensionMetricsRegistry_ObserveExtensionRequestDuration_Call {
	_c.Call.Return()
	return _c
}

func (_c *ExtensionMetricsRegistry_ObserveExtensionRequestDuration_Call) RunAndReturn(run func(extension string, duration time.Duration)) *ExtensionMetricsRegistry_ObserveExtensionRequestDuration_Call {
	_c.Run(run)
	return _c
}
