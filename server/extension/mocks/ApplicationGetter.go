// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	v1alpha1 "github.com/argoproj/argo-cd/v2/pkg/apis/application/v1alpha1"
)

// ApplicationGetter is an autogenerated mock type for the ApplicationGetter type
type ApplicationGetter struct {
	mock.Mock
}

// Get provides a mock function with given fields: ctx, ns, name
func (_m *ApplicationGetter) Get(ctx context.Context, ns string, name string) (*v1alpha1.Application, error) {
	ret := _m.Called(ctx, ns, name)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *v1alpha1.Application
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*v1alpha1.Application, error)); ok {
		return rf(ctx, ns, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *v1alpha1.Application); ok {
		r0 = rf(ctx, ns, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.Application)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, ns, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewApplicationGetter creates a new instance of ApplicationGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewApplicationGetter(t interface {
	mock.TestingT
	Cleanup(func())
}) *ApplicationGetter {
	mock := &ApplicationGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
