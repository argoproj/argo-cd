syntax = "proto3";
option go_package = "github.com/argoproj/argo-cd/server/settings";

// Settings Service
//
// Settings Service API retrieves Argo CD settings
package cluster;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "github.com/argoproj/argo-cd/pkg/apis/application/v1alpha1/generated.proto";

// SettingsQuery is a query for Argo CD settings
message SettingsQuery {
}

message Settings {
    string url = 1 [(gogoproto.customname) = "URL"];
    DexConfig dexConfig = 2;
    OIDCConfig oidcConfig = 3 [(gogoproto.customname) = "OIDCConfig"];
    string appLabelKey = 4;
    map<string, github.com.argoproj.argo_cd.pkg.apis.application.v1alpha1.ResourceOverride> resourceOverrides = 5;
}

message DexConfig {
    repeated Connector connectors = 1;
}

message Connector {
    string name = 1;
    string type = 2;
}

message OIDCConfig {
    string name = 1;
    string issuer = 2;
    string clientID = 3 [(gogoproto.customname) = "ClientID"];
    string cliClientID = 4 [(gogoproto.customname) = "CLIClientID"];
    repeated string scopes = 5;
}

// SettingsService
service SettingsService {

    // Get returns Argo CD settings
    rpc Get(SettingsQuery) returns (Settings) {
		option (google.api.http).get = "/api/v1/settings";
	}

}
