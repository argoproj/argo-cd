syntax = "proto3";
option go_package = "github.com/argoproj/argo-cd/server/repository";

// Repository Service
//
// Repository Service API performs CRUD actions against repository resources 
package repository;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "k8s.io/api/core/v1/generated.proto";
import "github.com/argoproj/argo-cd/pkg/apis/application/v1alpha1/generated.proto";

// RepoAppsQuery is a query for Repository apps
message RepoAppsQuery {
	string repo = 1;
	string revision = 2;
}

// RepoAppsResponse contains applications of specified repository
message RepoAppsResponse {
	repeated KsonnetAppSpec ksonnetApps = 1;
	repeated HelmAppSpec helmApps = 2;
}

// KsonnetAppSpec contains Ksonnet app response
// This roughly reflects: ksonnet/ksonnet/metadata/app/schema.go
message KsonnetAppSpec {
	string name = 1;
	string path = 2;
	map<string, KsonnetEnvironment> environments = 3;
}

// HelmAppSpec contains helm app name and path in source repo
message HelmAppSpec {
	string name = 1;
	string path = 2;
}

message KsonnetEnvironment {
    // Name is the user defined name of an environment
    string name = 1;
    // KubernetesVersion is the kubernetes version the targetted cluster is running on.
    string k8sVersion = 2;
    // Path is the relative project path containing metadata for this environment.
    string path = 3;
    // Destination stores the cluster address that this environment points to.
    KsonnetEnvironmentDestination destination = 4;
}

message KsonnetEnvironmentDestination {
    // Server is the Kubernetes server that the cluster is running on.
    string server = 1;
    // Namespace is the namespace of the Kubernetes server that targets should be deployed to
    string namespace = 2;
}

// RepoQuery is a query for Repository resources
message RepoQuery {
	string repo = 1;
}

message RepoResponse {}

message RepoCreateRequest {
    github.com.argoproj.argo_cd.pkg.apis.application.v1alpha1.Repository repo = 1;
    bool upsert = 2;
}

message RepoUpdateRequest {
    github.com.argoproj.argo_cd.pkg.apis.application.v1alpha1.Repository repo = 1;
}

// RepositoryService 
service RepositoryService {

	// List returns list of repos
	rpc List(RepoQuery) returns (github.com.argoproj.argo_cd.pkg.apis.application.v1alpha1.RepositoryList) {
		option (google.api.http).get = "/api/v1/repositories";
	}

	// ListKsonnetApps returns list of Ksonnet apps in the repo
	rpc ListApps(RepoAppsQuery) returns (RepoAppsResponse) {
		option (google.api.http).get = "/api/v1/repositories/{repo}/apps";
	}

	// Create creates a repo
	rpc Create(RepoCreateRequest) returns (github.com.argoproj.argo_cd.pkg.apis.application.v1alpha1.Repository) {
		option (google.api.http) = {
			post: "/api/v1/repositories"
			body: "repo"
		};
	}
	
	// Get returns a repo by name
	rpc Get(RepoQuery) returns (github.com.argoproj.argo_cd.pkg.apis.application.v1alpha1.Repository) {
		option (google.api.http).get = "/api/v1/repositories/{repo}";
	}

	// Update updates a repo
	rpc Update(RepoUpdateRequest) returns (github.com.argoproj.argo_cd.pkg.apis.application.v1alpha1.Repository) {
		option (google.api.http) = {
			put: "/api/v1/repositories/{repo.repo}"
			body: "repo"
		};
	}

	// Delete deletes a repo
	rpc Delete(RepoQuery) returns (RepoResponse) {
		option (google.api.http).delete = "/api/v1/repositories/{repo}";
	}

}
