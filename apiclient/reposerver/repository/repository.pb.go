// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        (unknown)
// source: apiclient/reposerver/repository/repository.proto

package repository

import (
	v1alpha1 "github.com/argoproj/argo-cd/v2/pkg/apis/application/v1alpha1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ManifestRequest is a query for manifest generation.
type ManifestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repo *v1alpha1.Repository `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
	// revision, potentially un-resolved
	Revision    string `protobuf:"bytes,2,opt,name=revision,proto3" json:"revision,omitempty"`
	NoCache     bool   `protobuf:"varint,3,opt,name=noCache,proto3" json:"noCache,omitempty"`
	AppLabelKey string `protobuf:"bytes,4,opt,name=appLabelKey,proto3" json:"appLabelKey,omitempty"`
	// Name of the application for which the request is triggered
	AppName           string                             `protobuf:"bytes,5,opt,name=appName,proto3" json:"appName,omitempty"`
	Namespace         string                             `protobuf:"bytes,8,opt,name=namespace,proto3" json:"namespace,omitempty"`
	ApplicationSource *v1alpha1.ApplicationSource        `protobuf:"bytes,10,opt,name=applicationSource,proto3" json:"applicationSource,omitempty"`
	Repos             []*v1alpha1.Repository             `protobuf:"bytes,11,rep,name=repos,proto3" json:"repos,omitempty"`
	Plugins           []*v1alpha1.ConfigManagementPlugin `protobuf:"bytes,12,rep,name=plugins,proto3" json:"plugins,omitempty"`
	KustomizeOptions  *v1alpha1.KustomizeOptions         `protobuf:"bytes,13,opt,name=kustomizeOptions,proto3" json:"kustomizeOptions,omitempty"`
	KubeVersion       string                             `protobuf:"bytes,14,opt,name=kubeVersion,proto3" json:"kubeVersion,omitempty"`
	ApiVersions       []string                           `protobuf:"bytes,15,rep,name=apiVersions,proto3" json:"apiVersions,omitempty"`
	// Request to verify the signature when generating the manifests (only for Git repositories)
	VerifySignature    bool                  `protobuf:"varint,16,opt,name=verifySignature,proto3" json:"verifySignature,omitempty"`
	HelmRepoCreds      []*v1alpha1.RepoCreds `protobuf:"bytes,17,rep,name=helmRepoCreds,proto3" json:"helmRepoCreds,omitempty"`
	NoRevisionCache    bool                  `protobuf:"varint,18,opt,name=noRevisionCache,proto3" json:"noRevisionCache,omitempty"`
	TrackingMethod     string                `protobuf:"bytes,19,opt,name=trackingMethod,proto3" json:"trackingMethod,omitempty"`
	EnabledSourceTypes map[string]bool       `protobuf:"bytes,20,rep,name=enabledSourceTypes,proto3" json:"enabledSourceTypes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	HelmOptions        *v1alpha1.HelmOptions `protobuf:"bytes,21,opt,name=helmOptions,proto3" json:"helmOptions,omitempty"`
}

func (x *ManifestRequest) Reset() {
	*x = ManifestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apiclient_reposerver_repository_repository_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManifestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManifestRequest) ProtoMessage() {}

func (x *ManifestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apiclient_reposerver_repository_repository_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManifestRequest.ProtoReflect.Descriptor instead.
func (*ManifestRequest) Descriptor() ([]byte, []int) {
	return file_apiclient_reposerver_repository_repository_proto_rawDescGZIP(), []int{0}
}

func (x *ManifestRequest) GetRepo() *v1alpha1.Repository {
	if x != nil {
		return x.Repo
	}
	return nil
}

func (x *ManifestRequest) GetRevision() string {
	if x != nil {
		return x.Revision
	}
	return ""
}

func (x *ManifestRequest) GetNoCache() bool {
	if x != nil {
		return x.NoCache
	}
	return false
}

func (x *ManifestRequest) GetAppLabelKey() string {
	if x != nil {
		return x.AppLabelKey
	}
	return ""
}

func (x *ManifestRequest) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *ManifestRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ManifestRequest) GetApplicationSource() *v1alpha1.ApplicationSource {
	if x != nil {
		return x.ApplicationSource
	}
	return nil
}

func (x *ManifestRequest) GetRepos() []*v1alpha1.Repository {
	if x != nil {
		return x.Repos
	}
	return nil
}

func (x *ManifestRequest) GetPlugins() []*v1alpha1.ConfigManagementPlugin {
	if x != nil {
		return x.Plugins
	}
	return nil
}

func (x *ManifestRequest) GetKustomizeOptions() *v1alpha1.KustomizeOptions {
	if x != nil {
		return x.KustomizeOptions
	}
	return nil
}

func (x *ManifestRequest) GetKubeVersion() string {
	if x != nil {
		return x.KubeVersion
	}
	return ""
}

func (x *ManifestRequest) GetApiVersions() []string {
	if x != nil {
		return x.ApiVersions
	}
	return nil
}

func (x *ManifestRequest) GetVerifySignature() bool {
	if x != nil {
		return x.VerifySignature
	}
	return false
}

func (x *ManifestRequest) GetHelmRepoCreds() []*v1alpha1.RepoCreds {
	if x != nil {
		return x.HelmRepoCreds
	}
	return nil
}

func (x *ManifestRequest) GetNoRevisionCache() bool {
	if x != nil {
		return x.NoRevisionCache
	}
	return false
}

func (x *ManifestRequest) GetTrackingMethod() string {
	if x != nil {
		return x.TrackingMethod
	}
	return ""
}

func (x *ManifestRequest) GetEnabledSourceTypes() map[string]bool {
	if x != nil {
		return x.EnabledSourceTypes
	}
	return nil
}

func (x *ManifestRequest) GetHelmOptions() *v1alpha1.HelmOptions {
	if x != nil {
		return x.HelmOptions
	}
	return nil
}

// TestRepositoryRequest is a query to test repository is valid or not and has valid access.
type TestRepositoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repo *v1alpha1.Repository `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
}

func (x *TestRepositoryRequest) Reset() {
	*x = TestRepositoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apiclient_reposerver_repository_repository_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestRepositoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestRepositoryRequest) ProtoMessage() {}

func (x *TestRepositoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apiclient_reposerver_repository_repository_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestRepositoryRequest.ProtoReflect.Descriptor instead.
func (*TestRepositoryRequest) Descriptor() ([]byte, []int) {
	return file_apiclient_reposerver_repository_repository_proto_rawDescGZIP(), []int{1}
}

func (x *TestRepositoryRequest) GetRepo() *v1alpha1.Repository {
	if x != nil {
		return x.Repo
	}
	return nil
}

// TestRepositoryResponse represents the TestRepository response
type TestRepositoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Request to verify the signature when generating the manifests (only for Git repositories)
	VerifiedRepository bool `protobuf:"varint,1,opt,name=verifiedRepository,proto3" json:"verifiedRepository,omitempty"`
}

func (x *TestRepositoryResponse) Reset() {
	*x = TestRepositoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apiclient_reposerver_repository_repository_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestRepositoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestRepositoryResponse) ProtoMessage() {}

func (x *TestRepositoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apiclient_reposerver_repository_repository_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestRepositoryResponse.ProtoReflect.Descriptor instead.
func (*TestRepositoryResponse) Descriptor() ([]byte, []int) {
	return file_apiclient_reposerver_repository_repository_proto_rawDescGZIP(), []int{2}
}

func (x *TestRepositoryResponse) GetVerifiedRepository() bool {
	if x != nil {
		return x.VerifiedRepository
	}
	return false
}

// ResolveRevisionRequest
type ResolveRevisionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repo              *v1alpha1.Repository  `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
	App               *v1alpha1.Application `protobuf:"bytes,2,opt,name=app,proto3" json:"app,omitempty"`
	AmbiguousRevision string                `protobuf:"bytes,3,opt,name=ambiguousRevision,proto3" json:"ambiguousRevision,omitempty"`
}

func (x *ResolveRevisionRequest) Reset() {
	*x = ResolveRevisionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apiclient_reposerver_repository_repository_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolveRevisionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveRevisionRequest) ProtoMessage() {}

func (x *ResolveRevisionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apiclient_reposerver_repository_repository_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveRevisionRequest.ProtoReflect.Descriptor instead.
func (*ResolveRevisionRequest) Descriptor() ([]byte, []int) {
	return file_apiclient_reposerver_repository_repository_proto_rawDescGZIP(), []int{3}
}

func (x *ResolveRevisionRequest) GetRepo() *v1alpha1.Repository {
	if x != nil {
		return x.Repo
	}
	return nil
}

func (x *ResolveRevisionRequest) GetApp() *v1alpha1.Application {
	if x != nil {
		return x.App
	}
	return nil
}

func (x *ResolveRevisionRequest) GetAmbiguousRevision() string {
	if x != nil {
		return x.AmbiguousRevision
	}
	return ""
}

// ResolveRevisionResponse
type ResolveRevisionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// returns the resolved revision
	Revision          string `protobuf:"bytes,1,opt,name=revision,proto3" json:"revision,omitempty"`
	AmbiguousRevision string `protobuf:"bytes,2,opt,name=ambiguousRevision,proto3" json:"ambiguousRevision,omitempty"`
}

func (x *ResolveRevisionResponse) Reset() {
	*x = ResolveRevisionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apiclient_reposerver_repository_repository_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolveRevisionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveRevisionResponse) ProtoMessage() {}

func (x *ResolveRevisionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apiclient_reposerver_repository_repository_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveRevisionResponse.ProtoReflect.Descriptor instead.
func (*ResolveRevisionResponse) Descriptor() ([]byte, []int) {
	return file_apiclient_reposerver_repository_repository_proto_rawDescGZIP(), []int{4}
}

func (x *ResolveRevisionResponse) GetRevision() string {
	if x != nil {
		return x.Revision
	}
	return ""
}

func (x *ResolveRevisionResponse) GetAmbiguousRevision() string {
	if x != nil {
		return x.AmbiguousRevision
	}
	return ""
}

type ManifestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Manifests []string `protobuf:"bytes,1,rep,name=manifests,proto3" json:"manifests,omitempty"`
	Namespace string   `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Server    string   `protobuf:"bytes,3,opt,name=server,proto3" json:"server,omitempty"`
	// resolved revision
	Revision   string `protobuf:"bytes,4,opt,name=revision,proto3" json:"revision,omitempty"`
	SourceType string `protobuf:"bytes,6,opt,name=sourceType,proto3" json:"sourceType,omitempty"`
	// Raw response of git verify-commit operation (always the empty string for Helm)
	VerifyResult string `protobuf:"bytes,7,opt,name=verifyResult,proto3" json:"verifyResult,omitempty"`
}

func (x *ManifestResponse) Reset() {
	*x = ManifestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apiclient_reposerver_repository_repository_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManifestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManifestResponse) ProtoMessage() {}

func (x *ManifestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apiclient_reposerver_repository_repository_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManifestResponse.ProtoReflect.Descriptor instead.
func (*ManifestResponse) Descriptor() ([]byte, []int) {
	return file_apiclient_reposerver_repository_repository_proto_rawDescGZIP(), []int{5}
}

func (x *ManifestResponse) GetManifests() []string {
	if x != nil {
		return x.Manifests
	}
	return nil
}

func (x *ManifestResponse) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ManifestResponse) GetServer() string {
	if x != nil {
		return x.Server
	}
	return ""
}

func (x *ManifestResponse) GetRevision() string {
	if x != nil {
		return x.Revision
	}
	return ""
}

func (x *ManifestResponse) GetSourceType() string {
	if x != nil {
		return x.SourceType
	}
	return ""
}

func (x *ManifestResponse) GetVerifyResult() string {
	if x != nil {
		return x.VerifyResult
	}
	return ""
}

type ListRefsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repo *v1alpha1.Repository `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
}

func (x *ListRefsRequest) Reset() {
	*x = ListRefsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apiclient_reposerver_repository_repository_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRefsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRefsRequest) ProtoMessage() {}

func (x *ListRefsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apiclient_reposerver_repository_repository_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRefsRequest.ProtoReflect.Descriptor instead.
func (*ListRefsRequest) Descriptor() ([]byte, []int) {
	return file_apiclient_reposerver_repository_repository_proto_rawDescGZIP(), []int{6}
}

func (x *ListRefsRequest) GetRepo() *v1alpha1.Repository {
	if x != nil {
		return x.Repo
	}
	return nil
}

// A subset of the repository's named refs
type Refs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Branches []string `protobuf:"bytes,1,rep,name=branches,proto3" json:"branches,omitempty"`
	Tags     []string `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *Refs) Reset() {
	*x = Refs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apiclient_reposerver_repository_repository_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Refs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Refs) ProtoMessage() {}

func (x *Refs) ProtoReflect() protoreflect.Message {
	mi := &file_apiclient_reposerver_repository_repository_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Refs.ProtoReflect.Descriptor instead.
func (*Refs) Descriptor() ([]byte, []int) {
	return file_apiclient_reposerver_repository_repository_proto_rawDescGZIP(), []int{7}
}

func (x *Refs) GetBranches() []string {
	if x != nil {
		return x.Branches
	}
	return nil
}

func (x *Refs) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

// ListAppsRequest requests a repository directory structure
type ListAppsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repo               *v1alpha1.Repository `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
	Revision           string               `protobuf:"bytes,2,opt,name=revision,proto3" json:"revision,omitempty"`
	EnabledSourceTypes map[string]bool      `protobuf:"bytes,3,rep,name=enabledSourceTypes,proto3" json:"enabledSourceTypes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *ListAppsRequest) Reset() {
	*x = ListAppsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apiclient_reposerver_repository_repository_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAppsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAppsRequest) ProtoMessage() {}

func (x *ListAppsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apiclient_reposerver_repository_repository_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAppsRequest.ProtoReflect.Descriptor instead.
func (*ListAppsRequest) Descriptor() ([]byte, []int) {
	return file_apiclient_reposerver_repository_repository_proto_rawDescGZIP(), []int{8}
}

func (x *ListAppsRequest) GetRepo() *v1alpha1.Repository {
	if x != nil {
		return x.Repo
	}
	return nil
}

func (x *ListAppsRequest) GetRevision() string {
	if x != nil {
		return x.Revision
	}
	return ""
}

func (x *ListAppsRequest) GetEnabledSourceTypes() map[string]bool {
	if x != nil {
		return x.EnabledSourceTypes
	}
	return nil
}

// AppList returns the contents of the repo of a ListApps request
type AppList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Apps map[string]string `protobuf:"bytes,1,rep,name=apps,proto3" json:"apps,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AppList) Reset() {
	*x = AppList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apiclient_reposerver_repository_repository_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppList) ProtoMessage() {}

func (x *AppList) ProtoReflect() protoreflect.Message {
	mi := &file_apiclient_reposerver_repository_repository_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppList.ProtoReflect.Descriptor instead.
func (*AppList) Descriptor() ([]byte, []int) {
	return file_apiclient_reposerver_repository_repository_proto_rawDescGZIP(), []int{9}
}

func (x *AppList) GetApps() map[string]string {
	if x != nil {
		return x.Apps
	}
	return nil
}

// RepoServerAppDetailsQuery contains query information for app details request
type RepoServerAppDetailsQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repo               *v1alpha1.Repository        `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
	Source             *v1alpha1.ApplicationSource `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	Repos              []*v1alpha1.Repository      `protobuf:"bytes,3,rep,name=repos,proto3" json:"repos,omitempty"`
	KustomizeOptions   *v1alpha1.KustomizeOptions  `protobuf:"bytes,4,opt,name=kustomizeOptions,proto3" json:"kustomizeOptions,omitempty"`
	AppName            string                      `protobuf:"bytes,5,opt,name=appName,proto3" json:"appName,omitempty"`
	NoCache            bool                        `protobuf:"varint,6,opt,name=noCache,proto3" json:"noCache,omitempty"`
	NoRevisionCache    bool                        `protobuf:"varint,7,opt,name=noRevisionCache,proto3" json:"noRevisionCache,omitempty"`
	TrackingMethod     string                      `protobuf:"bytes,8,opt,name=trackingMethod,proto3" json:"trackingMethod,omitempty"`
	EnabledSourceTypes map[string]bool             `protobuf:"bytes,9,rep,name=enabledSourceTypes,proto3" json:"enabledSourceTypes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	HelmOptions        *v1alpha1.HelmOptions       `protobuf:"bytes,10,opt,name=helmOptions,proto3" json:"helmOptions,omitempty"`
}

func (x *RepoServerAppDetailsQuery) Reset() {
	*x = RepoServerAppDetailsQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apiclient_reposerver_repository_repository_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepoServerAppDetailsQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepoServerAppDetailsQuery) ProtoMessage() {}

func (x *RepoServerAppDetailsQuery) ProtoReflect() protoreflect.Message {
	mi := &file_apiclient_reposerver_repository_repository_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepoServerAppDetailsQuery.ProtoReflect.Descriptor instead.
func (*RepoServerAppDetailsQuery) Descriptor() ([]byte, []int) {
	return file_apiclient_reposerver_repository_repository_proto_rawDescGZIP(), []int{10}
}

func (x *RepoServerAppDetailsQuery) GetRepo() *v1alpha1.Repository {
	if x != nil {
		return x.Repo
	}
	return nil
}

func (x *RepoServerAppDetailsQuery) GetSource() *v1alpha1.ApplicationSource {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *RepoServerAppDetailsQuery) GetRepos() []*v1alpha1.Repository {
	if x != nil {
		return x.Repos
	}
	return nil
}

func (x *RepoServerAppDetailsQuery) GetKustomizeOptions() *v1alpha1.KustomizeOptions {
	if x != nil {
		return x.KustomizeOptions
	}
	return nil
}

func (x *RepoServerAppDetailsQuery) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *RepoServerAppDetailsQuery) GetNoCache() bool {
	if x != nil {
		return x.NoCache
	}
	return false
}

func (x *RepoServerAppDetailsQuery) GetNoRevisionCache() bool {
	if x != nil {
		return x.NoRevisionCache
	}
	return false
}

func (x *RepoServerAppDetailsQuery) GetTrackingMethod() string {
	if x != nil {
		return x.TrackingMethod
	}
	return ""
}

func (x *RepoServerAppDetailsQuery) GetEnabledSourceTypes() map[string]bool {
	if x != nil {
		return x.EnabledSourceTypes
	}
	return nil
}

func (x *RepoServerAppDetailsQuery) GetHelmOptions() *v1alpha1.HelmOptions {
	if x != nil {
		return x.HelmOptions
	}
	return nil
}

// RepoAppDetailsResponse application details
type RepoAppDetailsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      string            `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Helm      *HelmAppSpec      `protobuf:"bytes,3,opt,name=helm,proto3" json:"helm,omitempty"`
	Kustomize *KustomizeAppSpec `protobuf:"bytes,4,opt,name=kustomize,proto3" json:"kustomize,omitempty"`
	Directory *DirectoryAppSpec `protobuf:"bytes,5,opt,name=directory,proto3" json:"directory,omitempty"`
}

func (x *RepoAppDetailsResponse) Reset() {
	*x = RepoAppDetailsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apiclient_reposerver_repository_repository_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepoAppDetailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepoAppDetailsResponse) ProtoMessage() {}

func (x *RepoAppDetailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apiclient_reposerver_repository_repository_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepoAppDetailsResponse.ProtoReflect.Descriptor instead.
func (*RepoAppDetailsResponse) Descriptor() ([]byte, []int) {
	return file_apiclient_reposerver_repository_repository_proto_rawDescGZIP(), []int{11}
}

func (x *RepoAppDetailsResponse) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *RepoAppDetailsResponse) GetHelm() *HelmAppSpec {
	if x != nil {
		return x.Helm
	}
	return nil
}

func (x *RepoAppDetailsResponse) GetKustomize() *KustomizeAppSpec {
	if x != nil {
		return x.Kustomize
	}
	return nil
}

func (x *RepoAppDetailsResponse) GetDirectory() *DirectoryAppSpec {
	if x != nil {
		return x.Directory
	}
	return nil
}

type RepoServerRevisionMetadataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the repo
	Repo *v1alpha1.Repository `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
	// the revision within the repo
	Revision string `protobuf:"bytes,2,opt,name=revision,proto3" json:"revision,omitempty"`
	// whether to check signature on revision
	CheckSignature bool `protobuf:"varint,3,opt,name=checkSignature,proto3" json:"checkSignature,omitempty"`
}

func (x *RepoServerRevisionMetadataRequest) Reset() {
	*x = RepoServerRevisionMetadataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apiclient_reposerver_repository_repository_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepoServerRevisionMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepoServerRevisionMetadataRequest) ProtoMessage() {}

func (x *RepoServerRevisionMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apiclient_reposerver_repository_repository_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepoServerRevisionMetadataRequest.ProtoReflect.Descriptor instead.
func (*RepoServerRevisionMetadataRequest) Descriptor() ([]byte, []int) {
	return file_apiclient_reposerver_repository_repository_proto_rawDescGZIP(), []int{12}
}

func (x *RepoServerRevisionMetadataRequest) GetRepo() *v1alpha1.Repository {
	if x != nil {
		return x.Repo
	}
	return nil
}

func (x *RepoServerRevisionMetadataRequest) GetRevision() string {
	if x != nil {
		return x.Revision
	}
	return ""
}

func (x *RepoServerRevisionMetadataRequest) GetCheckSignature() bool {
	if x != nil {
		return x.CheckSignature
	}
	return false
}

// HelmAppSpec contains helm app name  in source repo
type HelmAppSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ValueFiles []string `protobuf:"bytes,3,rep,name=valueFiles,proto3" json:"valueFiles,omitempty"`
	// the output of `helm inspect values`
	Parameters []*v1alpha1.HelmParameter `protobuf:"bytes,4,rep,name=parameters,proto3" json:"parameters,omitempty"`
	// the contents of values.yaml
	Values string `protobuf:"bytes,5,opt,name=values,proto3" json:"values,omitempty"`
	// helm file parameters
	FileParameters []*v1alpha1.HelmFileParameter `protobuf:"bytes,6,rep,name=fileParameters,proto3" json:"fileParameters,omitempty"`
}

func (x *HelmAppSpec) Reset() {
	*x = HelmAppSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apiclient_reposerver_repository_repository_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelmAppSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelmAppSpec) ProtoMessage() {}

func (x *HelmAppSpec) ProtoReflect() protoreflect.Message {
	mi := &file_apiclient_reposerver_repository_repository_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelmAppSpec.ProtoReflect.Descriptor instead.
func (*HelmAppSpec) Descriptor() ([]byte, []int) {
	return file_apiclient_reposerver_repository_repository_proto_rawDescGZIP(), []int{13}
}

func (x *HelmAppSpec) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HelmAppSpec) GetValueFiles() []string {
	if x != nil {
		return x.ValueFiles
	}
	return nil
}

func (x *HelmAppSpec) GetParameters() []*v1alpha1.HelmParameter {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *HelmAppSpec) GetValues() string {
	if x != nil {
		return x.Values
	}
	return ""
}

func (x *HelmAppSpec) GetFileParameters() []*v1alpha1.HelmFileParameter {
	if x != nil {
		return x.FileParameters
	}
	return nil
}

// KustomizeAppSpec contains kustomize images
type KustomizeAppSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// images is a list of available images.
	Images []string `protobuf:"bytes,3,rep,name=images,proto3" json:"images,omitempty"`
}

func (x *KustomizeAppSpec) Reset() {
	*x = KustomizeAppSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apiclient_reposerver_repository_repository_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KustomizeAppSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KustomizeAppSpec) ProtoMessage() {}

func (x *KustomizeAppSpec) ProtoReflect() protoreflect.Message {
	mi := &file_apiclient_reposerver_repository_repository_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KustomizeAppSpec.ProtoReflect.Descriptor instead.
func (*KustomizeAppSpec) Descriptor() ([]byte, []int) {
	return file_apiclient_reposerver_repository_repository_proto_rawDescGZIP(), []int{14}
}

func (x *KustomizeAppSpec) GetImages() []string {
	if x != nil {
		return x.Images
	}
	return nil
}

// DirectoryAppSpec contains directory
type DirectoryAppSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DirectoryAppSpec) Reset() {
	*x = DirectoryAppSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apiclient_reposerver_repository_repository_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DirectoryAppSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DirectoryAppSpec) ProtoMessage() {}

func (x *DirectoryAppSpec) ProtoReflect() protoreflect.Message {
	mi := &file_apiclient_reposerver_repository_repository_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DirectoryAppSpec.ProtoReflect.Descriptor instead.
func (*DirectoryAppSpec) Descriptor() ([]byte, []int) {
	return file_apiclient_reposerver_repository_repository_proto_rawDescGZIP(), []int{15}
}

type HelmChartsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repo *v1alpha1.Repository `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
}

func (x *HelmChartsRequest) Reset() {
	*x = HelmChartsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apiclient_reposerver_repository_repository_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelmChartsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelmChartsRequest) ProtoMessage() {}

func (x *HelmChartsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apiclient_reposerver_repository_repository_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelmChartsRequest.ProtoReflect.Descriptor instead.
func (*HelmChartsRequest) Descriptor() ([]byte, []int) {
	return file_apiclient_reposerver_repository_repository_proto_rawDescGZIP(), []int{16}
}

func (x *HelmChartsRequest) GetRepo() *v1alpha1.Repository {
	if x != nil {
		return x.Repo
	}
	return nil
}

type HelmChart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Versions []string `protobuf:"bytes,2,rep,name=versions,proto3" json:"versions,omitempty"`
}

func (x *HelmChart) Reset() {
	*x = HelmChart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apiclient_reposerver_repository_repository_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelmChart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelmChart) ProtoMessage() {}

func (x *HelmChart) ProtoReflect() protoreflect.Message {
	mi := &file_apiclient_reposerver_repository_repository_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelmChart.ProtoReflect.Descriptor instead.
func (*HelmChart) Descriptor() ([]byte, []int) {
	return file_apiclient_reposerver_repository_repository_proto_rawDescGZIP(), []int{17}
}

func (x *HelmChart) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HelmChart) GetVersions() []string {
	if x != nil {
		return x.Versions
	}
	return nil
}

type HelmChartsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*HelmChart `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *HelmChartsResponse) Reset() {
	*x = HelmChartsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apiclient_reposerver_repository_repository_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelmChartsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelmChartsResponse) ProtoMessage() {}

func (x *HelmChartsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apiclient_reposerver_repository_repository_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelmChartsResponse.ProtoReflect.Descriptor instead.
func (*HelmChartsResponse) Descriptor() ([]byte, []int) {
	return file_apiclient_reposerver_repository_repository_proto_rawDescGZIP(), []int{18}
}

func (x *HelmChartsResponse) GetItems() []*HelmChart {
	if x != nil {
		return x.Items
	}
	return nil
}

var File_apiclient_reposerver_repository_repository_proto protoreflect.FileDescriptor

var file_apiclient_reposerver_repository_repository_proto_rawDesc = []byte{
	0x0a, 0x30, 0x61, 0x70, 0x69, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x1f, 0x61, 0x70, 0x69, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x72, 0x65,
	0x70, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x1a, 0x29, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb2,
	0x08, 0x0a, 0x0f, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x39, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x6f, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6e, 0x6f, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4b,
	0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x5a, 0x0a,
	0x11, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x11, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x05, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x05, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x12, 0x4b, 0x0a, 0x07, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x07, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x73, 0x12, 0x57, 0x0a, 0x10, 0x6b, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4b, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x69, 0x7a, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x10, 0x6b, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x6b, 0x75, 0x62, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x6b, 0x75, 0x62, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20,
	0x0a, 0x0b, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0f, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x28, 0x0a, 0x0f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x4a, 0x0a, 0x0d, 0x68, 0x65,
	0x6c, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x43, 0x72, 0x65, 0x64, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65,
	0x70, 0x6f, 0x43, 0x72, 0x65, 0x64, 0x73, 0x52, 0x0d, 0x68, 0x65, 0x6c, 0x6d, 0x52, 0x65, 0x70,
	0x6f, 0x43, 0x72, 0x65, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x6e, 0x6f, 0x52, 0x65, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x6e, 0x6f, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69,
	0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x78, 0x0a, 0x12, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x14,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x61, 0x70, 0x69, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x12, 0x48, 0x0a, 0x0b, 0x68, 0x65, 0x6c, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x48, 0x65, 0x6c, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x0b, 0x68, 0x65, 0x6c, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x45, 0x0a, 0x17,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x52, 0x0a, 0x15, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x04,
	0x72, 0x65, 0x70, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x22, 0x48, 0x0a, 0x16, 0x54, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2e, 0x0a, 0x12, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x52, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x22, 0xbb, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x04,
	0x72, 0x65, 0x70, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x12, 0x38, 0x0a, 0x03, 0x61, 0x70, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x61, 0x70,
	0x70, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6d, 0x62, 0x69, 0x67, 0x75, 0x6f, 0x75, 0x73, 0x52, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6d,
	0x62, 0x69, 0x67, 0x75, 0x6f, 0x75, 0x73, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x63, 0x0a, 0x17, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6d, 0x62, 0x69, 0x67, 0x75,
	0x6f, 0x75, 0x73, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x61, 0x6d, 0x62, 0x69, 0x67, 0x75, 0x6f, 0x75, 0x73, 0x52, 0x65, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0xc6, 0x01, 0x0a, 0x10, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e,
	0x69, 0x66, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61,
	0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x4c, 0x0a,
	0x0f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x66, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x39, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x22, 0x36, 0x0a, 0x04, 0x52,
	0x65, 0x66, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x22, 0xa9, 0x02, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x04, 0x72, 0x65,
	0x70, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x78,
	0x0a, 0x12, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x61, 0x70, 0x69,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x70, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x1a, 0x45, 0x0a, 0x17, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x8a, 0x01, 0x0a, 0x07, 0x41, 0x70, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x04, 0x61,
	0x70, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x41, 0x70, 0x70, 0x4c,
	0x69, 0x73, 0x74, 0x2e, 0x41, 0x70, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x61,
	0x70, 0x70, 0x73, 0x1a, 0x37, 0x0a, 0x09, 0x41, 0x70, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xce, 0x05, 0x0a,
	0x19, 0x52, 0x65, 0x70, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x70, 0x70, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x39, 0x0a, 0x04, 0x72, 0x65,
	0x70, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x04, 0x72, 0x65, 0x70, 0x6f, 0x12, 0x44, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x05, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x12, 0x57, 0x0a, 0x10, 0x6b, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4b,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x10, 0x6b, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6e,
	0x6f, 0x43, 0x61, 0x63, 0x68, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6e, 0x6f,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6e, 0x6f, 0x52, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x6e, 0x6f, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e,
	0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x82, 0x01, 0x0a, 0x12, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x61, 0x70, 0x69, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x0b,
	0x68, 0x65, 0x6c, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x48, 0x65,
	0x6c, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x68, 0x65, 0x6c, 0x6d, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x45, 0x0a, 0x17, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x90, 0x02,
	0x0a, 0x16, 0x52, 0x65, 0x70, 0x6f, 0x41, 0x70, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x04,
	0x68, 0x65, 0x6c, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x70, 0x69,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x48, 0x65, 0x6c,
	0x6d, 0x41, 0x70, 0x70, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x68, 0x65, 0x6c, 0x6d, 0x12, 0x4f,
	0x0a, 0x09, 0x6b, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x72, 0x65,
	0x70, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x2e, 0x4b, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x41, 0x70, 0x70,
	0x53, 0x70, 0x65, 0x63, 0x52, 0x09, 0x6b, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x12,
	0x4f, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x70,
	0x70, 0x53, 0x70, 0x65, 0x63, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x22, 0xa2, 0x01, 0x0a, 0x21, 0x52, 0x65, 0x70, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52,
	0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x04, 0x72, 0x65, 0x70,
	0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a,
	0x0e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xf9, 0x01, 0x0a, 0x0b, 0x48, 0x65, 0x6c, 0x6d, 0x41, 0x70,
	0x70, 0x53, 0x70, 0x65, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x0a, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x48, 0x65, 0x6c, 0x6d, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x54, 0x0a, 0x0e, 0x66,
	0x69, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x48, 0x65, 0x6c, 0x6d, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x22, 0x2a, 0x0a, 0x10, 0x4b, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x41, 0x70,
	0x70, 0x53, 0x70, 0x65, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x22, 0x12, 0x0a,
	0x10, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x70, 0x70, 0x53, 0x70, 0x65,
	0x63, 0x22, 0x4e, 0x0a, 0x11, 0x48, 0x65, 0x6c, 0x6d, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x04, 0x72, 0x65, 0x70,
	0x6f, 0x22, 0x3b, 0x0a, 0x09, 0x48, 0x65, 0x6c, 0x6d, 0x43, 0x68, 0x61, 0x72, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x56,
	0x0a, 0x12, 0x48, 0x65, 0x6c, 0x6d, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x72, 0x65, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x48, 0x65, 0x6c, 0x6d, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x32, 0xfe, 0x07, 0x0a, 0x11, 0x52, 0x65, 0x70, 0x6f, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x79, 0x0a, 0x10,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74,
	0x12, 0x30, 0x2e, 0x61, 0x70, 0x69, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x2e, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x83, 0x01, 0x0a, 0x0e, 0x54, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x36, 0x2e, 0x61, 0x70, 0x69,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x54, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x37, 0x2e, 0x61, 0x70, 0x69, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x86, 0x01,
	0x0a, 0x0f, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x37, 0x2e, 0x61, 0x70, 0x69, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x72, 0x65,
	0x70, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x61, 0x70, 0x69,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x66, 0x73, 0x12, 0x30, 0x2e, 0x61, 0x70, 0x69, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x66, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x52, 0x65, 0x66, 0x73, 0x22, 0x00, 0x12, 0x68, 0x0a,
	0x08, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x73, 0x12, 0x30, 0x2e, 0x61, 0x70, 0x69, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x41, 0x70, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x61, 0x70,
	0x69, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x41, 0x70,
	0x70, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x86, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41,
	0x70, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x3a, 0x2e, 0x61, 0x70, 0x69, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x52, 0x65, 0x70, 0x6f,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x70, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x37, 0x2e, 0x61, 0x70, 0x69, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x41, 0x70, 0x70, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x88, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x42, 0x2e, 0x61, 0x70, 0x69, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x7a, 0x0a, 0x0d, 0x47,
	0x65, 0x74, 0x48, 0x65, 0x6c, 0x6d, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x12, 0x32, 0x2e, 0x61,
	0x70, 0x69, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x48,
	0x65, 0x6c, 0x6d, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x33, 0x2e, 0x61, 0x70, 0x69, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x2e, 0x48, 0x65, 0x6c, 0x6d, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x98, 0x02, 0x0a, 0x23, 0x63, 0x6f, 0x6d, 0x2e,
	0x61, 0x70, 0x69, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x42,
	0x0f, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x42, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61,
	0x72, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x6a, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x2d, 0x63, 0x64, 0x2f,
	0x76, 0x32, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0xa2, 0x02, 0x03, 0x41, 0x52, 0x52, 0xaa, 0x02, 0x1f, 0x41,
	0x70, 0x69, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0xca, 0x02,
	0x1f, 0x41, 0x70, 0x69, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5c, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5c, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0xe2, 0x02, 0x2b, 0x41, 0x70, 0x69, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5c, 0x52, 0x65, 0x70,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5c, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02,
	0x21, 0x41, 0x70, 0x69, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x3a, 0x3a, 0x52, 0x65, 0x70, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x3a, 0x3a, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_apiclient_reposerver_repository_repository_proto_rawDescOnce sync.Once
	file_apiclient_reposerver_repository_repository_proto_rawDescData = file_apiclient_reposerver_repository_repository_proto_rawDesc
)

func file_apiclient_reposerver_repository_repository_proto_rawDescGZIP() []byte {
	file_apiclient_reposerver_repository_repository_proto_rawDescOnce.Do(func() {
		file_apiclient_reposerver_repository_repository_proto_rawDescData = protoimpl.X.CompressGZIP(file_apiclient_reposerver_repository_repository_proto_rawDescData)
	})
	return file_apiclient_reposerver_repository_repository_proto_rawDescData
}

var file_apiclient_reposerver_repository_repository_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_apiclient_reposerver_repository_repository_proto_goTypes = []interface{}{
	(*ManifestRequest)(nil),                   // 0: apiclient.reposerver.repository.ManifestRequest
	(*TestRepositoryRequest)(nil),             // 1: apiclient.reposerver.repository.TestRepositoryRequest
	(*TestRepositoryResponse)(nil),            // 2: apiclient.reposerver.repository.TestRepositoryResponse
	(*ResolveRevisionRequest)(nil),            // 3: apiclient.reposerver.repository.ResolveRevisionRequest
	(*ResolveRevisionResponse)(nil),           // 4: apiclient.reposerver.repository.ResolveRevisionResponse
	(*ManifestResponse)(nil),                  // 5: apiclient.reposerver.repository.ManifestResponse
	(*ListRefsRequest)(nil),                   // 6: apiclient.reposerver.repository.ListRefsRequest
	(*Refs)(nil),                              // 7: apiclient.reposerver.repository.Refs
	(*ListAppsRequest)(nil),                   // 8: apiclient.reposerver.repository.ListAppsRequest
	(*AppList)(nil),                           // 9: apiclient.reposerver.repository.AppList
	(*RepoServerAppDetailsQuery)(nil),         // 10: apiclient.reposerver.repository.RepoServerAppDetailsQuery
	(*RepoAppDetailsResponse)(nil),            // 11: apiclient.reposerver.repository.RepoAppDetailsResponse
	(*RepoServerRevisionMetadataRequest)(nil), // 12: apiclient.reposerver.repository.RepoServerRevisionMetadataRequest
	(*HelmAppSpec)(nil),                       // 13: apiclient.reposerver.repository.HelmAppSpec
	(*KustomizeAppSpec)(nil),                  // 14: apiclient.reposerver.repository.KustomizeAppSpec
	(*DirectoryAppSpec)(nil),                  // 15: apiclient.reposerver.repository.DirectoryAppSpec
	(*HelmChartsRequest)(nil),                 // 16: apiclient.reposerver.repository.HelmChartsRequest
	(*HelmChart)(nil),                         // 17: apiclient.reposerver.repository.HelmChart
	(*HelmChartsResponse)(nil),                // 18: apiclient.reposerver.repository.HelmChartsResponse
	nil,                                       // 19: apiclient.reposerver.repository.ManifestRequest.EnabledSourceTypesEntry
	nil,                                       // 20: apiclient.reposerver.repository.ListAppsRequest.EnabledSourceTypesEntry
	nil,                                       // 21: apiclient.reposerver.repository.AppList.AppsEntry
	nil,                                       // 22: apiclient.reposerver.repository.RepoServerAppDetailsQuery.EnabledSourceTypesEntry
	(*v1alpha1.Repository)(nil),               // 23: apis.application.v1alpha1.Repository
	(*v1alpha1.ApplicationSource)(nil),        // 24: apis.application.v1alpha1.ApplicationSource
	(*v1alpha1.ConfigManagementPlugin)(nil),   // 25: apis.application.v1alpha1.ConfigManagementPlugin
	(*v1alpha1.KustomizeOptions)(nil),         // 26: apis.application.v1alpha1.KustomizeOptions
	(*v1alpha1.RepoCreds)(nil),                // 27: apis.application.v1alpha1.RepoCreds
	(*v1alpha1.HelmOptions)(nil),              // 28: apis.application.v1alpha1.HelmOptions
	(*v1alpha1.Application)(nil),              // 29: apis.application.v1alpha1.Application
	(*v1alpha1.HelmParameter)(nil),            // 30: apis.application.v1alpha1.HelmParameter
	(*v1alpha1.HelmFileParameter)(nil),        // 31: apis.application.v1alpha1.HelmFileParameter
	(*v1alpha1.RevisionMetadata)(nil),         // 32: apis.application.v1alpha1.RevisionMetadata
}
var file_apiclient_reposerver_repository_repository_proto_depIdxs = []int32{
	23, // 0: apiclient.reposerver.repository.ManifestRequest.repo:type_name -> apis.application.v1alpha1.Repository
	24, // 1: apiclient.reposerver.repository.ManifestRequest.applicationSource:type_name -> apis.application.v1alpha1.ApplicationSource
	23, // 2: apiclient.reposerver.repository.ManifestRequest.repos:type_name -> apis.application.v1alpha1.Repository
	25, // 3: apiclient.reposerver.repository.ManifestRequest.plugins:type_name -> apis.application.v1alpha1.ConfigManagementPlugin
	26, // 4: apiclient.reposerver.repository.ManifestRequest.kustomizeOptions:type_name -> apis.application.v1alpha1.KustomizeOptions
	27, // 5: apiclient.reposerver.repository.ManifestRequest.helmRepoCreds:type_name -> apis.application.v1alpha1.RepoCreds
	19, // 6: apiclient.reposerver.repository.ManifestRequest.enabledSourceTypes:type_name -> apiclient.reposerver.repository.ManifestRequest.EnabledSourceTypesEntry
	28, // 7: apiclient.reposerver.repository.ManifestRequest.helmOptions:type_name -> apis.application.v1alpha1.HelmOptions
	23, // 8: apiclient.reposerver.repository.TestRepositoryRequest.repo:type_name -> apis.application.v1alpha1.Repository
	23, // 9: apiclient.reposerver.repository.ResolveRevisionRequest.repo:type_name -> apis.application.v1alpha1.Repository
	29, // 10: apiclient.reposerver.repository.ResolveRevisionRequest.app:type_name -> apis.application.v1alpha1.Application
	23, // 11: apiclient.reposerver.repository.ListRefsRequest.repo:type_name -> apis.application.v1alpha1.Repository
	23, // 12: apiclient.reposerver.repository.ListAppsRequest.repo:type_name -> apis.application.v1alpha1.Repository
	20, // 13: apiclient.reposerver.repository.ListAppsRequest.enabledSourceTypes:type_name -> apiclient.reposerver.repository.ListAppsRequest.EnabledSourceTypesEntry
	21, // 14: apiclient.reposerver.repository.AppList.apps:type_name -> apiclient.reposerver.repository.AppList.AppsEntry
	23, // 15: apiclient.reposerver.repository.RepoServerAppDetailsQuery.repo:type_name -> apis.application.v1alpha1.Repository
	24, // 16: apiclient.reposerver.repository.RepoServerAppDetailsQuery.source:type_name -> apis.application.v1alpha1.ApplicationSource
	23, // 17: apiclient.reposerver.repository.RepoServerAppDetailsQuery.repos:type_name -> apis.application.v1alpha1.Repository
	26, // 18: apiclient.reposerver.repository.RepoServerAppDetailsQuery.kustomizeOptions:type_name -> apis.application.v1alpha1.KustomizeOptions
	22, // 19: apiclient.reposerver.repository.RepoServerAppDetailsQuery.enabledSourceTypes:type_name -> apiclient.reposerver.repository.RepoServerAppDetailsQuery.EnabledSourceTypesEntry
	28, // 20: apiclient.reposerver.repository.RepoServerAppDetailsQuery.helmOptions:type_name -> apis.application.v1alpha1.HelmOptions
	13, // 21: apiclient.reposerver.repository.RepoAppDetailsResponse.helm:type_name -> apiclient.reposerver.repository.HelmAppSpec
	14, // 22: apiclient.reposerver.repository.RepoAppDetailsResponse.kustomize:type_name -> apiclient.reposerver.repository.KustomizeAppSpec
	15, // 23: apiclient.reposerver.repository.RepoAppDetailsResponse.directory:type_name -> apiclient.reposerver.repository.DirectoryAppSpec
	23, // 24: apiclient.reposerver.repository.RepoServerRevisionMetadataRequest.repo:type_name -> apis.application.v1alpha1.Repository
	30, // 25: apiclient.reposerver.repository.HelmAppSpec.parameters:type_name -> apis.application.v1alpha1.HelmParameter
	31, // 26: apiclient.reposerver.repository.HelmAppSpec.fileParameters:type_name -> apis.application.v1alpha1.HelmFileParameter
	23, // 27: apiclient.reposerver.repository.HelmChartsRequest.repo:type_name -> apis.application.v1alpha1.Repository
	17, // 28: apiclient.reposerver.repository.HelmChartsResponse.items:type_name -> apiclient.reposerver.repository.HelmChart
	0,  // 29: apiclient.reposerver.repository.RepoServerService.GenerateManifest:input_type -> apiclient.reposerver.repository.ManifestRequest
	1,  // 30: apiclient.reposerver.repository.RepoServerService.TestRepository:input_type -> apiclient.reposerver.repository.TestRepositoryRequest
	3,  // 31: apiclient.reposerver.repository.RepoServerService.ResolveRevision:input_type -> apiclient.reposerver.repository.ResolveRevisionRequest
	6,  // 32: apiclient.reposerver.repository.RepoServerService.ListRefs:input_type -> apiclient.reposerver.repository.ListRefsRequest
	8,  // 33: apiclient.reposerver.repository.RepoServerService.ListApps:input_type -> apiclient.reposerver.repository.ListAppsRequest
	10, // 34: apiclient.reposerver.repository.RepoServerService.GetAppDetails:input_type -> apiclient.reposerver.repository.RepoServerAppDetailsQuery
	12, // 35: apiclient.reposerver.repository.RepoServerService.GetRevisionMetadata:input_type -> apiclient.reposerver.repository.RepoServerRevisionMetadataRequest
	16, // 36: apiclient.reposerver.repository.RepoServerService.GetHelmCharts:input_type -> apiclient.reposerver.repository.HelmChartsRequest
	5,  // 37: apiclient.reposerver.repository.RepoServerService.GenerateManifest:output_type -> apiclient.reposerver.repository.ManifestResponse
	2,  // 38: apiclient.reposerver.repository.RepoServerService.TestRepository:output_type -> apiclient.reposerver.repository.TestRepositoryResponse
	4,  // 39: apiclient.reposerver.repository.RepoServerService.ResolveRevision:output_type -> apiclient.reposerver.repository.ResolveRevisionResponse
	7,  // 40: apiclient.reposerver.repository.RepoServerService.ListRefs:output_type -> apiclient.reposerver.repository.Refs
	9,  // 41: apiclient.reposerver.repository.RepoServerService.ListApps:output_type -> apiclient.reposerver.repository.AppList
	11, // 42: apiclient.reposerver.repository.RepoServerService.GetAppDetails:output_type -> apiclient.reposerver.repository.RepoAppDetailsResponse
	32, // 43: apiclient.reposerver.repository.RepoServerService.GetRevisionMetadata:output_type -> apis.application.v1alpha1.RevisionMetadata
	18, // 44: apiclient.reposerver.repository.RepoServerService.GetHelmCharts:output_type -> apiclient.reposerver.repository.HelmChartsResponse
	37, // [37:45] is the sub-list for method output_type
	29, // [29:37] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_apiclient_reposerver_repository_repository_proto_init() }
func file_apiclient_reposerver_repository_repository_proto_init() {
	if File_apiclient_reposerver_repository_repository_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_apiclient_reposerver_repository_repository_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManifestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apiclient_reposerver_repository_repository_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestRepositoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apiclient_reposerver_repository_repository_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestRepositoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apiclient_reposerver_repository_repository_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolveRevisionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apiclient_reposerver_repository_repository_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolveRevisionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apiclient_reposerver_repository_repository_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManifestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apiclient_reposerver_repository_repository_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRefsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apiclient_reposerver_repository_repository_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Refs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apiclient_reposerver_repository_repository_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAppsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apiclient_reposerver_repository_repository_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apiclient_reposerver_repository_repository_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepoServerAppDetailsQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apiclient_reposerver_repository_repository_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepoAppDetailsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apiclient_reposerver_repository_repository_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepoServerRevisionMetadataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apiclient_reposerver_repository_repository_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelmAppSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apiclient_reposerver_repository_repository_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KustomizeAppSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apiclient_reposerver_repository_repository_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DirectoryAppSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apiclient_reposerver_repository_repository_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelmChartsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apiclient_reposerver_repository_repository_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelmChart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apiclient_reposerver_repository_repository_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelmChartsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_apiclient_reposerver_repository_repository_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_apiclient_reposerver_repository_repository_proto_goTypes,
		DependencyIndexes: file_apiclient_reposerver_repository_repository_proto_depIdxs,
		MessageInfos:      file_apiclient_reposerver_repository_repository_proto_msgTypes,
	}.Build()
	File_apiclient_reposerver_repository_repository_proto = out.File
	file_apiclient_reposerver_repository_repository_proto_rawDesc = nil
	file_apiclient_reposerver_repository_repository_proto_goTypes = nil
	file_apiclient_reposerver_repository_repository_proto_depIdxs = nil
}
