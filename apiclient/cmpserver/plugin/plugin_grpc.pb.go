// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: apiclient/cmpserver/plugin/plugin.proto

package plugin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConfigManagementPluginServiceClient is the client API for ConfigManagementPluginService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConfigManagementPluginServiceClient interface {
	// GenerateManifests receive a stream containing a tgz archive with all required files necessary
	// to generate manifests
	GenerateManifest(ctx context.Context, opts ...grpc.CallOption) (ConfigManagementPluginService_GenerateManifestClient, error)
	// MatchRepository returns whether or not the given application is supported by the plugin
	MatchRepository(ctx context.Context, opts ...grpc.CallOption) (ConfigManagementPluginService_MatchRepositoryClient, error)
}

type configManagementPluginServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConfigManagementPluginServiceClient(cc grpc.ClientConnInterface) ConfigManagementPluginServiceClient {
	return &configManagementPluginServiceClient{cc}
}

func (c *configManagementPluginServiceClient) GenerateManifest(ctx context.Context, opts ...grpc.CallOption) (ConfigManagementPluginService_GenerateManifestClient, error) {
	stream, err := c.cc.NewStream(ctx, &ConfigManagementPluginService_ServiceDesc.Streams[0], "/apiclient.cmpserver.ConfigManagementPluginService/GenerateManifest", opts...)
	if err != nil {
		return nil, err
	}
	x := &configManagementPluginServiceGenerateManifestClient{stream}
	return x, nil
}

type ConfigManagementPluginService_GenerateManifestClient interface {
	Send(*AppStreamRequest) error
	CloseAndRecv() (*ManifestResponse, error)
	grpc.ClientStream
}

type configManagementPluginServiceGenerateManifestClient struct {
	grpc.ClientStream
}

func (x *configManagementPluginServiceGenerateManifestClient) Send(m *AppStreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *configManagementPluginServiceGenerateManifestClient) CloseAndRecv() (*ManifestResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ManifestResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *configManagementPluginServiceClient) MatchRepository(ctx context.Context, opts ...grpc.CallOption) (ConfigManagementPluginService_MatchRepositoryClient, error) {
	stream, err := c.cc.NewStream(ctx, &ConfigManagementPluginService_ServiceDesc.Streams[1], "/apiclient.cmpserver.ConfigManagementPluginService/MatchRepository", opts...)
	if err != nil {
		return nil, err
	}
	x := &configManagementPluginServiceMatchRepositoryClient{stream}
	return x, nil
}

type ConfigManagementPluginService_MatchRepositoryClient interface {
	Send(*AppStreamRequest) error
	CloseAndRecv() (*RepositoryResponse, error)
	grpc.ClientStream
}

type configManagementPluginServiceMatchRepositoryClient struct {
	grpc.ClientStream
}

func (x *configManagementPluginServiceMatchRepositoryClient) Send(m *AppStreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *configManagementPluginServiceMatchRepositoryClient) CloseAndRecv() (*RepositoryResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(RepositoryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ConfigManagementPluginServiceServer is the server API for ConfigManagementPluginService service.
// All implementations must embed UnimplementedConfigManagementPluginServiceServer
// for forward compatibility
type ConfigManagementPluginServiceServer interface {
	// GenerateManifests receive a stream containing a tgz archive with all required files necessary
	// to generate manifests
	GenerateManifest(ConfigManagementPluginService_GenerateManifestServer) error
	// MatchRepository returns whether or not the given application is supported by the plugin
	MatchRepository(ConfigManagementPluginService_MatchRepositoryServer) error
	mustEmbedUnimplementedConfigManagementPluginServiceServer()
}

// UnimplementedConfigManagementPluginServiceServer must be embedded to have forward compatible implementations.
type UnimplementedConfigManagementPluginServiceServer struct {
}

func (UnimplementedConfigManagementPluginServiceServer) GenerateManifest(ConfigManagementPluginService_GenerateManifestServer) error {
	return status.Errorf(codes.Unimplemented, "method GenerateManifest not implemented")
}
func (UnimplementedConfigManagementPluginServiceServer) MatchRepository(ConfigManagementPluginService_MatchRepositoryServer) error {
	return status.Errorf(codes.Unimplemented, "method MatchRepository not implemented")
}
func (UnimplementedConfigManagementPluginServiceServer) mustEmbedUnimplementedConfigManagementPluginServiceServer() {
}

// UnsafeConfigManagementPluginServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConfigManagementPluginServiceServer will
// result in compilation errors.
type UnsafeConfigManagementPluginServiceServer interface {
	mustEmbedUnimplementedConfigManagementPluginServiceServer()
}

func RegisterConfigManagementPluginServiceServer(s grpc.ServiceRegistrar, srv ConfigManagementPluginServiceServer) {
	s.RegisterService(&ConfigManagementPluginService_ServiceDesc, srv)
}

func _ConfigManagementPluginService_GenerateManifest_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ConfigManagementPluginServiceServer).GenerateManifest(&configManagementPluginServiceGenerateManifestServer{stream})
}

type ConfigManagementPluginService_GenerateManifestServer interface {
	SendAndClose(*ManifestResponse) error
	Recv() (*AppStreamRequest, error)
	grpc.ServerStream
}

type configManagementPluginServiceGenerateManifestServer struct {
	grpc.ServerStream
}

func (x *configManagementPluginServiceGenerateManifestServer) SendAndClose(m *ManifestResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *configManagementPluginServiceGenerateManifestServer) Recv() (*AppStreamRequest, error) {
	m := new(AppStreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ConfigManagementPluginService_MatchRepository_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ConfigManagementPluginServiceServer).MatchRepository(&configManagementPluginServiceMatchRepositoryServer{stream})
}

type ConfigManagementPluginService_MatchRepositoryServer interface {
	SendAndClose(*RepositoryResponse) error
	Recv() (*AppStreamRequest, error)
	grpc.ServerStream
}

type configManagementPluginServiceMatchRepositoryServer struct {
	grpc.ServerStream
}

func (x *configManagementPluginServiceMatchRepositoryServer) SendAndClose(m *RepositoryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *configManagementPluginServiceMatchRepositoryServer) Recv() (*AppStreamRequest, error) {
	m := new(AppStreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ConfigManagementPluginService_ServiceDesc is the grpc.ServiceDesc for ConfigManagementPluginService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConfigManagementPluginService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "apiclient.cmpserver.ConfigManagementPluginService",
	HandlerType: (*ConfigManagementPluginServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GenerateManifest",
			Handler:       _ConfigManagementPluginService_GenerateManifest_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "MatchRepository",
			Handler:       _ConfigManagementPluginService_MatchRepository_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "apiclient/cmpserver/plugin/plugin.proto",
}
