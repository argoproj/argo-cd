// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        (unknown)
// source: apiclient/repository/repository.proto

// Repository Service
//
// Repository Service API performs CRUD actions against repository resources

package repository

import (
	repository "github.com/argoproj/argo-cd/v2/pkg/apiclient/reposerver/repository"
	v1alpha1 "github.com/argoproj/argo-cd/v2/pkg/apis/application/v1alpha1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// RepoAppsQuery is a query for Repository apps
type RepoAppsQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repo       string `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
	Revision   string `protobuf:"bytes,2,opt,name=revision,proto3" json:"revision,omitempty"`
	AppName    string `protobuf:"bytes,3,opt,name=appName,proto3" json:"appName,omitempty"`
	AppProject string `protobuf:"bytes,4,opt,name=appProject,proto3" json:"appProject,omitempty"`
}

func (x *RepoAppsQuery) Reset() {
	*x = RepoAppsQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apiclient_repository_repository_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepoAppsQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepoAppsQuery) ProtoMessage() {}

func (x *RepoAppsQuery) ProtoReflect() protoreflect.Message {
	mi := &file_apiclient_repository_repository_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepoAppsQuery.ProtoReflect.Descriptor instead.
func (*RepoAppsQuery) Descriptor() ([]byte, []int) {
	return file_apiclient_repository_repository_proto_rawDescGZIP(), []int{0}
}

func (x *RepoAppsQuery) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

func (x *RepoAppsQuery) GetRevision() string {
	if x != nil {
		return x.Revision
	}
	return ""
}

func (x *RepoAppsQuery) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *RepoAppsQuery) GetAppProject() string {
	if x != nil {
		return x.AppProject
	}
	return ""
}

// AppInfo contains application type and app file path
type AppInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *AppInfo) Reset() {
	*x = AppInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apiclient_repository_repository_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppInfo) ProtoMessage() {}

func (x *AppInfo) ProtoReflect() protoreflect.Message {
	mi := &file_apiclient_repository_repository_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppInfo.ProtoReflect.Descriptor instead.
func (*AppInfo) Descriptor() ([]byte, []int) {
	return file_apiclient_repository_repository_proto_rawDescGZIP(), []int{1}
}

func (x *AppInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AppInfo) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

// RepoAppDetailsQuery contains query information for app details request
type RepoAppDetailsQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source     *v1alpha1.ApplicationSource `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	AppName    string                      `protobuf:"bytes,2,opt,name=appName,proto3" json:"appName,omitempty"`
	AppProject string                      `protobuf:"bytes,3,opt,name=appProject,proto3" json:"appProject,omitempty"`
}

func (x *RepoAppDetailsQuery) Reset() {
	*x = RepoAppDetailsQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apiclient_repository_repository_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepoAppDetailsQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepoAppDetailsQuery) ProtoMessage() {}

func (x *RepoAppDetailsQuery) ProtoReflect() protoreflect.Message {
	mi := &file_apiclient_repository_repository_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepoAppDetailsQuery.ProtoReflect.Descriptor instead.
func (*RepoAppDetailsQuery) Descriptor() ([]byte, []int) {
	return file_apiclient_repository_repository_proto_rawDescGZIP(), []int{2}
}

func (x *RepoAppDetailsQuery) GetSource() *v1alpha1.ApplicationSource {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *RepoAppDetailsQuery) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *RepoAppDetailsQuery) GetAppProject() string {
	if x != nil {
		return x.AppProject
	}
	return ""
}

// RepoAppsResponse contains applications of specified repository
type RepoAppsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*AppInfo `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *RepoAppsResponse) Reset() {
	*x = RepoAppsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apiclient_repository_repository_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepoAppsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepoAppsResponse) ProtoMessage() {}

func (x *RepoAppsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apiclient_repository_repository_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepoAppsResponse.ProtoReflect.Descriptor instead.
func (*RepoAppsResponse) Descriptor() ([]byte, []int) {
	return file_apiclient_repository_repository_proto_rawDescGZIP(), []int{3}
}

func (x *RepoAppsResponse) GetItems() []*AppInfo {
	if x != nil {
		return x.Items
	}
	return nil
}

// RepoQuery is a query for Repository resources
type RepoQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Repo URL for query
	Repo string `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
	// Whether to force a cache refresh on repo's connection state
	ForceRefresh bool `protobuf:"varint,2,opt,name=forceRefresh,proto3" json:"forceRefresh,omitempty"`
}

func (x *RepoQuery) Reset() {
	*x = RepoQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apiclient_repository_repository_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepoQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepoQuery) ProtoMessage() {}

func (x *RepoQuery) ProtoReflect() protoreflect.Message {
	mi := &file_apiclient_repository_repository_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepoQuery.ProtoReflect.Descriptor instead.
func (*RepoQuery) Descriptor() ([]byte, []int) {
	return file_apiclient_repository_repository_proto_rawDescGZIP(), []int{4}
}

func (x *RepoQuery) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

func (x *RepoQuery) GetForceRefresh() bool {
	if x != nil {
		return x.ForceRefresh
	}
	return false
}

// RepoAccessQuery is a query for checking access to a repo
type RepoAccessQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The URL to the repo
	Repo string `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
	// Username for accessing repo
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	// Password for accessing repo
	Password string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	// Private key data for accessing SSH repository
	SshPrivateKey string `protobuf:"bytes,4,opt,name=sshPrivateKey,proto3" json:"sshPrivateKey,omitempty"`
	// Whether to skip certificate or host key validation
	Insecure bool `protobuf:"varint,5,opt,name=insecure,proto3" json:"insecure,omitempty"`
	// TLS client cert data for accessing HTTPS repository
	TlsClientCertData string `protobuf:"bytes,6,opt,name=tlsClientCertData,proto3" json:"tlsClientCertData,omitempty"`
	// TLS client cert key for accessing HTTPS repository
	TlsClientCertKey string `protobuf:"bytes,7,opt,name=tlsClientCertKey,proto3" json:"tlsClientCertKey,omitempty"`
	// The type of the repo
	Type string `protobuf:"bytes,9,opt,name=type,proto3" json:"type,omitempty"`
	// The name of the repo
	Name string `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	// Whether helm-oci support should be enabled for this repo
	EnableOci bool `protobuf:"varint,11,opt,name=enableOci,proto3" json:"enableOci,omitempty"`
	// Github App Private Key PEM data
	GithubAppPrivateKey string `protobuf:"bytes,12,opt,name=githubAppPrivateKey,proto3" json:"githubAppPrivateKey,omitempty"`
	// Github App ID of the app used to access the repo
	GithubAppID int64 `protobuf:"varint,13,opt,name=githubAppID,proto3" json:"githubAppID,omitempty"`
	// Github App Installation ID of the installed GitHub App
	GithubAppInstallationID int64 `protobuf:"varint,14,opt,name=githubAppInstallationID,proto3" json:"githubAppInstallationID,omitempty"`
	// Github App Enterprise base url if empty will default to https://api.github.com
	GithubAppEnterpriseBaseUrl string `protobuf:"bytes,15,opt,name=githubAppEnterpriseBaseUrl,proto3" json:"githubAppEnterpriseBaseUrl,omitempty"`
	// HTTP/HTTPS proxy to access the repository
	Proxy string `protobuf:"bytes,16,opt,name=proxy,proto3" json:"proxy,omitempty"`
	// Reference between project and repository that allow you automatically to be added as item inside SourceRepos project entity
	Project string `protobuf:"bytes,17,opt,name=project,proto3" json:"project,omitempty"`
}

func (x *RepoAccessQuery) Reset() {
	*x = RepoAccessQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apiclient_repository_repository_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepoAccessQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepoAccessQuery) ProtoMessage() {}

func (x *RepoAccessQuery) ProtoReflect() protoreflect.Message {
	mi := &file_apiclient_repository_repository_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepoAccessQuery.ProtoReflect.Descriptor instead.
func (*RepoAccessQuery) Descriptor() ([]byte, []int) {
	return file_apiclient_repository_repository_proto_rawDescGZIP(), []int{5}
}

func (x *RepoAccessQuery) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

func (x *RepoAccessQuery) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *RepoAccessQuery) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *RepoAccessQuery) GetSshPrivateKey() string {
	if x != nil {
		return x.SshPrivateKey
	}
	return ""
}

func (x *RepoAccessQuery) GetInsecure() bool {
	if x != nil {
		return x.Insecure
	}
	return false
}

func (x *RepoAccessQuery) GetTlsClientCertData() string {
	if x != nil {
		return x.TlsClientCertData
	}
	return ""
}

func (x *RepoAccessQuery) GetTlsClientCertKey() string {
	if x != nil {
		return x.TlsClientCertKey
	}
	return ""
}

func (x *RepoAccessQuery) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *RepoAccessQuery) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RepoAccessQuery) GetEnableOci() bool {
	if x != nil {
		return x.EnableOci
	}
	return false
}

func (x *RepoAccessQuery) GetGithubAppPrivateKey() string {
	if x != nil {
		return x.GithubAppPrivateKey
	}
	return ""
}

func (x *RepoAccessQuery) GetGithubAppID() int64 {
	if x != nil {
		return x.GithubAppID
	}
	return 0
}

func (x *RepoAccessQuery) GetGithubAppInstallationID() int64 {
	if x != nil {
		return x.GithubAppInstallationID
	}
	return 0
}

func (x *RepoAccessQuery) GetGithubAppEnterpriseBaseUrl() string {
	if x != nil {
		return x.GithubAppEnterpriseBaseUrl
	}
	return ""
}

func (x *RepoAccessQuery) GetProxy() string {
	if x != nil {
		return x.Proxy
	}
	return ""
}

func (x *RepoAccessQuery) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

type RepoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RepoResponse) Reset() {
	*x = RepoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apiclient_repository_repository_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepoResponse) ProtoMessage() {}

func (x *RepoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apiclient_repository_repository_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepoResponse.ProtoReflect.Descriptor instead.
func (*RepoResponse) Descriptor() ([]byte, []int) {
	return file_apiclient_repository_repository_proto_rawDescGZIP(), []int{6}
}

// RepoCreateRequest is a request for creating repository config
type RepoCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Repository definition
	Repo *v1alpha1.Repository `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
	// Whether to create in upsert mode
	Upsert bool `protobuf:"varint,2,opt,name=upsert,proto3" json:"upsert,omitempty"`
	// Whether to operate on credential set instead of repository
	CredsOnly bool `protobuf:"varint,3,opt,name=credsOnly,proto3" json:"credsOnly,omitempty"`
}

func (x *RepoCreateRequest) Reset() {
	*x = RepoCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apiclient_repository_repository_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepoCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepoCreateRequest) ProtoMessage() {}

func (x *RepoCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apiclient_repository_repository_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepoCreateRequest.ProtoReflect.Descriptor instead.
func (*RepoCreateRequest) Descriptor() ([]byte, []int) {
	return file_apiclient_repository_repository_proto_rawDescGZIP(), []int{7}
}

func (x *RepoCreateRequest) GetRepo() *v1alpha1.Repository {
	if x != nil {
		return x.Repo
	}
	return nil
}

func (x *RepoCreateRequest) GetUpsert() bool {
	if x != nil {
		return x.Upsert
	}
	return false
}

func (x *RepoCreateRequest) GetCredsOnly() bool {
	if x != nil {
		return x.CredsOnly
	}
	return false
}

type RepoUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repo *v1alpha1.Repository `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
}

func (x *RepoUpdateRequest) Reset() {
	*x = RepoUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apiclient_repository_repository_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepoUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepoUpdateRequest) ProtoMessage() {}

func (x *RepoUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apiclient_repository_repository_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepoUpdateRequest.ProtoReflect.Descriptor instead.
func (*RepoUpdateRequest) Descriptor() ([]byte, []int) {
	return file_apiclient_repository_repository_proto_rawDescGZIP(), []int{8}
}

func (x *RepoUpdateRequest) GetRepo() *v1alpha1.Repository {
	if x != nil {
		return x.Repo
	}
	return nil
}

var File_apiclient_repository_repository_proto protoreflect.FileDescriptor

var file_apiclient_repository_repository_proto_rawDesc = []byte{
	0x0a, 0x25, 0x61, 0x70, 0x69, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x61, 0x70, 0x69, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x1a, 0x30, 0x61,
	0x70, 0x69, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x29, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x79, 0x0a, 0x0d, 0x52, 0x65, 0x70, 0x6f,
	0x41, 0x70, 0x70, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x70,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x70, 0x70,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x22, 0x31, 0x0a, 0x07, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x95, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x70, 0x6f, 0x41,
	0x70, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x44,
	0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x61, 0x70, 0x70, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x47,
	0x0a, 0x10, 0x52, 0x65, 0x70, 0x6f, 0x41, 0x70, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x72, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x43, 0x0a, 0x09, 0x52, 0x65, 0x70, 0x6f, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x22, 0xbd, 0x04, 0x0a,
	0x0f, 0x52, 0x65, 0x70, 0x6f, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x72, 0x65, 0x70, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x24, 0x0a, 0x0d,
	0x73, 0x73, 0x68, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x73, 0x68, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b,
	0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x12, 0x2c,
	0x0a, 0x11, 0x74, 0x6c, 0x73, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74, 0x6c, 0x73, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x10,
	0x74, 0x6c, 0x73, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x4b, 0x65, 0x79,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x6c, 0x73, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x43, 0x65, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x63, 0x69, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x63, 0x69, 0x12, 0x30,
	0x0a, 0x13, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x41, 0x70, 0x70, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x41, 0x70, 0x70, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79,
	0x12, 0x20, 0x0a, 0x0b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x12, 0x38, 0x0a, 0x17, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x41, 0x70, 0x70, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x17, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x41, 0x70, 0x70, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x3e, 0x0a, 0x1a,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x41, 0x70, 0x70, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72,
	0x69, 0x73, 0x65, 0x42, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x1a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x41, 0x70, 0x70, 0x45, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x73, 0x65, 0x42, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x0e, 0x0a, 0x0c,
	0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x84, 0x01, 0x0a,
	0x11, 0x52, 0x65, 0x70, 0x6f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x39, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x70, 0x73, 0x65, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x75,
	0x70, 0x73, 0x65, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x64, 0x73, 0x4f, 0x6e,
	0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x72, 0x65, 0x64, 0x73, 0x4f,
	0x6e, 0x6c, 0x79, 0x22, 0x4e, 0x0a, 0x11, 0x52, 0x65, 0x70, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x04, 0x72,
	0x65, 0x70, 0x6f, 0x32, 0xfb, 0x0e, 0x0a, 0x11, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x73, 0x0a, 0x04, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x72, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x1a, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x1f, 0x88,
	0x02, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x72,
	0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x52, 0x65, 0x70,
	0x6f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x23, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x70,
	0x6f, 0x7d, 0x12, 0x7c, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x52, 0x65,
	0x70, 0x6f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x12, 0x7c, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x66, 0x73, 0x12, 0x1f, 0x2e, 0x61,
	0x70, 0x69, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x25, 0x2e,
	0x61, 0x70, 0x69, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e,
	0x52, 0x65, 0x66, 0x73, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x12, 0x20, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x7d, 0x2f, 0x72, 0x65, 0x66, 0x73, 0x12, 0x81,
	0x01, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x73, 0x12, 0x23, 0x2e, 0x61, 0x70,
	0x69, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x41, 0x70, 0x70, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x1a, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x41, 0x70, 0x70, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22,
	0x12, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x7d, 0x2f, 0x61, 0x70,
	0x70, 0x73, 0x12, 0xb0, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x52, 0x65, 0x70, 0x6f,
	0x41, 0x70, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a,
	0x37, 0x2e, 0x61, 0x70, 0x69, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x41, 0x70, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35,
	0x22, 0x30, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x72,
	0x65, 0x70, 0x6f, 0x55, 0x52, 0x4c, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x95, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x48, 0x65, 0x6c,
	0x6d, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x12, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x52,
	0x65, 0x70, 0x6f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x33, 0x2e, 0x61, 0x70, 0x69, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x48, 0x65, 0x6c, 0x6d, 0x43,
	0x68, 0x61, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x28, 0x12, 0x26, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x70,
	0x6f, 0x7d, 0x2f, 0x68, 0x65, 0x6c, 0x6d, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x12, 0x7f, 0x0a,
	0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x52,
	0x65, 0x70, 0x6f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x25, 0x88, 0x02, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1c, 0x22, 0x14, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x3a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x12, 0x86,
	0x01, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x14, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x3a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x12, 0x8b, 0x01, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x22, 0x31, 0x88, 0x02, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x1a, 0x20, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x7d, 0x3a,
	0x04, 0x72, 0x65, 0x70, 0x6f, 0x12, 0x92, 0x01, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x27, 0x2e, 0x61, 0x70, 0x69,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x28, 0x1a, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x2e, 0x72,
	0x65, 0x70, 0x6f, 0x7d, 0x3a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x12, 0x75, 0x0a, 0x06, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x12, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x52, 0x65, 0x70, 0x6f,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x52, 0x65, 0x70,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x88, 0x02, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1d, 0x2a, 0x1b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f,
	0x7d, 0x12, 0x7c, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x52, 0x65, 0x70,
	0x6f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x52, 0x65,
	0x70, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1d, 0x2a, 0x1b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x7d, 0x12,
	0x8f, 0x01, 0x0a, 0x0e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x2e, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x22, 0x24, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x70,
	0x6f, 0x7d, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x04, 0x72, 0x65, 0x70,
	0x6f, 0x42, 0xd5, 0x01, 0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x0f,
	0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x37, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x72,
	0x67, 0x6f, 0x70, 0x72, 0x6f, 0x6a, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x2d, 0x63, 0x64, 0x2f, 0x76,
	0x32, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f,
	0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0xa2, 0x02, 0x03, 0x41, 0x52, 0x58,
	0xaa, 0x02, 0x14, 0x41, 0x70, 0x69, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0xca, 0x02, 0x14, 0x41, 0x70, 0x69, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5c, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0xe2, 0x02,
	0x20, 0x41, 0x70, 0x69, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5c, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0xea, 0x02, 0x15, 0x41, 0x70, 0x69, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x3a, 0x3a, 0x52,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_apiclient_repository_repository_proto_rawDescOnce sync.Once
	file_apiclient_repository_repository_proto_rawDescData = file_apiclient_repository_repository_proto_rawDesc
)

func file_apiclient_repository_repository_proto_rawDescGZIP() []byte {
	file_apiclient_repository_repository_proto_rawDescOnce.Do(func() {
		file_apiclient_repository_repository_proto_rawDescData = protoimpl.X.CompressGZIP(file_apiclient_repository_repository_proto_rawDescData)
	})
	return file_apiclient_repository_repository_proto_rawDescData
}

var file_apiclient_repository_repository_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_apiclient_repository_repository_proto_goTypes = []interface{}{
	(*RepoAppsQuery)(nil),                     // 0: apiclient.repository.RepoAppsQuery
	(*AppInfo)(nil),                           // 1: apiclient.repository.AppInfo
	(*RepoAppDetailsQuery)(nil),               // 2: apiclient.repository.RepoAppDetailsQuery
	(*RepoAppsResponse)(nil),                  // 3: apiclient.repository.RepoAppsResponse
	(*RepoQuery)(nil),                         // 4: apiclient.repository.RepoQuery
	(*RepoAccessQuery)(nil),                   // 5: apiclient.repository.RepoAccessQuery
	(*RepoResponse)(nil),                      // 6: apiclient.repository.RepoResponse
	(*RepoCreateRequest)(nil),                 // 7: apiclient.repository.RepoCreateRequest
	(*RepoUpdateRequest)(nil),                 // 8: apiclient.repository.RepoUpdateRequest
	(*v1alpha1.ApplicationSource)(nil),        // 9: apis.application.v1alpha1.ApplicationSource
	(*v1alpha1.Repository)(nil),               // 10: apis.application.v1alpha1.Repository
	(*v1alpha1.RepositoryList)(nil),           // 11: apis.application.v1alpha1.RepositoryList
	(*repository.Refs)(nil),                   // 12: apiclient.reposerver.repository.Refs
	(*repository.RepoAppDetailsResponse)(nil), // 13: apiclient.reposerver.repository.RepoAppDetailsResponse
	(*repository.HelmChartsResponse)(nil),     // 14: apiclient.reposerver.repository.HelmChartsResponse
}
var file_apiclient_repository_repository_proto_depIdxs = []int32{
	9,  // 0: apiclient.repository.RepoAppDetailsQuery.source:type_name -> apis.application.v1alpha1.ApplicationSource
	1,  // 1: apiclient.repository.RepoAppsResponse.items:type_name -> apiclient.repository.AppInfo
	10, // 2: apiclient.repository.RepoCreateRequest.repo:type_name -> apis.application.v1alpha1.Repository
	10, // 3: apiclient.repository.RepoUpdateRequest.repo:type_name -> apis.application.v1alpha1.Repository
	4,  // 4: apiclient.repository.RepositoryService.List:input_type -> apiclient.repository.RepoQuery
	4,  // 5: apiclient.repository.RepositoryService.Get:input_type -> apiclient.repository.RepoQuery
	4,  // 6: apiclient.repository.RepositoryService.ListRepositories:input_type -> apiclient.repository.RepoQuery
	4,  // 7: apiclient.repository.RepositoryService.ListRefs:input_type -> apiclient.repository.RepoQuery
	0,  // 8: apiclient.repository.RepositoryService.ListApps:input_type -> apiclient.repository.RepoAppsQuery
	2,  // 9: apiclient.repository.RepositoryService.GetAppDetails:input_type -> apiclient.repository.RepoAppDetailsQuery
	4,  // 10: apiclient.repository.RepositoryService.GetHelmCharts:input_type -> apiclient.repository.RepoQuery
	7,  // 11: apiclient.repository.RepositoryService.Create:input_type -> apiclient.repository.RepoCreateRequest
	7,  // 12: apiclient.repository.RepositoryService.CreateRepository:input_type -> apiclient.repository.RepoCreateRequest
	8,  // 13: apiclient.repository.RepositoryService.Update:input_type -> apiclient.repository.RepoUpdateRequest
	8,  // 14: apiclient.repository.RepositoryService.UpdateRepository:input_type -> apiclient.repository.RepoUpdateRequest
	4,  // 15: apiclient.repository.RepositoryService.Delete:input_type -> apiclient.repository.RepoQuery
	4,  // 16: apiclient.repository.RepositoryService.DeleteRepository:input_type -> apiclient.repository.RepoQuery
	5,  // 17: apiclient.repository.RepositoryService.ValidateAccess:input_type -> apiclient.repository.RepoAccessQuery
	11, // 18: apiclient.repository.RepositoryService.List:output_type -> apis.application.v1alpha1.RepositoryList
	10, // 19: apiclient.repository.RepositoryService.Get:output_type -> apis.application.v1alpha1.Repository
	11, // 20: apiclient.repository.RepositoryService.ListRepositories:output_type -> apis.application.v1alpha1.RepositoryList
	12, // 21: apiclient.repository.RepositoryService.ListRefs:output_type -> apiclient.reposerver.repository.Refs
	3,  // 22: apiclient.repository.RepositoryService.ListApps:output_type -> apiclient.repository.RepoAppsResponse
	13, // 23: apiclient.repository.RepositoryService.GetAppDetails:output_type -> apiclient.reposerver.repository.RepoAppDetailsResponse
	14, // 24: apiclient.repository.RepositoryService.GetHelmCharts:output_type -> apiclient.reposerver.repository.HelmChartsResponse
	10, // 25: apiclient.repository.RepositoryService.Create:output_type -> apis.application.v1alpha1.Repository
	10, // 26: apiclient.repository.RepositoryService.CreateRepository:output_type -> apis.application.v1alpha1.Repository
	10, // 27: apiclient.repository.RepositoryService.Update:output_type -> apis.application.v1alpha1.Repository
	10, // 28: apiclient.repository.RepositoryService.UpdateRepository:output_type -> apis.application.v1alpha1.Repository
	6,  // 29: apiclient.repository.RepositoryService.Delete:output_type -> apiclient.repository.RepoResponse
	6,  // 30: apiclient.repository.RepositoryService.DeleteRepository:output_type -> apiclient.repository.RepoResponse
	6,  // 31: apiclient.repository.RepositoryService.ValidateAccess:output_type -> apiclient.repository.RepoResponse
	18, // [18:32] is the sub-list for method output_type
	4,  // [4:18] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_apiclient_repository_repository_proto_init() }
func file_apiclient_repository_repository_proto_init() {
	if File_apiclient_repository_repository_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_apiclient_repository_repository_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepoAppsQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apiclient_repository_repository_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apiclient_repository_repository_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepoAppDetailsQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apiclient_repository_repository_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepoAppsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apiclient_repository_repository_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepoQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apiclient_repository_repository_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepoAccessQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apiclient_repository_repository_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apiclient_repository_repository_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepoCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apiclient_repository_repository_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepoUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_apiclient_repository_repository_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_apiclient_repository_repository_proto_goTypes,
		DependencyIndexes: file_apiclient_repository_repository_proto_depIdxs,
		MessageInfos:      file_apiclient_repository_repository_proto_msgTypes,
	}.Build()
	File_apiclient_repository_repository_proto = out.File
	file_apiclient_repository_repository_proto_rawDesc = nil
	file_apiclient_repository_repository_proto_goTypes = nil
	file_apiclient_repository_repository_proto_depIdxs = nil
}
