// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: apiclient/repository/repository.proto

package repository

import (
	context "context"
	repository "github.com/argoproj/argo-cd/v2/pkg/apiclient/reposerver/repository"
	v1alpha1 "github.com/argoproj/argo-cd/v2/pkg/apis/application/v1alpha1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RepositoryServiceClient is the client API for RepositoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RepositoryServiceClient interface {
	// Deprecated: Do not use.
	// List returns list of repos or repository credentials
	List(ctx context.Context, in *RepoQuery, opts ...grpc.CallOption) (*v1alpha1.RepositoryList, error)
	// Get returns a repository or its credentials
	Get(ctx context.Context, in *RepoQuery, opts ...grpc.CallOption) (*v1alpha1.Repository, error)
	// ListRepositories gets a list of all configured repositories
	ListRepositories(ctx context.Context, in *RepoQuery, opts ...grpc.CallOption) (*v1alpha1.RepositoryList, error)
	ListRefs(ctx context.Context, in *RepoQuery, opts ...grpc.CallOption) (*repository.Refs, error)
	// ListApps returns list of apps in the repo
	ListApps(ctx context.Context, in *RepoAppsQuery, opts ...grpc.CallOption) (*RepoAppsResponse, error)
	// GetAppDetails returns application details by given path
	GetAppDetails(ctx context.Context, in *RepoAppDetailsQuery, opts ...grpc.CallOption) (*repository.RepoAppDetailsResponse, error)
	// GetHelmCharts returns list of helm charts in the specified repository
	GetHelmCharts(ctx context.Context, in *RepoQuery, opts ...grpc.CallOption) (*repository.HelmChartsResponse, error)
	// Deprecated: Do not use.
	// Create creates a repo or a repo credential set
	Create(ctx context.Context, in *RepoCreateRequest, opts ...grpc.CallOption) (*v1alpha1.Repository, error)
	// CreateRepository creates a new repository configuration
	CreateRepository(ctx context.Context, in *RepoCreateRequest, opts ...grpc.CallOption) (*v1alpha1.Repository, error)
	// Deprecated: Do not use.
	// Update updates a repo or repo credential set
	Update(ctx context.Context, in *RepoUpdateRequest, opts ...grpc.CallOption) (*v1alpha1.Repository, error)
	// UpdateRepository updates a repository configuration
	UpdateRepository(ctx context.Context, in *RepoUpdateRequest, opts ...grpc.CallOption) (*v1alpha1.Repository, error)
	// Deprecated: Do not use.
	// Delete deletes a repository from the configuration
	Delete(ctx context.Context, in *RepoQuery, opts ...grpc.CallOption) (*RepoResponse, error)
	// DeleteRepository deletes a repository from the configuration
	DeleteRepository(ctx context.Context, in *RepoQuery, opts ...grpc.CallOption) (*RepoResponse, error)
	// ValidateAccess validates access to a repository with given parameters
	ValidateAccess(ctx context.Context, in *RepoAccessQuery, opts ...grpc.CallOption) (*RepoResponse, error)
}

type repositoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRepositoryServiceClient(cc grpc.ClientConnInterface) RepositoryServiceClient {
	return &repositoryServiceClient{cc}
}

// Deprecated: Do not use.
func (c *repositoryServiceClient) List(ctx context.Context, in *RepoQuery, opts ...grpc.CallOption) (*v1alpha1.RepositoryList, error) {
	out := new(v1alpha1.RepositoryList)
	err := c.cc.Invoke(ctx, "/apiclient.repository.RepositoryService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryServiceClient) Get(ctx context.Context, in *RepoQuery, opts ...grpc.CallOption) (*v1alpha1.Repository, error) {
	out := new(v1alpha1.Repository)
	err := c.cc.Invoke(ctx, "/apiclient.repository.RepositoryService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryServiceClient) ListRepositories(ctx context.Context, in *RepoQuery, opts ...grpc.CallOption) (*v1alpha1.RepositoryList, error) {
	out := new(v1alpha1.RepositoryList)
	err := c.cc.Invoke(ctx, "/apiclient.repository.RepositoryService/ListRepositories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryServiceClient) ListRefs(ctx context.Context, in *RepoQuery, opts ...grpc.CallOption) (*repository.Refs, error) {
	out := new(repository.Refs)
	err := c.cc.Invoke(ctx, "/apiclient.repository.RepositoryService/ListRefs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryServiceClient) ListApps(ctx context.Context, in *RepoAppsQuery, opts ...grpc.CallOption) (*RepoAppsResponse, error) {
	out := new(RepoAppsResponse)
	err := c.cc.Invoke(ctx, "/apiclient.repository.RepositoryService/ListApps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryServiceClient) GetAppDetails(ctx context.Context, in *RepoAppDetailsQuery, opts ...grpc.CallOption) (*repository.RepoAppDetailsResponse, error) {
	out := new(repository.RepoAppDetailsResponse)
	err := c.cc.Invoke(ctx, "/apiclient.repository.RepositoryService/GetAppDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryServiceClient) GetHelmCharts(ctx context.Context, in *RepoQuery, opts ...grpc.CallOption) (*repository.HelmChartsResponse, error) {
	out := new(repository.HelmChartsResponse)
	err := c.cc.Invoke(ctx, "/apiclient.repository.RepositoryService/GetHelmCharts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *repositoryServiceClient) Create(ctx context.Context, in *RepoCreateRequest, opts ...grpc.CallOption) (*v1alpha1.Repository, error) {
	out := new(v1alpha1.Repository)
	err := c.cc.Invoke(ctx, "/apiclient.repository.RepositoryService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryServiceClient) CreateRepository(ctx context.Context, in *RepoCreateRequest, opts ...grpc.CallOption) (*v1alpha1.Repository, error) {
	out := new(v1alpha1.Repository)
	err := c.cc.Invoke(ctx, "/apiclient.repository.RepositoryService/CreateRepository", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *repositoryServiceClient) Update(ctx context.Context, in *RepoUpdateRequest, opts ...grpc.CallOption) (*v1alpha1.Repository, error) {
	out := new(v1alpha1.Repository)
	err := c.cc.Invoke(ctx, "/apiclient.repository.RepositoryService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryServiceClient) UpdateRepository(ctx context.Context, in *RepoUpdateRequest, opts ...grpc.CallOption) (*v1alpha1.Repository, error) {
	out := new(v1alpha1.Repository)
	err := c.cc.Invoke(ctx, "/apiclient.repository.RepositoryService/UpdateRepository", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *repositoryServiceClient) Delete(ctx context.Context, in *RepoQuery, opts ...grpc.CallOption) (*RepoResponse, error) {
	out := new(RepoResponse)
	err := c.cc.Invoke(ctx, "/apiclient.repository.RepositoryService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryServiceClient) DeleteRepository(ctx context.Context, in *RepoQuery, opts ...grpc.CallOption) (*RepoResponse, error) {
	out := new(RepoResponse)
	err := c.cc.Invoke(ctx, "/apiclient.repository.RepositoryService/DeleteRepository", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryServiceClient) ValidateAccess(ctx context.Context, in *RepoAccessQuery, opts ...grpc.CallOption) (*RepoResponse, error) {
	out := new(RepoResponse)
	err := c.cc.Invoke(ctx, "/apiclient.repository.RepositoryService/ValidateAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RepositoryServiceServer is the server API for RepositoryService service.
// All implementations must embed UnimplementedRepositoryServiceServer
// for forward compatibility
type RepositoryServiceServer interface {
	// Deprecated: Do not use.
	// List returns list of repos or repository credentials
	List(context.Context, *RepoQuery) (*v1alpha1.RepositoryList, error)
	// Get returns a repository or its credentials
	Get(context.Context, *RepoQuery) (*v1alpha1.Repository, error)
	// ListRepositories gets a list of all configured repositories
	ListRepositories(context.Context, *RepoQuery) (*v1alpha1.RepositoryList, error)
	ListRefs(context.Context, *RepoQuery) (*repository.Refs, error)
	// ListApps returns list of apps in the repo
	ListApps(context.Context, *RepoAppsQuery) (*RepoAppsResponse, error)
	// GetAppDetails returns application details by given path
	GetAppDetails(context.Context, *RepoAppDetailsQuery) (*repository.RepoAppDetailsResponse, error)
	// GetHelmCharts returns list of helm charts in the specified repository
	GetHelmCharts(context.Context, *RepoQuery) (*repository.HelmChartsResponse, error)
	// Deprecated: Do not use.
	// Create creates a repo or a repo credential set
	Create(context.Context, *RepoCreateRequest) (*v1alpha1.Repository, error)
	// CreateRepository creates a new repository configuration
	CreateRepository(context.Context, *RepoCreateRequest) (*v1alpha1.Repository, error)
	// Deprecated: Do not use.
	// Update updates a repo or repo credential set
	Update(context.Context, *RepoUpdateRequest) (*v1alpha1.Repository, error)
	// UpdateRepository updates a repository configuration
	UpdateRepository(context.Context, *RepoUpdateRequest) (*v1alpha1.Repository, error)
	// Deprecated: Do not use.
	// Delete deletes a repository from the configuration
	Delete(context.Context, *RepoQuery) (*RepoResponse, error)
	// DeleteRepository deletes a repository from the configuration
	DeleteRepository(context.Context, *RepoQuery) (*RepoResponse, error)
	// ValidateAccess validates access to a repository with given parameters
	ValidateAccess(context.Context, *RepoAccessQuery) (*RepoResponse, error)
	mustEmbedUnimplementedRepositoryServiceServer()
}

// UnimplementedRepositoryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRepositoryServiceServer struct {
}

func (UnimplementedRepositoryServiceServer) List(context.Context, *RepoQuery) (*v1alpha1.RepositoryList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedRepositoryServiceServer) Get(context.Context, *RepoQuery) (*v1alpha1.Repository, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedRepositoryServiceServer) ListRepositories(context.Context, *RepoQuery) (*v1alpha1.RepositoryList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRepositories not implemented")
}
func (UnimplementedRepositoryServiceServer) ListRefs(context.Context, *RepoQuery) (*repository.Refs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRefs not implemented")
}
func (UnimplementedRepositoryServiceServer) ListApps(context.Context, *RepoAppsQuery) (*RepoAppsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListApps not implemented")
}
func (UnimplementedRepositoryServiceServer) GetAppDetails(context.Context, *RepoAppDetailsQuery) (*repository.RepoAppDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppDetails not implemented")
}
func (UnimplementedRepositoryServiceServer) GetHelmCharts(context.Context, *RepoQuery) (*repository.HelmChartsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHelmCharts not implemented")
}
func (UnimplementedRepositoryServiceServer) Create(context.Context, *RepoCreateRequest) (*v1alpha1.Repository, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedRepositoryServiceServer) CreateRepository(context.Context, *RepoCreateRequest) (*v1alpha1.Repository, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRepository not implemented")
}
func (UnimplementedRepositoryServiceServer) Update(context.Context, *RepoUpdateRequest) (*v1alpha1.Repository, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedRepositoryServiceServer) UpdateRepository(context.Context, *RepoUpdateRequest) (*v1alpha1.Repository, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRepository not implemented")
}
func (UnimplementedRepositoryServiceServer) Delete(context.Context, *RepoQuery) (*RepoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedRepositoryServiceServer) DeleteRepository(context.Context, *RepoQuery) (*RepoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRepository not implemented")
}
func (UnimplementedRepositoryServiceServer) ValidateAccess(context.Context, *RepoAccessQuery) (*RepoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateAccess not implemented")
}
func (UnimplementedRepositoryServiceServer) mustEmbedUnimplementedRepositoryServiceServer() {}

// UnsafeRepositoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RepositoryServiceServer will
// result in compilation errors.
type UnsafeRepositoryServiceServer interface {
	mustEmbedUnimplementedRepositoryServiceServer()
}

func RegisterRepositoryServiceServer(s grpc.ServiceRegistrar, srv RepositoryServiceServer) {
	s.RegisterService(&RepositoryService_ServiceDesc, srv)
}

func _RepositoryService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiclient.repository.RepositoryService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServiceServer).List(ctx, req.(*RepoQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepositoryService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiclient.repository.RepositoryService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServiceServer).Get(ctx, req.(*RepoQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepositoryService_ListRepositories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServiceServer).ListRepositories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiclient.repository.RepositoryService/ListRepositories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServiceServer).ListRepositories(ctx, req.(*RepoQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepositoryService_ListRefs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServiceServer).ListRefs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiclient.repository.RepositoryService/ListRefs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServiceServer).ListRefs(ctx, req.(*RepoQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepositoryService_ListApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoAppsQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServiceServer).ListApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiclient.repository.RepositoryService/ListApps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServiceServer).ListApps(ctx, req.(*RepoAppsQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepositoryService_GetAppDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoAppDetailsQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServiceServer).GetAppDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiclient.repository.RepositoryService/GetAppDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServiceServer).GetAppDetails(ctx, req.(*RepoAppDetailsQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepositoryService_GetHelmCharts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServiceServer).GetHelmCharts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiclient.repository.RepositoryService/GetHelmCharts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServiceServer).GetHelmCharts(ctx, req.(*RepoQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepositoryService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiclient.repository.RepositoryService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServiceServer).Create(ctx, req.(*RepoCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepositoryService_CreateRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServiceServer).CreateRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiclient.repository.RepositoryService/CreateRepository",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServiceServer).CreateRepository(ctx, req.(*RepoCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepositoryService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiclient.repository.RepositoryService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServiceServer).Update(ctx, req.(*RepoUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepositoryService_UpdateRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServiceServer).UpdateRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiclient.repository.RepositoryService/UpdateRepository",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServiceServer).UpdateRepository(ctx, req.(*RepoUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepositoryService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiclient.repository.RepositoryService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServiceServer).Delete(ctx, req.(*RepoQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepositoryService_DeleteRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServiceServer).DeleteRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiclient.repository.RepositoryService/DeleteRepository",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServiceServer).DeleteRepository(ctx, req.(*RepoQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepositoryService_ValidateAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoAccessQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServiceServer).ValidateAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiclient.repository.RepositoryService/ValidateAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServiceServer).ValidateAccess(ctx, req.(*RepoAccessQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// RepositoryService_ServiceDesc is the grpc.ServiceDesc for RepositoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RepositoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "apiclient.repository.RepositoryService",
	HandlerType: (*RepositoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _RepositoryService_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _RepositoryService_Get_Handler,
		},
		{
			MethodName: "ListRepositories",
			Handler:    _RepositoryService_ListRepositories_Handler,
		},
		{
			MethodName: "ListRefs",
			Handler:    _RepositoryService_ListRefs_Handler,
		},
		{
			MethodName: "ListApps",
			Handler:    _RepositoryService_ListApps_Handler,
		},
		{
			MethodName: "GetAppDetails",
			Handler:    _RepositoryService_GetAppDetails_Handler,
		},
		{
			MethodName: "GetHelmCharts",
			Handler:    _RepositoryService_GetHelmCharts_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _RepositoryService_Create_Handler,
		},
		{
			MethodName: "CreateRepository",
			Handler:    _RepositoryService_CreateRepository_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _RepositoryService_Update_Handler,
		},
		{
			MethodName: "UpdateRepository",
			Handler:    _RepositoryService_UpdateRepository_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _RepositoryService_Delete_Handler,
		},
		{
			MethodName: "DeleteRepository",
			Handler:    _RepositoryService_DeleteRepository_Handler,
		},
		{
			MethodName: "ValidateAccess",
			Handler:    _RepositoryService_ValidateAccess_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apiclient/repository/repository.proto",
}
