{
  "swagger": "2.0",
  "info": {
    "title": "cmpserver/plugin/plugin.proto",
    "version": "version not set"
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {},
  "definitions": {
    "pluginEnvEntry": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "Name is the name of the variable, usually expressed in uppercase"
        },
        "value": {
          "type": "string",
          "title": "Value is the value of the variable"
        }
      },
      "title": "EnvEntry represents an entry in the application's environment"
    },
    "pluginFile": {
      "type": "object",
      "properties": {
        "chunk": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "pluginManifestRequestMetadata": {
      "type": "object",
      "properties": {
        "appName": {
          "type": "string",
          "title": "appName refers to the ArgoCD Application name"
        },
        "appRelPath": {
          "type": "string",
          "title": "appRelPath points to the application relative path inside the tarball"
        },
        "checksum": {
          "type": "string",
          "title": "checksum is used to verify the integrity of the file"
        },
        "size": {
          "type": "string",
          "format": "int64",
          "title": "size relates to the file size in bytes"
        },
        "env": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/pluginEnvEntry"
          },
          "title": "env is a list with the environment variables needed to generate manifests"
        }
      },
      "description": "ManifestRequestMetadata defines the metada related to the file being sent\nto the CMP server."
    },
    "pluginManifestResponse": {
      "type": "object",
      "properties": {
        "manifests": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "sourceType": {
          "type": "string"
        }
      }
    },
    "pluginParametersAnnouncementResponse": {
      "type": "object",
      "properties": {
        "parameterAnnouncements": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/repositoryParameterAnnouncement"
          }
        }
      },
      "description": "ParametersAnnouncementResponse contains a list of announcements. This list represents all the parameters which a CMP\nis able to accept."
    },
    "pluginRepositoryResponse": {
      "type": "object",
      "properties": {
        "isSupported": {
          "type": "boolean"
        },
        "isDiscoveryEnabled": {
          "type": "boolean"
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "type_url": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "repositoryParameterAnnouncement": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "name is the name identifying a parameter."
        },
        "title": {
          "type": "string",
          "description": "title is a human-readable text of the parameter name."
        },
        "tooltip": {
          "type": "string",
          "description": "tooltip is a human-readable description of the parameter."
        },
        "required": {
          "type": "boolean",
          "description": "required defines if this given parameter is mandatory."
        },
        "itemType": {
          "type": "string",
          "description": "itemType determines the primitive data type represented by the parameter. Parameters are always encoded as\nstrings, but this field lets them be interpreted as other primitive types."
        },
        "collectionType": {
          "type": "string",
          "description": "collectionType is the type of value this parameter holds - either a single value (a string) or a collection\n(array or map). If collectionType is set, only the field with that type will be used. If collectionType is not\nset, `string` is the default. If collectionType is set to an invalid value, a validation error is thrown."
        },
        "string": {
          "type": "string",
          "description": "string is the default value of the parameter if the parameter is a string."
        },
        "array": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "array is the default value of the parameter if the parameter is an array."
        },
        "map": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "map is the default value of the parameter if the parameter is a map."
        }
      }
    },
    "runtimeError": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string"
        },
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    }
  }
}
