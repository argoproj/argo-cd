// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	apiclient "github.com/argoproj/argo-cd/v2/cmpserver/apiclient"

	emptypb "google.golang.org/protobuf/types/known/emptypb"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// ConfigManagementPluginServiceClient is an autogenerated mock type for the ConfigManagementPluginServiceClient type
type ConfigManagementPluginServiceClient struct {
	mock.Mock
}

// CheckPluginConfiguration provides a mock function with given fields: ctx, in, opts
func (_m *ConfigManagementPluginServiceClient) CheckPluginConfiguration(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*apiclient.CheckPluginConfigurationResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CheckPluginConfiguration")
	}

	var r0 *apiclient.CheckPluginConfigurationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *emptypb.Empty, ...grpc.CallOption) (*apiclient.CheckPluginConfigurationResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *emptypb.Empty, ...grpc.CallOption) *apiclient.CheckPluginConfigurationResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apiclient.CheckPluginConfigurationResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *emptypb.Empty, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateManifest provides a mock function with given fields: ctx, opts
func (_m *ConfigManagementPluginServiceClient) GenerateManifest(ctx context.Context, opts ...grpc.CallOption) (apiclient.ConfigManagementPluginService_GenerateManifestClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GenerateManifest")
	}

	var r0 apiclient.ConfigManagementPluginService_GenerateManifestClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...grpc.CallOption) (apiclient.ConfigManagementPluginService_GenerateManifestClient, error)); ok {
		return rf(ctx, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...grpc.CallOption) apiclient.ConfigManagementPluginService_GenerateManifestClient); ok {
		r0 = rf(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(apiclient.ConfigManagementPluginService_GenerateManifestClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetParametersAnnouncement provides a mock function with given fields: ctx, opts
func (_m *ConfigManagementPluginServiceClient) GetParametersAnnouncement(ctx context.Context, opts ...grpc.CallOption) (apiclient.ConfigManagementPluginService_GetParametersAnnouncementClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetParametersAnnouncement")
	}

	var r0 apiclient.ConfigManagementPluginService_GetParametersAnnouncementClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...grpc.CallOption) (apiclient.ConfigManagementPluginService_GetParametersAnnouncementClient, error)); ok {
		return rf(ctx, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...grpc.CallOption) apiclient.ConfigManagementPluginService_GetParametersAnnouncementClient); ok {
		r0 = rf(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(apiclient.ConfigManagementPluginService_GetParametersAnnouncementClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MatchRepository provides a mock function with given fields: ctx, opts
func (_m *ConfigManagementPluginServiceClient) MatchRepository(ctx context.Context, opts ...grpc.CallOption) (apiclient.ConfigManagementPluginService_MatchRepositoryClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for MatchRepository")
	}

	var r0 apiclient.ConfigManagementPluginService_MatchRepositoryClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...grpc.CallOption) (apiclient.ConfigManagementPluginService_MatchRepositoryClient, error)); ok {
		return rf(ctx, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...grpc.CallOption) apiclient.ConfigManagementPluginService_MatchRepositoryClient); ok {
		r0 = rf(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(apiclient.ConfigManagementPluginService_MatchRepositoryClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewConfigManagementPluginServiceClient creates a new instance of ConfigManagementPluginServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConfigManagementPluginServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *ConfigManagementPluginServiceClient {
	mock := &ConfigManagementPluginServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
