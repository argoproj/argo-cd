// Code generated by mockery v1.1.2. DO NOT EDIT.

package mocks

import (
	application "github.com/argoproj/argo-cd/v2/pkg/apiclient/application"

	context "context"

	mock "github.com/stretchr/testify/mock"

	v1alpha1 "github.com/argoproj/argo-cd/v2/pkg/apis/application/v1alpha1"
)

// ArgoCD is an autogenerated mock type for the ArgoCD type
type ArgoCD struct {
	mock.Mock
}

// GetApplication provides a mock function with given fields: ctx, appName
func (_m *ArgoCD) GetApplication(ctx context.Context, appName string) (*v1alpha1.Application, error) {
	ret := _m.Called(ctx, appName)

	var r0 *v1alpha1.Application
	if rf, ok := ret.Get(0).(func(context.Context, string) *v1alpha1.Application); ok {
		r0 = rf(ctx, appName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.Application)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, appName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListApplications provides a mock function with given fields:
func (_m *ArgoCD) ListApplications() ([]v1alpha1.Application, error) {
	ret := _m.Called()

	var r0 []v1alpha1.Application
	if rf, ok := ret.Get(0).(func() []v1alpha1.Application); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]v1alpha1.Application)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSpec provides a mock function with given fields: ctx, spec
func (_m *ArgoCD) UpdateSpec(ctx context.Context, spec *application.ApplicationUpdateSpecRequest) (*v1alpha1.ApplicationSpec, error) {
	ret := _m.Called(ctx, spec)

	var r0 *v1alpha1.ApplicationSpec
	if rf, ok := ret.Get(0).(func(context.Context, *application.ApplicationUpdateSpecRequest) *v1alpha1.ApplicationSpec); ok {
		r0 = rf(ctx, spec)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.ApplicationSpec)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *application.ApplicationUpdateSpecRequest) error); ok {
		r1 = rf(ctx, spec)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
