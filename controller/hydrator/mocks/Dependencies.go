// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	apiclient "github.com/argoproj/argo-cd/v3/reposerver/apiclient"

	mock "github.com/stretchr/testify/mock"

	types "github.com/argoproj/argo-cd/v3/controller/hydrator/types"

	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"

	v1alpha1 "github.com/argoproj/argo-cd/v3/pkg/apis/application/v1alpha1"
)

// Dependencies is an autogenerated mock type for the Dependencies type
type Dependencies struct {
	mock.Mock
}

// AddHydrationQueueItem provides a mock function with given fields: key
func (_m *Dependencies) AddHydrationQueueItem(key types.HydrationQueueKey) {
	_m.Called(key)
}

// GetHydratorCommitMessageTemplate provides a mock function with no fields
func (_m *Dependencies) GetHydratorCommitMessageTemplate() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetHydratorCommitMessageTemplate")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProcessableAppProj provides a mock function with given fields: app
func (_m *Dependencies) GetProcessableAppProj(app *v1alpha1.Application) (*v1alpha1.AppProject, error) {
	ret := _m.Called(app)

	if len(ret) == 0 {
		panic("no return value specified for GetProcessableAppProj")
	}

	var r0 *v1alpha1.AppProject
	var r1 error
	if rf, ok := ret.Get(0).(func(*v1alpha1.Application) (*v1alpha1.AppProject, error)); ok {
		return rf(app)
	}
	if rf, ok := ret.Get(0).(func(*v1alpha1.Application) *v1alpha1.AppProject); ok {
		r0 = rf(app)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.AppProject)
		}
	}

	if rf, ok := ret.Get(1).(func(*v1alpha1.Application) error); ok {
		r1 = rf(app)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProcessableApps provides a mock function with no fields
func (_m *Dependencies) GetProcessableApps() (*v1alpha1.ApplicationList, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetProcessableApps")
	}

	var r0 *v1alpha1.ApplicationList
	var r1 error
	if rf, ok := ret.Get(0).(func() (*v1alpha1.ApplicationList, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *v1alpha1.ApplicationList); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.ApplicationList)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRepoObjs provides a mock function with given fields: app, source, revision, project
func (_m *Dependencies) GetRepoObjs(app *v1alpha1.Application, source v1alpha1.ApplicationSource, revision string, project *v1alpha1.AppProject) ([]*unstructured.Unstructured, *apiclient.ManifestResponse, error) {
	ret := _m.Called(app, source, revision, project)

	if len(ret) == 0 {
		panic("no return value specified for GetRepoObjs")
	}

	var r0 []*unstructured.Unstructured
	var r1 *apiclient.ManifestResponse
	var r2 error
	if rf, ok := ret.Get(0).(func(*v1alpha1.Application, v1alpha1.ApplicationSource, string, *v1alpha1.AppProject) ([]*unstructured.Unstructured, *apiclient.ManifestResponse, error)); ok {
		return rf(app, source, revision, project)
	}
	if rf, ok := ret.Get(0).(func(*v1alpha1.Application, v1alpha1.ApplicationSource, string, *v1alpha1.AppProject) []*unstructured.Unstructured); ok {
		r0 = rf(app, source, revision, project)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*unstructured.Unstructured)
		}
	}

	if rf, ok := ret.Get(1).(func(*v1alpha1.Application, v1alpha1.ApplicationSource, string, *v1alpha1.AppProject) *apiclient.ManifestResponse); ok {
		r1 = rf(app, source, revision, project)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apiclient.ManifestResponse)
		}
	}

	if rf, ok := ret.Get(2).(func(*v1alpha1.Application, v1alpha1.ApplicationSource, string, *v1alpha1.AppProject) error); ok {
		r2 = rf(app, source, revision, project)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetWriteCredentials provides a mock function with given fields: ctx, repoURL, project
func (_m *Dependencies) GetWriteCredentials(ctx context.Context, repoURL string, project string) (*v1alpha1.Repository, error) {
	ret := _m.Called(ctx, repoURL, project)

	if len(ret) == 0 {
		panic("no return value specified for GetWriteCredentials")
	}

	var r0 *v1alpha1.Repository
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*v1alpha1.Repository, error)); ok {
		return rf(ctx, repoURL, project)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *v1alpha1.Repository); ok {
		r0 = rf(ctx, repoURL, project)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.Repository)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, repoURL, project)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PersistAppHydratorStatus provides a mock function with given fields: orig, newStatus
func (_m *Dependencies) PersistAppHydratorStatus(orig *v1alpha1.Application, newStatus *v1alpha1.SourceHydratorStatus) {
	_m.Called(orig, newStatus)
}

// RequestAppRefresh provides a mock function with given fields: appName, appNamespace
func (_m *Dependencies) RequestAppRefresh(appName string, appNamespace string) error {
	ret := _m.Called(appName, appNamespace)

	if len(ret) == 0 {
		panic("no return value specified for RequestAppRefresh")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(appName, appNamespace)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewDependencies creates a new instance of Dependencies. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDependencies(t interface {
	mock.TestingT
	Cleanup(func())
}) *Dependencies {
	mock := &Dependencies{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
