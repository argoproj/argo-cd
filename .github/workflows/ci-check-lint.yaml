name: ArgoCD CI checks

on:
  push:
    branches:
      - 'master' 
  pull_request:
    branches:
      - 'master'

env:
  TEST_TOOLS_TAG: v0.2.0

jobs:
  build:
    name: Build codebase
    runs-on: ubuntu-latest
    env:
      GOPATH: /home/runner/work/argo-cd/argo-cd
      DOCKER_ARGS: null
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          path: src/github.com/argoproj/argo-cd

      - run: mkdir -p $HOME/.cache/go-build

      - name: Restore dependency cache
        uses: actions/cache@v1
        with:
          path: src/github.com/argoproj/argo-cd/vendor
          key: ${{ runner.os }}-go-dep-v2-${{ hashFiles('**/Gopkg.lock') }}

      - name: Restore Docker image cache
        id: cache-docker-image
        uses: actions/cache@v1
        with:
          path: /home/runner/images
          key: ${{ runner.os }}-test-tools-v1-${{ env.TEST_TOOLS_TAG }}

      - name: Import argocd-test-tools image in local Docker store
        run: docker load -i ./images/argocd-test-tools
        if: steps.cache-docker-image.outputs.cache-hit == 'true'

      - name: Ensure Gopkg.lock is in sync with Gopkg.toml
        run: make dep-check
        working-directory: ./src/github.com/argoproj/argo-cd

      - name: Synchronize vendor dependencies
        run: make dep 
        working-directory: ./src/github.com/argoproj/argo-cd

      - name: Restore any build cache for this PR
        uses: actions/cache@v1
        with:
          path: /home/runner/.cache/go-build
          key: ${{ runner.os }}-go-build-v2-${{ env.GITHUB_SHA }}

      - name: Build the codebase
        run: make build
        working-directory: ./src/github.com/argoproj/argo-cd

      # Export Docker image if we hadn't have it in the cache, 
      - name: Export argocd-test-tools Docker image
        run: mkdir -p ./images && docker save -o ./images/argocd-test-tools argoproj/argocd-test-tools:$TEST_TOOLS_TAG
        if: steps.cache-docker-image.outputs.cache-hit != 'true'

      - run: ls -la ./images

  lint:
    needs: 
      - build
    name: Lint codebase
    runs-on: ubuntu-latest
    env:
      GOPATH: /home/runner/work/argo-cd/argo-cd
      DOCKER_ARGS: null
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          path: src/github.com/argoproj/argo-cd

      - name: Restore dependency cache
        id: cache-dependencies
        uses: actions/cache@v1
        with:
          path: src/github.com/argoproj/argo-cd/vendor
          key: ${{ runner.os }}-go-dep-v2-${{ hashFiles('**/Gopkg.lock') }}

      - name: Restore any build cache for this PR
        id: cache-build-cache
        uses: actions/cache@v1
        with:
          path: /home/runner/.cache/go-build
          key: ${{ runner.os }}-go-build-v2-${{ env.GITHUB_SHA }}

      - name: Restore Docker image cache
        id: cache-docker-image
        uses: actions/cache@v1
        with:
          path: /home/runner/images
          key: ${{ runner.os }}-test-tools-v1-${{ env.TEST_TOOLS_TAG }}

      - name: Import argocd-test-tools image in local Docker store
        run: docker load -i ./images/argocd-test-tools

      - name: Run golangci-lint
        run: make lint ARGOCD_LINT_GOGC=50
        working-directory: ./src/github.com/argoproj/argo-cd

      - name: Check that nothing has changed
        run: |
          gDiff=$(git diff)
          if test "$gDiff" != ""; then
            echo "################################################################################"
            echo "golangci-lint has detected & fixed changes. Please fix them in your local repo,"
            echo "commit the changes and push them to re-trigger the check."
            echo "################################################################################"
            git diff
            exit 1
          fi
        working-directory: ./src/github.com/argoproj/argo-cd