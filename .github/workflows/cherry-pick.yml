name: Cherry Pick

on:
  pull_request_target:
    branches:
      - master
    types: ["labeled", "closed"]

jobs:
  cherry-pick:
    name: Cherry Pick
    if: |
      github.event.pull_request.merged == true && (
        (github.event.action == 'labeled' && startsWith(github.event.label.name, 'cherry-pick/')) ||
        (github.event.action == 'closed' && contains(toJSON(github.event.pull_request.labels.*.name), 'cherry-pick/'))
      )
    runs-on: ubuntu-latest
    steps:
      - name: Generate a token
        id: generate-token
        uses: actions/create-github-app-token@a8d616148505b5069dccd32f177bb87d7f39123b # v2.1.1
        with:
          app-id: ${{ vars.CHERRYPICK_APP_ID }}
          private-key: ${{ secrets.CHERRYPICK_APP_PRIVATE_KEY }}

      - name: Checkout repository
        uses: actions/checkout@8410ad0602e1e429cee44a835ae9f77f654a6694  # v4.0.0
        with:
          fetch-depth: 0
          token: ${{ steps.generate-token.outputs.token }}

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Cherry pick commit
        id: cherry-pick
        run: |
          set -e

          # Extract data directly from GitHub event context
          MERGE_COMMIT="${{ github.event.pull_request.merge_commit_sha }}"
          
          # Extract target branch from labels
          if [[ "${{ github.event.action }}" == "labeled" ]]; then
            # Label was just added - use it directly
            CHERRY_PICK_LABEL="${{ github.event.label.name }}"
          else
            # PR was closed - find cherry-pick label from all labels
            CHERRY_PICK_LABEL=$(echo '${{ toJSON(github.event.pull_request.labels) }}' | jq -r '.[] | select(.name | startswith("cherry-pick/")) | .name' | head -1)
          fi
          
          VERSION_NUMBER="${CHERRY_PICK_LABEL#cherry-pick/}"
          echo "version_number=$VERSION_NUMBER" >> "$GITHUB_OUTPUT"
          TARGET_BRANCH="release-$VERSION_NUMBER"  # Remove 'cherry-pick/' prefix with `release-` prefix
          
          echo "üçí Cherry-picking commit $MERGE_COMMIT to branch $TARGET_BRANCH"
          
          # Check if target branch exists
          if ! git show-ref --verify --quiet "refs/remotes/origin/$TARGET_BRANCH"; then
            echo "‚ùå Target branch '$TARGET_BRANCH' does not exist"
            exit 1
          fi
          
          # Create new branch for cherry-pick
          CHERRY_PICK_BRANCH="cherry-pick-${{ github.event.pull_request.number }}-to-${TARGET_BRANCH}"
          git checkout -b "$CHERRY_PICK_BRANCH" "origin/$TARGET_BRANCH"
          
          # Perform cherry-pick
          if git cherry-pick -m 1 "$MERGE_COMMIT"; then
            echo "‚úÖ Cherry-pick successful"

            # Extract Signed-off-by from the cherry-pick commit
            SIGNOFF=$(git log -1 --pretty=format:"%B" | grep -E '^Signed-off-by:' || echo "")

            # Push the new branch
            git push origin "$CHERRY_PICK_BRANCH"

            # Save data for PR creation
            echo "branch_name=$CHERRY_PICK_BRANCH" >> "$GITHUB_OUTPUT"
            echo "signoff=$SIGNOFF" >> "$GITHUB_OUTPUT"
            echo "target_branch=$TARGET_BRANCH" >> "$GITHUB_OUTPUT"
          else
            echo "‚ùå Cherry-pick failed due to conflicts"
            git cherry-pick --abort
            exit 1
          fi

      - name: Create Pull Request
        run: |
          # Create cherry-pick PR
          gh pr create \
            --title "${{ github.event.pull_request.title }} (cherry-pick #${{ github.event.pull_request.number }} for ${{ steps.cherry-pick.outputs.version_number }})" \
            --body "Cherry-picked ${{ github.event.pull_request.title }} (#${{ github.event.pull_request.number }})

          ${{ steps.cherry-pick.outputs.signoff }}" \
            --base "${{ steps.cherry-pick.outputs.target_branch }}" \
            --head "${{ steps.cherry-pick.outputs.branch_name }}"
          
          # Comment on original PR
          gh pr comment ${{ github.event.pull_request.number }} \
            --body "üçí Cherry-pick PR created: #$(gh pr list --head ${{ steps.cherry-pick.outputs.branch_name }} --json number --jq '.[0].number')"
        env:
          GH_TOKEN: ${{ steps.generate-token.outputs.token }}

      - name: Comment on failure
        if: failure()
        run: |
          gh pr comment ${{ github.event.pull_request.number }} \
            --body "‚ùå Cherry-pick failed. Please check the workflow logs for details."
        env:
          GH_TOKEN: ${{ steps.generate-token.outputs.token }}