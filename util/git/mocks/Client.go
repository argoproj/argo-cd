// Code generated by mockery v1.0.0
package mocks

import mock "github.com/stretchr/testify/mock"

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// Checkout provides a mock function with given fields: repoPath, sha
func (_m *Client) Checkout(repoPath string, sha string) (string, error) {
	ret := _m.Called(repoPath, sha)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(repoPath, sha)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(repoPath, sha)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CloneOrFetch provides a mock function with given fields: url, username, password, sshPrivateKey, repoPath
func (_m *Client) CloneOrFetch(url string, username string, password string, sshPrivateKey string, repoPath string) error {
	ret := _m.Called(url, username, password, sshPrivateKey, repoPath)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, string) error); ok {
		r0 = rf(url, username, password, sshPrivateKey, repoPath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CommitSHA provides a mock function with given fields: repoPath
func (_m *Client) CommitSHA(repoPath string) (string, error) {
	ret := _m.Called(repoPath)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(repoPath)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(repoPath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Reset provides a mock function with given fields: repoPath
func (_m *Client) Reset(repoPath string) error {
	ret := _m.Called(repoPath)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(repoPath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
