// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/argoproj/argo-cd/v3/pkg/apis/application/v1alpha1"
	mock "github.com/stretchr/testify/mock"
)

// NewRepoCredsDB creates a new instance of RepoCredsDB. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepoCredsDB(t interface {
	mock.TestingT
	Cleanup(func())
}) *RepoCredsDB {
	mock := &RepoCredsDB{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// RepoCredsDB is an autogenerated mock type for the RepoCredsDB type
type RepoCredsDB struct {
	mock.Mock
}

type RepoCredsDB_Expecter struct {
	mock *mock.Mock
}

func (_m *RepoCredsDB) EXPECT() *RepoCredsDB_Expecter {
	return &RepoCredsDB_Expecter{mock: &_m.Mock}
}

// GetRepoCredsBySecretName provides a mock function for the type RepoCredsDB
func (_mock *RepoCredsDB) GetRepoCredsBySecretName(context1 context.Context, secretName string) (*v1alpha1.RepoCreds, error) {
	ret := _mock.Called(context1, secretName)

	if len(ret) == 0 {
		panic("no return value specified for GetRepoCredsBySecretName")
	}

	var r0 *v1alpha1.RepoCreds
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*v1alpha1.RepoCreds, error)); ok {
		return returnFunc(context1, secretName)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *v1alpha1.RepoCreds); ok {
		r0 = returnFunc(context1, secretName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.RepoCreds)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(context1, secretName)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// RepoCredsDB_GetRepoCredsBySecretName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRepoCredsBySecretName'
type RepoCredsDB_GetRepoCredsBySecretName_Call struct {
	*mock.Call
}

// GetRepoCredsBySecretName is a helper method to define mock.On call
//   - context1 context.Context
//   - secretName string
func (_e *RepoCredsDB_Expecter) GetRepoCredsBySecretName(context1 interface{}, secretName interface{}) *RepoCredsDB_GetRepoCredsBySecretName_Call {
	return &RepoCredsDB_GetRepoCredsBySecretName_Call{Call: _e.mock.On("GetRepoCredsBySecretName", context1, secretName)}
}

func (_c *RepoCredsDB_GetRepoCredsBySecretName_Call) Run(run func(context1 context.Context, secretName string)) *RepoCredsDB_GetRepoCredsBySecretName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *RepoCredsDB_GetRepoCredsBySecretName_Call) Return(repoCreds *v1alpha1.RepoCreds, err error) *RepoCredsDB_GetRepoCredsBySecretName_Call {
	_c.Call.Return(repoCreds, err)
	return _c
}

func (_c *RepoCredsDB_GetRepoCredsBySecretName_Call) RunAndReturn(run func(context1 context.Context, secretName string) (*v1alpha1.RepoCreds, error)) *RepoCredsDB_GetRepoCredsBySecretName_Call {
	_c.Call.Return(run)
	return _c
}
