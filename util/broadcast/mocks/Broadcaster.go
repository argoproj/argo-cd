// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Broadcaster is an autogenerated mock type for the Broadcaster type
type Broadcaster[T interface{}] struct {
	mock.Mock
}

// OnAdd provides a mock function with given fields: _a0
func (_m *Broadcaster[T]) OnAdd(_a0 interface{}) {
	_m.Called(_a0)
}

// OnDelete provides a mock function with given fields: _a0
func (_m *Broadcaster[T]) OnDelete(_a0 interface{}) {
	_m.Called(_a0)
}

// OnUpdate provides a mock function with given fields: _a0, _a1
func (_m *Broadcaster[T]) OnUpdate(_a0 interface{}, _a1 interface{}) {
	_m.Called(_a0, _a1)
}

// Subscribe provides a mock function with given fields: ch, filters
func (_m *Broadcaster[T]) Subscribe(ch chan *T, filters ...func(*T) bool) func() {
	_va := make([]interface{}, len(filters))
	for _i := range filters {
		_va[_i] = filters[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ch)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 func()
	if rf, ok := ret.Get(0).(func(chan *T, ...func(*T) bool) func()); ok {
		r0 = rf(ch, filters...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func())
		}
	}

	return r0
}

// NewBroadcaster creates a new instance of Broadcaster. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBroadcaster[T interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *Broadcaster[T] {
	mock := &Broadcaster[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
