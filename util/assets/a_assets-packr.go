// Code generated by github.com/gobuffalo/packr. DO NOT EDIT.

package assets

import "github.com/gobuffalo/packr"

// You can use the "packr clean" command to clean up this,
// and any other packr generated files.
func init() {
	packr.PackJSONBytes("../../assets", "badge.svg", "\"PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHhtbG5zOnhsaW5rPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rIiB3aWR0aD0iMTMxIiBoZWlnaHQ9IjIwIj4KICAgIDxsaW5lYXJHcmFkaWVudCBpZD0iYiIgeDI9IjAiIHkyPSIxMDAlIj4KICAgICAgICA8c3RvcCBvZmZzZXQ9IjAiIHN0b3AtY29sb3I9IiNiYmIiIHN0b3Atb3BhY2l0eT0iLjEiLz4KICAgICAgICA8c3RvcCBvZmZzZXQ9IjEiIHN0b3Atb3BhY2l0eT0iLjEiLz4KICAgIDwvbGluZWFyR3JhZGllbnQ+CiAgICA8Y2xpcFBhdGggaWQ9ImEiPgogICAgICAgIDxyZWN0IHdpZHRoPSIxMzEiIGhlaWdodD0iMjAiIHJ4PSIzIiBmaWxsPSIjZmZmIi8+CiAgICA8L2NsaXBQYXRoPgogICAgPGcgY2xpcC1wYXRoPSJ1cmwoI2EpIj4KICAgICAgICA8cGF0aCBpZD0ibGVmdFBhdGgiIGZpbGw9IiM1NTUiIGQ9Ik0wIDBoNzR2MjBIMHoiLz4KICAgICAgICA8cGF0aCBpZD0icmlnaHRQYXRoIiBmaWxsPSIjNGMxIiBkPSJNNzQgMGg1N3YyMEg3NHoiLz4KICAgICAgICA8cGF0aCBmaWxsPSJ1cmwoI2IpIiBkPSJNMCAwaDEzMXYyMEgweiIvPgogICAgPC9nPgogICAgPGcgZmlsbD0iI2ZmZiIgdGV4dC1hbmNob3I9Im1pZGRsZSIgZm9udC1mYW1pbHk9IkRlamFWdSBTYW5zLFZlcmRhbmEsR2VuZXZhLHNhbnMtc2VyaWYiIGZvbnQtc2l6ZT0iOTAiPgogICAgICAgIDxpbWFnZSB4PSI1IiB5PSIzIiB3aWR0aD0iMTQiIGhlaWdodD0iMTQiIHhsaW5rOmhyZWY9ImRhdGE6aW1hZ2UvcG5nO2Jhc2U2NCxpVkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBQjhBQUFBZUNBWUFBQURVOHNXY0FBQUFCR2RCVFVFQUFMR1BDL3hoQlFBQUFDQmpTRkpOQUFCNkpnQUFnSVFBQVBvQUFBQ0E2QUFBZFRBQUFPcGdBQUE2bUFBQUYzQ2N1bEU4QUFBQUNYQklXWE1BQUFCUEFBQUFUd0ZqaXYzWEFBQUNDMmxVV0hSWVRVdzZZMjl0TG1Ga2IySmxMbmh0Y0FBQUFBQUFQSGc2ZUcxd2JXVjBZU0I0Yld4dWN6cDRQU0poWkc5aVpUcHVjenB0WlhSaEx5SWdlRHA0YlhCMGF6MGlXRTFRSUVOdmNtVWdOUzQwTGpBaVBnb2dJQ0E4Y21SbU9sSkVSaUI0Yld4dWN6cHlaR1k5SW1oMGRIQTZMeTkzZDNjdWR6TXViM0puTHpFNU9Ua3ZNREl2TWpJdGNtUm1MWE41Ym5SaGVDMXVjeU1pUGdvZ0lDQWdJQ0E4Y21SbU9rUmxjMk55YVhCMGFXOXVJSEprWmpwaFltOTFkRDBpSWdvZ0lDQWdJQ0FnSUNBZ0lDQjRiV3h1Y3pwMGFXWm1QU0pvZEhSd09pOHZibk11WVdSdlltVXVZMjl0TDNScFptWXZNUzR3THlJK0NpQWdJQ0FnSUNBZ0lEeDBhV1ptT2xKbGMyOXNkWFJwYjI1VmJtbDBQakk4TDNScFptWTZVbVZ6YjJ4MWRHbHZibFZ1YVhRK0NpQWdJQ0FnSUNBZ0lEeDBhV1ptT2tOdmJYQnlaWE56YVc5dVBqRThMM1JwWm1ZNlEyOXRjSEpsYzNOcGIyNCtDaUFnSUNBZ0lDQWdJRHgwYVdabU9rOXlhV1Z1ZEdGMGFXOXVQakU4TDNScFptWTZUM0pwWlc1MFlYUnBiMjQrQ2lBZ0lDQWdJQ0FnSUR4MGFXWm1PbEJvYjNSdmJXVjBjbWxqU1c1MFpYSndjbVYwWVhScGIyNCtNand2ZEdsbVpqcFFhRzkwYjIxbGRISnBZMGx1ZEdWeWNISmxkR0YwYVc5dVBnb2dJQ0FnSUNBOEwzSmtaanBFWlhOamNtbHdkR2x2Ymo0S0lDQWdQQzl5WkdZNlVrUkdQZ284TDNnNmVHMXdiV1YwWVQ0S0QwVXFrd0FBQ3BaSlJFRlVTQTExVm5tUUZjVVovL3FZNDUyN2J5OTJXV1RYd0hLcUVKRERnME1RVWlvS1NXb3BLNG9hUzlSQWxNb2ZVU1BHYkZsQlNhVmlLb21nUVNObUlkRUNrVVM4b3BoZG96RUpBcktvS0NzZ0lGbFkyUHU5TjI5bWVybzdYNzhGeENSMlZiODMwOVBUdisvNGZiOXZDSHoxSUkyTm0ram16WXVsMmJKc2RsTXlPN0x5UEdsWnRZcVFjazFaSENnd0xaV2lST2VKZ0I3YkR6cFliLzdvMHkvZW16WHY0UHRzOCtaR0JVQzB1Zi92UWY1N3dkdzNOVFZSbk9ZRmZYdmo2cEpjYWRrVW1iREdSb3hWU0VJdFNZQVFRclVtUkJQODFWb1Jwa0ZUSlVNdVpBLzNnLzI4cTNkbjg5Yjd1ODg1RDQzNDh2Z2Y4TlBBeFkwMzNMSm1TbERpemxTT1U5NGY2VWhvSGFaZEMvM1FDSFdPTjJnRFlCaEFZeVJBV2d5RDRRU2kxODE1ZjI5Kyt2di8rQ29EMkxtMm5BRkdsOG1uZHp5eE1NZ2s1L2lXNnh6UGkveFZrK295RTgrdkxOdDE0RlIvMHVZVzE0b3gwSXdVSjRaQWFVcEFhYUJFWUJ5aXlMYmlrV1dObm5UaHZQSXh1K0w3MTdhdVZlYjgxdGJXc3lrNEMzNHU4STNMbmxoY1NDYW1lTXp5a2c3VHd6T0pHSVlXUWorTSt2b0xZY1NvL2h4WTFFNjVGRUNVcTRHNFJGUDBuU2pNQ01WQUlJS1VuT0hrdzkwTDZxcS92WHZiaDAydHJWOHlvQmgyRTBOTVk5R2lHKzU4ZklHWFRGNmVweXc3Sk9uYW1aUWJ6L3RDbkRyVlZ6Z3FxZHdUVDBaVGRXRE4wd1BwTWgzWlBacUhMU3c5OEM3WTRSd3RuQW9kc1R3R0FnMHBwa2N4cmxrWUpGSUQrWjBibi96ZWxzRkltelFSWGZTY05KRmlPRzY4OWRjVC9GVDZHemxxZWRWSlRIUnBQSDZ5ei9QeWZUbHgySXJMQ3B2U2RXcnY1T1hrWDlmT0pCL01uYXozWHpJdGFwK3lNRG95WmdFRTdGMVNjZUlnaHJ5ZVJOd25UQmtFcWhSSXhpTEY2YkNwRFhOeWJXMnYvcnV4Y1R6YnQyK3pabWZDdldUK3p4TmhiZWszY3hhUGx5WXNYVldTU0hUMjVyeEMzbytPV0s2YURuN3NaM3I3OVpOWTI4dzQ1RXN4dWh3NVJqbVZ2RVFQbEl3Z1I4Yk9pRTdWZHJQYUEyK1RlR0VFaEZiaHRBRW1HNXB6azVXcXFiV1RQdjdqQzhzTHBneE5TUldaclVlV1RBZ29yN0VZOXl0VGlVUnZ6ZzhHc2tHVTV4eEtrYzMzeURjWDF5Yzd4M2lqTHhGK3paZ29FbGpnQ3JTaVhPV0lHL1dHcmppZkh4bDFWOWl5ZUt3VzFsSE5vNVNLbURtY1lpbml2d2hqVnBrb3I1NXNRajkrL0Q0TU85YnBMVzhSTjZ6SnpNdmJQRFVrSGFlY0UzNjhOMStJVVVKZkltNWhQZjF3MmtUZWRsbS9MZ250bXFFV0VRR1QzU2NKWVVoMk5JeGlpV3VwU1VGYXNvcjFWZ3pYdlBBVGZ2NkJDM1JvcTBFOU1McUFYS1FjQWUxcnFpL2R2K3EzRHdRVXc2ZGpZNnRpQWFHMWpMRXc3bkFuNjRXaGNTdFBxWnFwQTZjaGFwOGFhZ2UwNzdHd2JRY0pEeDhBd3EzVDNESGxiZWlqVUhXd3l0SEZ1dWl6Q1RlcmdkUStZb2N4TFJIVlBOY0VTUkFKeHFvNjBuYlN2RXh2dnZXeDIzTUNWdnVjRHlSdDVoaXR3RFJISEcwOXBaaWFUN01sU1VkVWh0UUdadHRZUmR3QTRXbkZRakZuREE0TFg3VWRJbGdNWXBhb3VCZ0dNbnVCS1ZOL1poZ0JSQ01WeW5OQUhPZlJtNzc3cTRVY3JXM0VaeGNFbkQva2NsWWxwVmFGS0ZJWnJJUnRsdXZkbHMvRzlJbm5MWjlmcExYb0pqd1pBelprREo1bWprSWo4SFRDS0VUSDlvRDBlb2lrTVNEUTVjVHJMclVnNFFvYUZseFVINU1kWXk2eUFGQWFZQkhlZDZPRGtNUE9rTWNGWmdnWkthMFNrYUwvak1lRHBxNUQxVmV6OTY5M1Yvd05VZzFqUVJZOHlMWDhCY1NiYThBYU9neUJPZHF0UUJ6N0ROajhsWkNlTlk5U042YWlEM2JUT2M4OXMyaWxpRFZ2S2EzdUd4ZjZkb1FBeFlFMm9CYm0wSFFQRzVJeHFLaE9nOVpwU1NRaitwRFUranY1dDc5MTNzcFY1YzcwR2NxTEp3Z01HdzZaSlV1QkxiZ0hQVzBENHJnUWRld0R2bkFsbE41OEIwRDkxOEF2elZCbjNqV2kvcDRIcTIvcytldDFVUmdCUmxWUk1HVnZCdElUZnd5dXlZUEFvSVJtV1NJckVxalpXMU1sL3FON2R0Uld6cHRmQnpYRG9hZXJpNlRpY1doZXM4WnNnOWlNT2FBeVUwRDNmdzRxZFNFa3JyeXF1UDc3eHgrSFpDd0czVDA5SEVaZkNCVVhUeGgxMjVIOVZaOVNIcDFPZlpGNGFFV0k5TU0xQWhtaVZDbWFJd1Y2YTJGNWdlMnE4czdPQkI4eXRQaU9aZHV3NnBGSFlPUzRjVVVRR3NOV1hqNE1WTFlkYUdVOVVBUTBvMkg4ZUhoNDlXcEFJVFJlS3FkbUdDMFBzdkYySkI0R3UraTVScUtnNUpTaTgybU9udTlHWUdFaHdiRmpTT1hhZEpJSTdQYTZFZDNod1U4aWdBVThsVTdEL2ZmZFoxcEZFVVQxOVlJK3NSOW9aZ0xJam84aDZ1c0R1Mm9JekpweE9jNFpwaEtRdG9xRnh3Nkx6eElWL1JNeGthYlNVUEFKUnozQTVvYzUweDlUN0xmM3hrUjBSMHhHU1MrSVJJRlFPVVVVa3F2R1hkUjV0R1huTG1qYllYSTBPTENKeWtJQnZGZTJBQlZIZ0NRcWdNcGprSDl4RTlJWTdjU2dHZDB3KzhtT1ZqaXk2OERPaCtzYXV1c2l3U004RjExbmxoQ20zOS9TdlA3dXg0cU5aVmZiYS8wVEoxODNJczlvcFd0eEVYZTVFL2NDK1k1YmYrQ2lsbWN6cWFDL0ppZ0VPampZVHJ3dHp3Qjh0QW40a0pGR01JRW15MEI5OGdiNEI3dEFZaW1IbmNkMTlPYkxyUDI1clcwL3JiNzZwUXFzb0tURWtLSmdvVDY0YmlDT2JWeDM1eHZHR3o2N3FZVzNObDBSV1lIL2Z0eG1vN3B5ZnBTb0tGRmpFaUx4aEU3M2pYYXVlSFhsR3crUFo2OHJTOHBRMDFRbG9kVWpUcWNBZmNRbzhxR2pRQjM2RXdRZmJGQXVGOHdqWmJtTnRTdGVmWjRuQzB1aWJLSUhlejkyQWVaRVVsbjV3b2NHdUxHeHlVYmcyY1ZFRnA1YTlwRnoxMU1IL1pDUDZNMFY4Z21ieFdaTDM1SzJwYUZtVW1qRGdDWEFNUWtqcXY4d2dGTUdCRlZTQ3c4ZzF3V3NyQjVJQnJUREF2QjBlYUFraFZIQ2VHelNRRFVtM2JFOS8xaHMvZDdkQmh5NWFTcUFhTk5XTjZNdmRuOStlMEtHZmw4aFpDZDZ2QndxQUJtSVNLU2tDZ2txci9hNlFNV3J3THBzS2FZV2hmcndpMWlrZldCTnZRbVVoWEl0QWx6bklDTWxjb3BGRk5YY0VBMjV3QncvRUltczJMNE8xb25aczV1NDZhYkZVc0lMRFdoQWMvT0tvN0grL090dUVGcWFVY3NtSUU4Q1I0N3pFTXNTdUp2UlFjY2VPRFZtT3FSL3VBSEtmdEFDNlIrOUFLY216Z1Z4Y2k5cWV4d0xUSURaMzQrTVI2RlZFclhFQ1h3N2tjKzMvRzdqOGdQRzBkYldKbVFudW0xK3pEajNVMnJKMHJXenZGUnludS9Zc2tNVGI1dmV0bXdJN3h5ZWc3UjBnMDcyeW5FR3dhMFB3WlRSRGJEbjBHR0kxajBJaTJwQ0tQQ3lxSlRsK2VlaTl0T2w1S3IxZVUyc2V1RzVaTUJ2MmZqVUlNa1F5bUFXQzZqb3VRRTNqZGxZWmE0M1BMbnNMYmNuKytlWVZ3aTZGQ1FrdFRDRW1PM1FBeDJyaE9sbEFsNmJPd3NhaGcyRkRUTXZoUmtsV1ZTVU1reGNXRXlISkZiVXF5Q1c5QXRSU1YvL0sxOEFGNFhtYk9XZUJUZWdDRjc4dWpUWGYzaG0rWHZUZW80OUc4LzY3U2crQTBhME9HYzZDRHpJbEZiREwzKzhHUFl1dXhMV1A3QVl5c3BySVF4OVlOamR6QWdseVZrRDNxR3ZkM2RzV3Z2MGluZk0ycUJqNTN6cjQ5clpzSnNOWndhMldlVFRGeHRQM0wxb2UxVkN6aDNBV3FPTTJGSkpzRkJ3Yk11Q1VBZ1F5QXFHclZWSjdaZHd5ejJSWlMvWC9HYnJndUo1ZU5ZZ3loZm5uY0g1ditEbVljZnQxOFkxVDVTN2ZsOWpQTU4rNGFNNklwZVFQbWd4VGhOQTVBbnVKRmhJZUkydEhhZmlOcUVVVzFYUUwrOE5yZlJ6bkVOUDFkck51VE9BNS81L0tlem1BWjR6YUpCU2RWYVV2UWs1UHNOVGVxZnJNc0tRT3VpNUxHS2liQkFqbUtnU1JrL1JJTWxjOEJpV0NMYkk5NUR4MDVqeWJyTWtmc2greGZnUGYraEgwQUM0T2xzQUFBQUFTVVZPUks1Q1lJST0iLz4KCiAgICAgICAgPHRleHQgaWQ9ImxlZnRUZXh0MSIgeD0iNDM1IiB5PSIxNTAiIGZpbGw9IiMwMTAxMDEiIGZpbGwtb3BhY2l0eT0iLjMiIHRyYW5zZm9ybT0ic2NhbGUoLjEpIiB0ZXh0TGVuZ3RoPSI0NzAiPjwvdGV4dD4KICAgICAgICA8dGV4dCBpZD0ibGVmdFRleHQyIiB4PSI0MzUiIHk9IjE0MCIgdHJhbnNmb3JtPSJzY2FsZSguMSkiIHRleHRMZW5ndGg9IjQ3MCI+PC90ZXh0PgoKICAgICAgICA8dGV4dCBpZD0icmlnaHRUZXh0MSIgeD0iOTk1IiB5PSIxNTAiIGZpbGw9IiMwMTAxMDEiIGZpbGwtb3BhY2l0eT0iLjMiIHRyYW5zZm9ybT0ic2NhbGUoLjEpIiB0ZXh0TGVuZ3RoPSI0NzAiPjwvdGV4dD4KICAgICAgICA8dGV4dCBpZD0icmlnaHRUZXh0MSIgeD0iOTk1IiB5PSIxNDAiIHRyYW5zZm9ybT0ic2NhbGUoLjEpIiB0ZXh0TGVuZ3RoPSI0NzAiPjwvdGV4dD48L2c+Cjwvc3ZnPgo=\"")
	packr.PackJSONBytes("../../assets", "builtin-policy.csv", "\"IyBCdWlsdC1pbiBwb2xpY3kgd2hpY2ggZGVmaW5lcyB0d28gcm9sZXM6IHJvbGU6cmVhZG9ubHkgYW5kIHJvbGU6YWRtaW4sCiMgYW5kIGFkZGl0aW9uYWxseSBhc3NpZ25zIHRoZSBhZG1pbiB1c2VyIHRvIHRoZSByb2xlOmFkbWluIHJvbGUuCiMgVGhlcmUgYXJlIHR3byBwb2xpY3kgZm9ybWF0czoKIyAxLiBBcHBsaWNhdGlvbnMgKHdoaWNoIGJlbG9uZyB0byBhIHByb2plY3QpOgojIHAsIDx1c2VyL2dyb3VwPiwgPHJlc291cmNlPiwgPGFjdGlvbj4sIDxwcm9qZWN0Pi88b2JqZWN0PgojIDIuIEFsbCBvdGhlciByZXNvdXJjZXM6CiMgcCwgPHVzZXIvZ3JvdXA+LCA8cmVzb3VyY2U+LCA8YWN0aW9uPiwgPG9iamVjdD4KCnAsIHJvbGU6cmVhZG9ubHksIGFwcGxpY2F0aW9ucywgZ2V0LCAqLyosIGFsbG93CnAsIHJvbGU6cmVhZG9ubHksIGNsdXN0ZXJzLCBnZXQsICosIGFsbG93CnAsIHJvbGU6cmVhZG9ubHksIHJlcG9zaXRvcmllcywgZ2V0LCAqLCBhbGxvdwpwLCByb2xlOnJlYWRvbmx5LCBwcm9qZWN0cywgZ2V0LCAqLCBhbGxvdwoKcCwgcm9sZTphZG1pbiwgYXBwbGljYXRpb25zLCBjcmVhdGUsICovKiwgYWxsb3cKcCwgcm9sZTphZG1pbiwgYXBwbGljYXRpb25zLCB1cGRhdGUsICovKiwgYWxsb3cKcCwgcm9sZTphZG1pbiwgYXBwbGljYXRpb25zLCBkZWxldGUsICovKiwgYWxsb3cKcCwgcm9sZTphZG1pbiwgYXBwbGljYXRpb25zLCBzeW5jLCAqLyosIGFsbG93CnAsIHJvbGU6YWRtaW4sIGFwcGxpY2F0aW9ucywgb3ZlcnJpZGUsICovKiwgYWxsb3cKcCwgcm9sZTphZG1pbiwgY2x1c3RlcnMsIGNyZWF0ZSwgKiwgYWxsb3cKcCwgcm9sZTphZG1pbiwgY2x1c3RlcnMsIHVwZGF0ZSwgKiwgYWxsb3cKcCwgcm9sZTphZG1pbiwgY2x1c3RlcnMsIGRlbGV0ZSwgKiwgYWxsb3cKcCwgcm9sZTphZG1pbiwgcmVwb3NpdG9yaWVzLCBjcmVhdGUsICosIGFsbG93CnAsIHJvbGU6YWRtaW4sIHJlcG9zaXRvcmllcywgdXBkYXRlLCAqLCBhbGxvdwpwLCByb2xlOmFkbWluLCByZXBvc2l0b3JpZXMsIGRlbGV0ZSwgKiwgYWxsb3cKcCwgcm9sZTphZG1pbiwgcHJvamVjdHMsIGNyZWF0ZSwgKiwgYWxsb3cKcCwgcm9sZTphZG1pbiwgcHJvamVjdHMsIHVwZGF0ZSwgKiwgYWxsb3cKcCwgcm9sZTphZG1pbiwgcHJvamVjdHMsIGRlbGV0ZSwgKiwgYWxsb3cKCmcsIHJvbGU6YWRtaW4sIHJvbGU6cmVhZG9ubHkKZywgYWRtaW4sIHJvbGU6YWRtaW4K\"")
	packr.PackJSONBytes("../../assets", "model.conf", "\"W3JlcXVlc3RfZGVmaW5pdGlvbl0KciA9IHN1YiwgcmVzLCBhY3QsIG9iagoKW3BvbGljeV9kZWZpbml0aW9uXQpwID0gc3ViLCByZXMsIGFjdCwgb2JqLCBlZnQKCltyb2xlX2RlZmluaXRpb25dCmcgPSBfLCBfCgpbcG9saWN5X2VmZmVjdF0KZSA9IHNvbWUod2hlcmUgKHAuZWZ0ID09IGFsbG93KSkgJiYgIXNvbWUod2hlcmUgKHAuZWZ0ID09IGRlbnkpKQoKW21hdGNoZXJzXQptID0gZyhyLnN1YiwgcC5zdWIpICYmIGtleU1hdGNoKHIucmVzLCBwLnJlcykgJiYga2V5TWF0Y2goci5hY3QsIHAuYWN0KSAmJiBrZXlNYXRjaChyLm9iaiwgcC5vYmopCg==\"")
	packr.PackJSONBytes("../../assets", "swagger.json", "\"\"")
}
