package assets

import "github.com/gobuffalo/packr"

// !!! GENERATED FILE !!!
// Do NOT hand edit this file!!
// It is recommended that you DO NOT check into this file into SCM.
// We STRONGLY recommend you delete this file after you have built your
// Go binary. You can use the "packr clean" command to clean up this,
// and any other packr generated files.
func init() {
		packr.PackJSONBytes("../../assets", "builtin-policy.csv", "\"IyBCdWlsdC1pbiBwb2xpY3kgd2hpY2ggZGVmaW5lcyB0d28gcm9sZXM6IHJvbGU6cmVhZG9ubHkgYW5kIHJvbGU6YWRtaW4sCiMgYW5kIGFkZGl0aW9uYWxseSBhc3NpZ25zIHRoZSBhZG1pbiB1c2VyIHRvIHRoZSByb2xlOmFkbWluIHJvbGUuCiMgVGhlcmUgYXJlIHR3byBwb2xpY3kgZm9ybWF0czoKIyAxLiBBcHBsaWNhdGlvbnMgKHdoaWNoIGJlbG9uZyB0byBhIHByb2plY3QpOgojIHAsIDx1c2VyL2dyb3VwPiwgPHJlc291cmNlPiwgPGFjdGlvbj4sIDxwcm9qZWN0Pi88b2JqZWN0PgojIDIuIEFsbCBvdGhlciByZXNvdXJjZXM6CiMgcCwgPHVzZXIvZ3JvdXA+LCA8cmVzb3VyY2U+LCA8YWN0aW9uPiwgPG9iamVjdD4KCnAsIHJvbGU6cmVhZG9ubHksIGFwcGxpY2F0aW9ucywgZ2V0LCAqLyosIGFsbG93CnAsIHJvbGU6cmVhZG9ubHksIGNsdXN0ZXJzLCBnZXQsICosIGFsbG93CnAsIHJvbGU6cmVhZG9ubHksIHJlcG9zaXRvcmllcywgZ2V0LCAqLCBhbGxvdwpwLCByb2xlOnJlYWRvbmx5LCBwcm9qZWN0cywgZ2V0LCAqLCBhbGxvdwoKcCwgcm9sZTphZG1pbiwgYXBwbGljYXRpb25zLCBjcmVhdGUsICovKiwgYWxsb3cKcCwgcm9sZTphZG1pbiwgYXBwbGljYXRpb25zLCB1cGRhdGUsICovKiwgYWxsb3cKcCwgcm9sZTphZG1pbiwgYXBwbGljYXRpb25zLCBkZWxldGUsICovKiwgYWxsb3cKcCwgcm9sZTphZG1pbiwgYXBwbGljYXRpb25zLCBzeW5jLCAqLyosIGFsbG93CnAsIHJvbGU6YWRtaW4sIGNsdXN0ZXJzLCBjcmVhdGUsICosIGFsbG93CnAsIHJvbGU6YWRtaW4sIGNsdXN0ZXJzLCB1cGRhdGUsICosIGFsbG93CnAsIHJvbGU6YWRtaW4sIGNsdXN0ZXJzLCBkZWxldGUsICosIGFsbG93CnAsIHJvbGU6YWRtaW4sIHJlcG9zaXRvcmllcywgY3JlYXRlLCAqLCBhbGxvdwpwLCByb2xlOmFkbWluLCByZXBvc2l0b3JpZXMsIHVwZGF0ZSwgKiwgYWxsb3cKcCwgcm9sZTphZG1pbiwgcmVwb3NpdG9yaWVzLCBkZWxldGUsICosIGFsbG93CnAsIHJvbGU6YWRtaW4sIHByb2plY3RzLCBjcmVhdGUsICosIGFsbG93CnAsIHJvbGU6YWRtaW4sIHByb2plY3RzLCB1cGRhdGUsICosIGFsbG93CnAsIHJvbGU6YWRtaW4sIHByb2plY3RzLCBkZWxldGUsICosIGFsbG93CgpnLCByb2xlOmFkbWluLCByb2xlOnJlYWRvbmx5CmcsIGFkbWluLCByb2xlOmFkbWluCg==\"")
		packr.PackJSONBytes("../../assets", "model.conf", "\"W3JlcXVlc3RfZGVmaW5pdGlvbl0KciA9IHN1YiwgcmVzLCBhY3QsIG9iagoKW3BvbGljeV9kZWZpbml0aW9uXQpwID0gc3ViLCByZXMsIGFjdCwgb2JqLCBlZnQKCltyb2xlX2RlZmluaXRpb25dCmcgPSBfLCBfCgpbcG9saWN5X2VmZmVjdF0KZSA9IHNvbWUod2hlcmUgKHAuZWZ0ID09IGFsbG93KSkgJiYgIXNvbWUod2hlcmUgKHAuZWZ0ID09IGRlbnkpKQoKW21hdGNoZXJzXQptID0gZyhyLnN1YiwgcC5zdWIpICYmIGtleU1hdGNoKHIucmVzLCBwLnJlcykgJiYga2V5TWF0Y2goci5hY3QsIHAuYWN0KSAmJiBrZXlNYXRjaChyLm9iaiwgcC5vYmopCg==\"")
		packr.PackJSONBytes("../../assets", "swagger.json", "\"\"")
}
