// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/argoproj/argo-cd/v3/util/io"
	"github.com/opencontainers/image-spec/specs-go/v1"
	mock "github.com/stretchr/testify/mock"
)

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

type Client_Expecter struct {
	mock *mock.Mock
}

func (_m *Client) EXPECT() *Client_Expecter {
	return &Client_Expecter{mock: &_m.Mock}
}

// CleanCache provides a mock function for the type Client
func (_mock *Client) CleanCache(revision string) error {
	ret := _mock.Called(revision)

	if len(ret) == 0 {
		panic("no return value specified for CleanCache")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(revision)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Client_CleanCache_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CleanCache'
type Client_CleanCache_Call struct {
	*mock.Call
}

// CleanCache is a helper method to define mock.On call
//   - revision string
func (_e *Client_Expecter) CleanCache(revision interface{}) *Client_CleanCache_Call {
	return &Client_CleanCache_Call{Call: _e.mock.On("CleanCache", revision)}
}

func (_c *Client_CleanCache_Call) Run(run func(revision string)) *Client_CleanCache_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Client_CleanCache_Call) Return(err error) *Client_CleanCache_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Client_CleanCache_Call) RunAndReturn(run func(revision string) error) *Client_CleanCache_Call {
	_c.Call.Return(run)
	return _c
}

// DigestMetadata provides a mock function for the type Client
func (_mock *Client) DigestMetadata(ctx context.Context, digest string) (*v1.Manifest, error) {
	ret := _mock.Called(ctx, digest)

	if len(ret) == 0 {
		panic("no return value specified for DigestMetadata")
	}

	var r0 *v1.Manifest
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*v1.Manifest, error)); ok {
		return returnFunc(ctx, digest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *v1.Manifest); ok {
		r0 = returnFunc(ctx, digest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Manifest)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, digest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Client_DigestMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DigestMetadata'
type Client_DigestMetadata_Call struct {
	*mock.Call
}

// DigestMetadata is a helper method to define mock.On call
//   - ctx context.Context
//   - digest string
func (_e *Client_Expecter) DigestMetadata(ctx interface{}, digest interface{}) *Client_DigestMetadata_Call {
	return &Client_DigestMetadata_Call{Call: _e.mock.On("DigestMetadata", ctx, digest)}
}

func (_c *Client_DigestMetadata_Call) Run(run func(ctx context.Context, digest string)) *Client_DigestMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Client_DigestMetadata_Call) Return(manifest *v1.Manifest, err error) *Client_DigestMetadata_Call {
	_c.Call.Return(manifest, err)
	return _c
}

func (_c *Client_DigestMetadata_Call) RunAndReturn(run func(ctx context.Context, digest string) (*v1.Manifest, error)) *Client_DigestMetadata_Call {
	_c.Call.Return(run)
	return _c
}

// Extract provides a mock function for the type Client
func (_mock *Client) Extract(ctx context.Context, revision string) (string, io.Closer, error) {
	ret := _mock.Called(ctx, revision)

	if len(ret) == 0 {
		panic("no return value specified for Extract")
	}

	var r0 string
	var r1 io.Closer
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (string, io.Closer, error)); ok {
		return returnFunc(ctx, revision)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = returnFunc(ctx, revision)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) io.Closer); ok {
		r1 = returnFunc(ctx, revision)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(io.Closer)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = returnFunc(ctx, revision)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// Client_Extract_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Extract'
type Client_Extract_Call struct {
	*mock.Call
}

// Extract is a helper method to define mock.On call
//   - ctx context.Context
//   - revision string
func (_e *Client_Expecter) Extract(ctx interface{}, revision interface{}) *Client_Extract_Call {
	return &Client_Extract_Call{Call: _e.mock.On("Extract", ctx, revision)}
}

func (_c *Client_Extract_Call) Run(run func(ctx context.Context, revision string)) *Client_Extract_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Client_Extract_Call) Return(s string, closer io.Closer, err error) *Client_Extract_Call {
	_c.Call.Return(s, closer, err)
	return _c
}

func (_c *Client_Extract_Call) RunAndReturn(run func(ctx context.Context, revision string) (string, io.Closer, error)) *Client_Extract_Call {
	_c.Call.Return(run)
	return _c
}

// GetTags provides a mock function for the type Client
func (_mock *Client) GetTags(ctx context.Context, noCache bool) ([]string, error) {
	ret := _mock.Called(ctx, noCache)

	if len(ret) == 0 {
		panic("no return value specified for GetTags")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, bool) ([]string, error)); ok {
		return returnFunc(ctx, noCache)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, bool) []string); ok {
		r0 = returnFunc(ctx, noCache)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, bool) error); ok {
		r1 = returnFunc(ctx, noCache)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Client_GetTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTags'
type Client_GetTags_Call struct {
	*mock.Call
}

// GetTags is a helper method to define mock.On call
//   - ctx context.Context
//   - noCache bool
func (_e *Client_Expecter) GetTags(ctx interface{}, noCache interface{}) *Client_GetTags_Call {
	return &Client_GetTags_Call{Call: _e.mock.On("GetTags", ctx, noCache)}
}

func (_c *Client_GetTags_Call) Run(run func(ctx context.Context, noCache bool)) *Client_GetTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 bool
		if args[1] != nil {
			arg1 = args[1].(bool)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Client_GetTags_Call) Return(strings []string, err error) *Client_GetTags_Call {
	_c.Call.Return(strings, err)
	return _c
}

func (_c *Client_GetTags_Call) RunAndReturn(run func(ctx context.Context, noCache bool) ([]string, error)) *Client_GetTags_Call {
	_c.Call.Return(run)
	return _c
}

// ResolveRevision provides a mock function for the type Client
func (_mock *Client) ResolveRevision(ctx context.Context, revision string, noCache bool) (string, error) {
	ret := _mock.Called(ctx, revision, noCache)

	if len(ret) == 0 {
		panic("no return value specified for ResolveRevision")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, bool) (string, error)); ok {
		return returnFunc(ctx, revision, noCache)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, bool) string); ok {
		r0 = returnFunc(ctx, revision, noCache)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, bool) error); ok {
		r1 = returnFunc(ctx, revision, noCache)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Client_ResolveRevision_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResolveRevision'
type Client_ResolveRevision_Call struct {
	*mock.Call
}

// ResolveRevision is a helper method to define mock.On call
//   - ctx context.Context
//   - revision string
//   - noCache bool
func (_e *Client_Expecter) ResolveRevision(ctx interface{}, revision interface{}, noCache interface{}) *Client_ResolveRevision_Call {
	return &Client_ResolveRevision_Call{Call: _e.mock.On("ResolveRevision", ctx, revision, noCache)}
}

func (_c *Client_ResolveRevision_Call) Run(run func(ctx context.Context, revision string, noCache bool)) *Client_ResolveRevision_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 bool
		if args[2] != nil {
			arg2 = args[2].(bool)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *Client_ResolveRevision_Call) Return(s string, err error) *Client_ResolveRevision_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *Client_ResolveRevision_Call) RunAndReturn(run func(ctx context.Context, revision string, noCache bool) (string, error)) *Client_ResolveRevision_Call {
	_c.Call.Return(run)
	return _c
}

// TestRepo provides a mock function for the type Client
func (_mock *Client) TestRepo(ctx context.Context) (bool, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for TestRepo")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (bool, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Client_TestRepo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TestRepo'
type Client_TestRepo_Call struct {
	*mock.Call
}

// TestRepo is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Client_Expecter) TestRepo(ctx interface{}) *Client_TestRepo_Call {
	return &Client_TestRepo_Call{Call: _e.mock.On("TestRepo", ctx)}
}

func (_c *Client_TestRepo_Call) Run(run func(ctx context.Context)) *Client_TestRepo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Client_TestRepo_Call) Return(b bool, err error) *Client_TestRepo_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *Client_TestRepo_Call) RunAndReturn(run func(ctx context.Context) (bool, error)) *Client_TestRepo_Call {
	_c.Call.Return(run)
	return _c
}
