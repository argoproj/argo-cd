// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	helm "github.com/argoproj/argo-cd/v3/util/helm"
	io "github.com/argoproj/argo-cd/v3/util/io"

	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

type Client_Expecter struct {
	mock *mock.Mock
}

func (_m *Client) EXPECT() *Client_Expecter {
	return &Client_Expecter{mock: &_m.Mock}
}

// CleanChartCache provides a mock function with given fields: chart, version
func (_m *Client) CleanChartCache(chart string, version string) error {
	ret := _m.Called(chart, version)

	if len(ret) == 0 {
		panic("no return value specified for CleanChartCache")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(chart, version)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_CleanChartCache_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CleanChartCache'
type Client_CleanChartCache_Call struct {
	*mock.Call
}

// CleanChartCache is a helper method to define mock.On call
//   - chart string
//   - version string
func (_e *Client_Expecter) CleanChartCache(chart interface{}, version interface{}) *Client_CleanChartCache_Call {
	return &Client_CleanChartCache_Call{Call: _e.mock.On("CleanChartCache", chart, version)}
}

func (_c *Client_CleanChartCache_Call) Run(run func(chart string, version string)) *Client_CleanChartCache_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Client_CleanChartCache_Call) Return(_a0 error) *Client_CleanChartCache_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_CleanChartCache_Call) RunAndReturn(run func(string, string) error) *Client_CleanChartCache_Call {
	_c.Call.Return(run)
	return _c
}

// ExtractChart provides a mock function with given fields: chart, version, passCredentials, manifestMaxExtractedSize, disableManifestMaxExtractedSize
func (_m *Client) ExtractChart(chart string, version string, passCredentials bool, manifestMaxExtractedSize int64, disableManifestMaxExtractedSize bool) (string, io.Closer, error) {
	ret := _m.Called(chart, version, passCredentials, manifestMaxExtractedSize, disableManifestMaxExtractedSize)

	if len(ret) == 0 {
		panic("no return value specified for ExtractChart")
	}

	var r0 string
	var r1 io.Closer
	var r2 error
	if rf, ok := ret.Get(0).(func(string, string, bool, int64, bool) (string, io.Closer, error)); ok {
		return rf(chart, version, passCredentials, manifestMaxExtractedSize, disableManifestMaxExtractedSize)
	}
	if rf, ok := ret.Get(0).(func(string, string, bool, int64, bool) string); ok {
		r0 = rf(chart, version, passCredentials, manifestMaxExtractedSize, disableManifestMaxExtractedSize)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string, bool, int64, bool) io.Closer); ok {
		r1 = rf(chart, version, passCredentials, manifestMaxExtractedSize, disableManifestMaxExtractedSize)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(io.Closer)
		}
	}

	if rf, ok := ret.Get(2).(func(string, string, bool, int64, bool) error); ok {
		r2 = rf(chart, version, passCredentials, manifestMaxExtractedSize, disableManifestMaxExtractedSize)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Client_ExtractChart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExtractChart'
type Client_ExtractChart_Call struct {
	*mock.Call
}

// ExtractChart is a helper method to define mock.On call
//   - chart string
//   - version string
//   - passCredentials bool
//   - manifestMaxExtractedSize int64
//   - disableManifestMaxExtractedSize bool
func (_e *Client_Expecter) ExtractChart(chart interface{}, version interface{}, passCredentials interface{}, manifestMaxExtractedSize interface{}, disableManifestMaxExtractedSize interface{}) *Client_ExtractChart_Call {
	return &Client_ExtractChart_Call{Call: _e.mock.On("ExtractChart", chart, version, passCredentials, manifestMaxExtractedSize, disableManifestMaxExtractedSize)}
}

func (_c *Client_ExtractChart_Call) Run(run func(chart string, version string, passCredentials bool, manifestMaxExtractedSize int64, disableManifestMaxExtractedSize bool)) *Client_ExtractChart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(bool), args[3].(int64), args[4].(bool))
	})
	return _c
}

func (_c *Client_ExtractChart_Call) Return(_a0 string, _a1 io.Closer, _a2 error) *Client_ExtractChart_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *Client_ExtractChart_Call) RunAndReturn(run func(string, string, bool, int64, bool) (string, io.Closer, error)) *Client_ExtractChart_Call {
	_c.Call.Return(run)
	return _c
}

// GetIndex provides a mock function with given fields: noCache, maxIndexSize
func (_m *Client) GetIndex(noCache bool, maxIndexSize int64) (*helm.Index, error) {
	ret := _m.Called(noCache, maxIndexSize)

	if len(ret) == 0 {
		panic("no return value specified for GetIndex")
	}

	var r0 *helm.Index
	var r1 error
	if rf, ok := ret.Get(0).(func(bool, int64) (*helm.Index, error)); ok {
		return rf(noCache, maxIndexSize)
	}
	if rf, ok := ret.Get(0).(func(bool, int64) *helm.Index); ok {
		r0 = rf(noCache, maxIndexSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*helm.Index)
		}
	}

	if rf, ok := ret.Get(1).(func(bool, int64) error); ok {
		r1 = rf(noCache, maxIndexSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIndex'
type Client_GetIndex_Call struct {
	*mock.Call
}

// GetIndex is a helper method to define mock.On call
//   - noCache bool
//   - maxIndexSize int64
func (_e *Client_Expecter) GetIndex(noCache interface{}, maxIndexSize interface{}) *Client_GetIndex_Call {
	return &Client_GetIndex_Call{Call: _e.mock.On("GetIndex", noCache, maxIndexSize)}
}

func (_c *Client_GetIndex_Call) Run(run func(noCache bool, maxIndexSize int64)) *Client_GetIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool), args[1].(int64))
	})
	return _c
}

func (_c *Client_GetIndex_Call) Return(_a0 *helm.Index, _a1 error) *Client_GetIndex_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetIndex_Call) RunAndReturn(run func(bool, int64) (*helm.Index, error)) *Client_GetIndex_Call {
	_c.Call.Return(run)
	return _c
}

// GetTags provides a mock function with given fields: chart, noCache
func (_m *Client) GetTags(chart string, noCache bool) ([]string, error) {
	ret := _m.Called(chart, noCache)

	if len(ret) == 0 {
		panic("no return value specified for GetTags")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, bool) ([]string, error)); ok {
		return rf(chart, noCache)
	}
	if rf, ok := ret.Get(0).(func(string, bool) []string); ok {
		r0 = rf(chart, noCache)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string, bool) error); ok {
		r1 = rf(chart, noCache)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTags'
type Client_GetTags_Call struct {
	*mock.Call
}

// GetTags is a helper method to define mock.On call
//   - chart string
//   - noCache bool
func (_e *Client_Expecter) GetTags(chart interface{}, noCache interface{}) *Client_GetTags_Call {
	return &Client_GetTags_Call{Call: _e.mock.On("GetTags", chart, noCache)}
}

func (_c *Client_GetTags_Call) Run(run func(chart string, noCache bool)) *Client_GetTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(bool))
	})
	return _c
}

func (_c *Client_GetTags_Call) Return(_a0 []string, _a1 error) *Client_GetTags_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetTags_Call) RunAndReturn(run func(string, bool) ([]string, error)) *Client_GetTags_Call {
	_c.Call.Return(run)
	return _c
}

// TestHelmOCI provides a mock function with no fields
func (_m *Client) TestHelmOCI() (bool, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TestHelmOCI")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func() (bool, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_TestHelmOCI_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TestHelmOCI'
type Client_TestHelmOCI_Call struct {
	*mock.Call
}

// TestHelmOCI is a helper method to define mock.On call
func (_e *Client_Expecter) TestHelmOCI() *Client_TestHelmOCI_Call {
	return &Client_TestHelmOCI_Call{Call: _e.mock.On("TestHelmOCI")}
}

func (_c *Client_TestHelmOCI_Call) Run(run func()) *Client_TestHelmOCI_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Client_TestHelmOCI_Call) Return(_a0 bool, _a1 error) *Client_TestHelmOCI_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_TestHelmOCI_Call) RunAndReturn(run func() (bool, error)) *Client_TestHelmOCI_Call {
	_c.Call.Return(run)
	return _c
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
