// Code generated by mockery v2.39.1. DO NOT EDIT.

package mocks

import (
	helm "github.com/argoproj/argo-cd/v2/util/helm"
	mock "github.com/stretchr/testify/mock"

	path "github.com/argoproj/argo-cd/v2/util/io/path"
)

// Helm is an autogenerated mock type for the Helm type
type Helm struct {
	mock.Mock
}

// DependencyBuild provides a mock function with given fields:
func (_m *Helm) DependencyBuild() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DependencyBuild")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DependencyListSatisfied provides a mock function with given fields:
func (_m *Helm) DependencyListSatisfied() (bool, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DependencyListSatisfied")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func() (bool, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Dispose provides a mock function with given fields:
func (_m *Helm) Dispose() {
	_m.Called()
}

// GetParameters provides a mock function with given fields: valuesFiles, appPath, repoRoot
func (_m *Helm) GetParameters(valuesFiles []path.ResolvedFilePath, appPath string, repoRoot string) (map[string]string, error) {
	ret := _m.Called(valuesFiles, appPath, repoRoot)

	if len(ret) == 0 {
		panic("no return value specified for GetParameters")
	}

	var r0 map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func([]path.ResolvedFilePath, string, string) (map[string]string, error)); ok {
		return rf(valuesFiles, appPath, repoRoot)
	}
	if rf, ok := ret.Get(0).(func([]path.ResolvedFilePath, string, string) map[string]string); ok {
		r0 = rf(valuesFiles, appPath, repoRoot)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func([]path.ResolvedFilePath, string, string) error); ok {
		r1 = rf(valuesFiles, appPath, repoRoot)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Init provides a mock function with given fields:
func (_m *Helm) Init() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Template provides a mock function with given fields: opts
func (_m *Helm) Template(opts *helm.TemplateOpts) (string, error) {
	ret := _m.Called(opts)

	if len(ret) == 0 {
		panic("no return value specified for Template")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*helm.TemplateOpts) (string, error)); ok {
		return rf(opts)
	}
	if rf, ok := ret.Get(0).(func(*helm.TemplateOpts) string); ok {
		r0 = rf(opts)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*helm.TemplateOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewHelm creates a new instance of Helm. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHelm(t interface {
	mock.TestingT
	Cleanup(func())
}) *Helm {
	mock := &Helm{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
