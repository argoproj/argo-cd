// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewTempPaths creates a new instance of TempPaths. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTempPaths(t interface {
	mock.TestingT
	Cleanup(func())
}) *TempPaths {
	mock := &TempPaths{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// TempPaths is an autogenerated mock type for the TempPaths type
type TempPaths struct {
	mock.Mock
}

type TempPaths_Expecter struct {
	mock *mock.Mock
}

func (_m *TempPaths) EXPECT() *TempPaths_Expecter {
	return &TempPaths_Expecter{mock: &_m.Mock}
}

// Add provides a mock function for the type TempPaths
func (_mock *TempPaths) Add(key string, value string) {
	_mock.Called(key, value)
	return
}

// TempPaths_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type TempPaths_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - key
//   - value
func (_e *TempPaths_Expecter) Add(key interface{}, value interface{}) *TempPaths_Add_Call {
	return &TempPaths_Add_Call{Call: _e.mock.On("Add", key, value)}
}

func (_c *TempPaths_Add_Call) Run(run func(key string, value string)) *TempPaths_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *TempPaths_Add_Call) Return() *TempPaths_Add_Call {
	_c.Call.Return()
	return _c
}

func (_c *TempPaths_Add_Call) RunAndReturn(run func(key string, value string)) *TempPaths_Add_Call {
	_c.Run(run)
	return _c
}

// GetPath provides a mock function for the type TempPaths
func (_mock *TempPaths) GetPath(key string) (string, error) {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetPath")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (string, error)); ok {
		return returnFunc(key)
	}
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(key)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TempPaths_GetPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPath'
type TempPaths_GetPath_Call struct {
	*mock.Call
}

// GetPath is a helper method to define mock.On call
//   - key
func (_e *TempPaths_Expecter) GetPath(key interface{}) *TempPaths_GetPath_Call {
	return &TempPaths_GetPath_Call{Call: _e.mock.On("GetPath", key)}
}

func (_c *TempPaths_GetPath_Call) Run(run func(key string)) *TempPaths_GetPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *TempPaths_GetPath_Call) Return(s string, err error) *TempPaths_GetPath_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *TempPaths_GetPath_Call) RunAndReturn(run func(key string) (string, error)) *TempPaths_GetPath_Call {
	_c.Call.Return(run)
	return _c
}

// GetPathIfExists provides a mock function for the type TempPaths
func (_mock *TempPaths) GetPathIfExists(key string) string {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetPathIfExists")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(key)
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// TempPaths_GetPathIfExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPathIfExists'
type TempPaths_GetPathIfExists_Call struct {
	*mock.Call
}

// GetPathIfExists is a helper method to define mock.On call
//   - key
func (_e *TempPaths_Expecter) GetPathIfExists(key interface{}) *TempPaths_GetPathIfExists_Call {
	return &TempPaths_GetPathIfExists_Call{Call: _e.mock.On("GetPathIfExists", key)}
}

func (_c *TempPaths_GetPathIfExists_Call) Run(run func(key string)) *TempPaths_GetPathIfExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *TempPaths_GetPathIfExists_Call) Return(s string) *TempPaths_GetPathIfExists_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *TempPaths_GetPathIfExists_Call) RunAndReturn(run func(key string) string) *TempPaths_GetPathIfExists_Call {
	_c.Call.Return(run)
	return _c
}

// GetPaths provides a mock function for the type TempPaths
func (_mock *TempPaths) GetPaths() map[string]string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPaths")
	}

	var r0 map[string]string
	if returnFunc, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}
	return r0
}

// TempPaths_GetPaths_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPaths'
type TempPaths_GetPaths_Call struct {
	*mock.Call
}

// GetPaths is a helper method to define mock.On call
func (_e *TempPaths_Expecter) GetPaths() *TempPaths_GetPaths_Call {
	return &TempPaths_GetPaths_Call{Call: _e.mock.On("GetPaths")}
}

func (_c *TempPaths_GetPaths_Call) Run(run func()) *TempPaths_GetPaths_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TempPaths_GetPaths_Call) Return(stringToString map[string]string) *TempPaths_GetPaths_Call {
	_c.Call.Return(stringToString)
	return _c
}

func (_c *TempPaths_GetPaths_Call) RunAndReturn(run func() map[string]string) *TempPaths_GetPaths_Call {
	_c.Call.Return(run)
	return _c
}
