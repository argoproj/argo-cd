// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
)

// ServerSideDryRunner is an autogenerated mock type for the ServerSideDryRunner type
type ServerSideDryRunner struct {
	mock.Mock
}

// Run provides a mock function with given fields: ctx, obj, manager
func (_m *ServerSideDryRunner) Run(ctx context.Context, obj *unstructured.Unstructured, manager string) (string, error) {
	ret := _m.Called(ctx, obj, manager)

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *unstructured.Unstructured, string) (string, error)); ok {
		return rf(ctx, obj, manager)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *unstructured.Unstructured, string) string); ok {
		r0 = rf(ctx, obj, manager)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *unstructured.Unstructured, string) error); ok {
		r1 = rf(ctx, obj, manager)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewServerSideDryRunner creates a new instance of ServerSideDryRunner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServerSideDryRunner(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServerSideDryRunner {
	mock := &ServerSideDryRunner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
