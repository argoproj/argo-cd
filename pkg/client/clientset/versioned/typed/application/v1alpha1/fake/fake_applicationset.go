// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1alpha1 "github.com/argoproj/argo-cd/v3/pkg/apis/application/v1alpha1"
	applicationv1alpha1 "github.com/argoproj/argo-cd/v3/pkg/client/clientset/versioned/typed/application/v1alpha1"
	gentype "k8s.io/client-go/gentype"
)

// fakeApplicationSets implements ApplicationSetInterface
type fakeApplicationSets struct {
	*gentype.FakeClientWithList[*v1alpha1.ApplicationSet, *v1alpha1.ApplicationSetList]
	Fake *FakeArgoprojV1alpha1
}

func newFakeApplicationSets(fake *FakeArgoprojV1alpha1, namespace string) applicationv1alpha1.ApplicationSetInterface {
	return &fakeApplicationSets{
		gentype.NewFakeClientWithList[*v1alpha1.ApplicationSet, *v1alpha1.ApplicationSetList](
			fake.Fake,
			namespace,
			v1alpha1.SchemeGroupVersion.WithResource("applicationsets"),
			v1alpha1.SchemeGroupVersion.WithKind("ApplicationSet"),
			func() *v1alpha1.ApplicationSet { return &v1alpha1.ApplicationSet{} },
			func() *v1alpha1.ApplicationSetList { return &v1alpha1.ApplicationSetList{} },
			func(dst, src *v1alpha1.ApplicationSetList) { dst.ListMeta = src.ListMeta },
			func(list *v1alpha1.ApplicationSetList) []*v1alpha1.ApplicationSet {
				return gentype.ToPointerSlice(list.Items)
			},
			func(list *v1alpha1.ApplicationSetList, items []*v1alpha1.ApplicationSet) {
				list.Items = gentype.FromPointerSlice(items)
			},
		),
		fake,
	}
}
