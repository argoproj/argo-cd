// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	context "context"

	applicationv1alpha1 "github.com/argoproj/argo-cd/v3/pkg/apis/application/v1alpha1"
	scheme "github.com/argoproj/argo-cd/v3/pkg/client/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"
)

// ApplicationSetsGetter has a method to return a ApplicationSetInterface.
// A group's client should implement this interface.
type ApplicationSetsGetter interface {
	ApplicationSets(namespace string) ApplicationSetInterface
}

// ApplicationSetInterface has methods to work with ApplicationSet resources.
type ApplicationSetInterface interface {
	Create(ctx context.Context, applicationSet *applicationv1alpha1.ApplicationSet, opts v1.CreateOptions) (*applicationv1alpha1.ApplicationSet, error)
	Update(ctx context.Context, applicationSet *applicationv1alpha1.ApplicationSet, opts v1.UpdateOptions) (*applicationv1alpha1.ApplicationSet, error)
	Delete(ctx context.Context, name string, opts v1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error
	Get(ctx context.Context, name string, opts v1.GetOptions) (*applicationv1alpha1.ApplicationSet, error)
	List(ctx context.Context, opts v1.ListOptions) (*applicationv1alpha1.ApplicationSetList, error)
	Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *applicationv1alpha1.ApplicationSet, err error)
	ApplicationSetExpansion
}

// applicationSets implements ApplicationSetInterface
type applicationSets struct {
	*gentype.ClientWithList[*applicationv1alpha1.ApplicationSet, *applicationv1alpha1.ApplicationSetList]
}

// newApplicationSets returns a ApplicationSets
func newApplicationSets(c *ArgoprojV1alpha1Client, namespace string) *applicationSets {
	return &applicationSets{
		gentype.NewClientWithList[*applicationv1alpha1.ApplicationSet, *applicationv1alpha1.ApplicationSetList](
			"applicationsets",
			c.RESTClient(),
			scheme.ParameterCodec,
			namespace,
			func() *applicationv1alpha1.ApplicationSet { return &applicationv1alpha1.ApplicationSet{} },
			func() *applicationv1alpha1.ApplicationSetList { return &applicationv1alpha1.ApplicationSetList{} },
		),
	}
}
