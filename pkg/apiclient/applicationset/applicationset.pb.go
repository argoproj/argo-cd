// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: server/applicationset/applicationset.proto

// ApplicationSet Service
//
// ApplicationSet Service API performs CRUD actions against applicationset resources

package applicationset

import (
	context "context"
	fmt "fmt"
	v1alpha1 "github.com/argoproj/argo-cd/v2/pkg/apis/application/v1alpha1"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	v1 "k8s.io/api/core/v1"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ApplicationSetGetQuery is a query for applicationset resources
type ApplicationSetGetQuery struct {
	// the applicationsets's name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The application set namespace. Default empty is argocd control plane namespace
	AppsetNamespace      string   `protobuf:"bytes,2,opt,name=appsetNamespace,proto3" json:"appsetNamespace,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ApplicationSetGetQuery) Reset()         { *m = ApplicationSetGetQuery{} }
func (m *ApplicationSetGetQuery) String() string { return proto.CompactTextString(m) }
func (*ApplicationSetGetQuery) ProtoMessage()    {}
func (*ApplicationSetGetQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_eacb9df0ce5738fa, []int{0}
}
func (m *ApplicationSetGetQuery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplicationSetGetQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplicationSetGetQuery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplicationSetGetQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationSetGetQuery.Merge(m, src)
}
func (m *ApplicationSetGetQuery) XXX_Size() int {
	return m.Size()
}
func (m *ApplicationSetGetQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationSetGetQuery.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationSetGetQuery proto.InternalMessageInfo

func (m *ApplicationSetGetQuery) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ApplicationSetGetQuery) GetAppsetNamespace() string {
	if m != nil {
		return m.AppsetNamespace
	}
	return ""
}

type ApplicationSetListQuery struct {
	// the project names to restrict returned list applicationsets
	Projects []string `protobuf:"bytes,1,rep,name=projects,proto3" json:"projects,omitempty"`
	// the selector to restrict returned list to applications only with matched labels
	Selector string `protobuf:"bytes,2,opt,name=selector,proto3" json:"selector,omitempty"`
	// The application set namespace. Default empty is argocd control plane namespace
	AppsetNamespace      string   `protobuf:"bytes,3,opt,name=appsetNamespace,proto3" json:"appsetNamespace,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ApplicationSetListQuery) Reset()         { *m = ApplicationSetListQuery{} }
func (m *ApplicationSetListQuery) String() string { return proto.CompactTextString(m) }
func (*ApplicationSetListQuery) ProtoMessage()    {}
func (*ApplicationSetListQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_eacb9df0ce5738fa, []int{1}
}
func (m *ApplicationSetListQuery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplicationSetListQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplicationSetListQuery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplicationSetListQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationSetListQuery.Merge(m, src)
}
func (m *ApplicationSetListQuery) XXX_Size() int {
	return m.Size()
}
func (m *ApplicationSetListQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationSetListQuery.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationSetListQuery proto.InternalMessageInfo

func (m *ApplicationSetListQuery) GetProjects() []string {
	if m != nil {
		return m.Projects
	}
	return nil
}

func (m *ApplicationSetListQuery) GetSelector() string {
	if m != nil {
		return m.Selector
	}
	return ""
}

func (m *ApplicationSetListQuery) GetAppsetNamespace() string {
	if m != nil {
		return m.AppsetNamespace
	}
	return ""
}

// ApplicationSetEventsQuery is a query for applicationset resource events
type ApplicationSetResourceEventsQuery struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	AppsetNamespace      string   `protobuf:"bytes,2,opt,name=appsetNamespace,proto3" json:"appsetNamespace,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ApplicationSetResourceEventsQuery) Reset()         { *m = ApplicationSetResourceEventsQuery{} }
func (m *ApplicationSetResourceEventsQuery) String() string { return proto.CompactTextString(m) }
func (*ApplicationSetResourceEventsQuery) ProtoMessage()    {}
func (*ApplicationSetResourceEventsQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_eacb9df0ce5738fa, []int{2}
}
func (m *ApplicationSetResourceEventsQuery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplicationSetResourceEventsQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplicationSetResourceEventsQuery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplicationSetResourceEventsQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationSetResourceEventsQuery.Merge(m, src)
}
func (m *ApplicationSetResourceEventsQuery) XXX_Size() int {
	return m.Size()
}
func (m *ApplicationSetResourceEventsQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationSetResourceEventsQuery.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationSetResourceEventsQuery proto.InternalMessageInfo

func (m *ApplicationSetResourceEventsQuery) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ApplicationSetResourceEventsQuery) GetAppsetNamespace() string {
	if m != nil {
		return m.AppsetNamespace
	}
	return ""
}

type ApplicationSetWatchQuery struct {
	// the applicationsets's name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// the project names to restrict returned list applicationsets
	Projects []string `protobuf:"bytes,2,rep,name=projects,proto3" json:"projects,omitempty"`
	// the selector to restrict returned list to applicationsets only with matched labels
	Selector string `protobuf:"bytes,3,opt,name=selector,proto3" json:"selector,omitempty"`
	// The application set namespace. Default empty is argocd control plane namespace
	AppsetNamespace string `protobuf:"bytes,4,opt,name=appsetNamespace,proto3" json:"appsetNamespace,omitempty"`
	// when specified with a watch call, shows changes that occur after that particular version of a resource.
	ResourceVersion      string   `protobuf:"bytes,5,opt,name=resourceVersion,proto3" json:"resourceVersion,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ApplicationSetWatchQuery) Reset()         { *m = ApplicationSetWatchQuery{} }
func (m *ApplicationSetWatchQuery) String() string { return proto.CompactTextString(m) }
func (*ApplicationSetWatchQuery) ProtoMessage()    {}
func (*ApplicationSetWatchQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_eacb9df0ce5738fa, []int{3}
}
func (m *ApplicationSetWatchQuery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplicationSetWatchQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplicationSetWatchQuery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplicationSetWatchQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationSetWatchQuery.Merge(m, src)
}
func (m *ApplicationSetWatchQuery) XXX_Size() int {
	return m.Size()
}
func (m *ApplicationSetWatchQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationSetWatchQuery.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationSetWatchQuery proto.InternalMessageInfo

func (m *ApplicationSetWatchQuery) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ApplicationSetWatchQuery) GetProjects() []string {
	if m != nil {
		return m.Projects
	}
	return nil
}

func (m *ApplicationSetWatchQuery) GetSelector() string {
	if m != nil {
		return m.Selector
	}
	return ""
}

func (m *ApplicationSetWatchQuery) GetAppsetNamespace() string {
	if m != nil {
		return m.AppsetNamespace
	}
	return ""
}

func (m *ApplicationSetWatchQuery) GetResourceVersion() string {
	if m != nil {
		return m.ResourceVersion
	}
	return ""
}

type ApplicationSetResponse struct {
	Project              string                   `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	Applicationset       *v1alpha1.ApplicationSet `protobuf:"bytes,2,opt,name=applicationset,proto3" json:"applicationset,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *ApplicationSetResponse) Reset()         { *m = ApplicationSetResponse{} }
func (m *ApplicationSetResponse) String() string { return proto.CompactTextString(m) }
func (*ApplicationSetResponse) ProtoMessage()    {}
func (*ApplicationSetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_eacb9df0ce5738fa, []int{4}
}
func (m *ApplicationSetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplicationSetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplicationSetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplicationSetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationSetResponse.Merge(m, src)
}
func (m *ApplicationSetResponse) XXX_Size() int {
	return m.Size()
}
func (m *ApplicationSetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationSetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationSetResponse proto.InternalMessageInfo

func (m *ApplicationSetResponse) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *ApplicationSetResponse) GetApplicationset() *v1alpha1.ApplicationSet {
	if m != nil {
		return m.Applicationset
	}
	return nil
}

type ApplicationSetCreateRequest struct {
	Applicationset       *v1alpha1.ApplicationSet `protobuf:"bytes,1,opt,name=applicationset,proto3" json:"applicationset,omitempty"`
	Upsert               bool                     `protobuf:"varint,2,opt,name=upsert,proto3" json:"upsert,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *ApplicationSetCreateRequest) Reset()         { *m = ApplicationSetCreateRequest{} }
func (m *ApplicationSetCreateRequest) String() string { return proto.CompactTextString(m) }
func (*ApplicationSetCreateRequest) ProtoMessage()    {}
func (*ApplicationSetCreateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_eacb9df0ce5738fa, []int{5}
}
func (m *ApplicationSetCreateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplicationSetCreateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplicationSetCreateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplicationSetCreateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationSetCreateRequest.Merge(m, src)
}
func (m *ApplicationSetCreateRequest) XXX_Size() int {
	return m.Size()
}
func (m *ApplicationSetCreateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationSetCreateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationSetCreateRequest proto.InternalMessageInfo

func (m *ApplicationSetCreateRequest) GetApplicationset() *v1alpha1.ApplicationSet {
	if m != nil {
		return m.Applicationset
	}
	return nil
}

func (m *ApplicationSetCreateRequest) GetUpsert() bool {
	if m != nil {
		return m.Upsert
	}
	return false
}

type ApplicationSetDeleteRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The application set namespace. Default empty is argocd control plane namespace
	AppsetNamespace      string   `protobuf:"bytes,2,opt,name=appsetNamespace,proto3" json:"appsetNamespace,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ApplicationSetDeleteRequest) Reset()         { *m = ApplicationSetDeleteRequest{} }
func (m *ApplicationSetDeleteRequest) String() string { return proto.CompactTextString(m) }
func (*ApplicationSetDeleteRequest) ProtoMessage()    {}
func (*ApplicationSetDeleteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_eacb9df0ce5738fa, []int{6}
}
func (m *ApplicationSetDeleteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplicationSetDeleteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplicationSetDeleteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplicationSetDeleteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationSetDeleteRequest.Merge(m, src)
}
func (m *ApplicationSetDeleteRequest) XXX_Size() int {
	return m.Size()
}
func (m *ApplicationSetDeleteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationSetDeleteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationSetDeleteRequest proto.InternalMessageInfo

func (m *ApplicationSetDeleteRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ApplicationSetDeleteRequest) GetAppsetNamespace() string {
	if m != nil {
		return m.AppsetNamespace
	}
	return ""
}

func init() {
	proto.RegisterType((*ApplicationSetGetQuery)(nil), "applicationset.ApplicationSetGetQuery")
	proto.RegisterType((*ApplicationSetListQuery)(nil), "applicationset.ApplicationSetListQuery")
	proto.RegisterType((*ApplicationSetResourceEventsQuery)(nil), "applicationset.ApplicationSetResourceEventsQuery")
	proto.RegisterType((*ApplicationSetWatchQuery)(nil), "applicationset.ApplicationSetWatchQuery")
	proto.RegisterType((*ApplicationSetResponse)(nil), "applicationset.ApplicationSetResponse")
	proto.RegisterType((*ApplicationSetCreateRequest)(nil), "applicationset.ApplicationSetCreateRequest")
	proto.RegisterType((*ApplicationSetDeleteRequest)(nil), "applicationset.ApplicationSetDeleteRequest")
}

func init() {
	proto.RegisterFile("server/applicationset/applicationset.proto", fileDescriptor_eacb9df0ce5738fa)
}

var fileDescriptor_eacb9df0ce5738fa = []byte{
	// 676 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x96, 0xdd, 0x6a, 0x13, 0x41,
	0x14, 0xc7, 0x99, 0xa6, 0x4d, 0xdb, 0x11, 0x14, 0x06, 0x6c, 0xe3, 0xaa, 0xb1, 0x2e, 0xd8, 0xc6,
	0x4a, 0x67, 0x4d, 0xbc, 0x11, 0xbd, 0xf2, 0x8b, 0x22, 0x14, 0xd1, 0x14, 0x2a, 0xe8, 0x85, 0x4c,
	0xb7, 0x87, 0xed, 0xda, 0x64, 0x67, 0x9c, 0x99, 0x2c, 0x48, 0xf1, 0x46, 0xf0, 0x09, 0xc4, 0x17,
	0xd0, 0x1b, 0xc1, 0x4b, 0xbd, 0xf2, 0x09, 0xbc, 0x14, 0x7c, 0x01, 0x29, 0xde, 0xfb, 0x0a, 0x32,
	0xb3, 0x9b, 0xa6, 0x3b, 0x4d, 0x36, 0x82, 0xf1, 0x6e, 0x3e, 0x4e, 0xce, 0xf9, 0x9d, 0x33, 0xe7,
	0xfc, 0x37, 0x78, 0x55, 0x81, 0x4c, 0x41, 0x06, 0x4c, 0x88, 0x4e, 0x1c, 0x32, 0x1d, 0xf3, 0x44,
	0x81, 0x76, 0xb6, 0x54, 0x48, 0xae, 0x39, 0x39, 0x59, 0x3c, 0xf5, 0xce, 0x45, 0x9c, 0x47, 0x1d,
	0x08, 0x98, 0x88, 0x03, 0x96, 0x24, 0x5c, 0x67, 0x37, 0x99, 0xb5, 0xe7, 0xef, 0x5d, 0x57, 0x34,
	0xe6, 0xf6, 0x36, 0xe4, 0x12, 0x82, 0xb4, 0x19, 0x44, 0x90, 0x80, 0x64, 0x1a, 0x76, 0x72, 0x9b,
	0x8d, 0x28, 0xd6, 0xbb, 0xbd, 0x6d, 0x1a, 0xf2, 0x6e, 0xc0, 0x64, 0xc4, 0x85, 0xe4, 0xcf, 0xed,
	0x62, 0x2d, 0xdc, 0x09, 0xd2, 0x56, 0x20, 0xf6, 0x22, 0xf3, 0x7b, 0x75, 0x94, 0x27, 0x48, 0x9b,
	0xac, 0x23, 0x76, 0xd9, 0x31, 0x6f, 0xfe, 0x16, 0x5e, 0xb8, 0x35, 0xb0, 0xdb, 0x04, 0xbd, 0x0e,
	0xfa, 0x51, 0x0f, 0xe4, 0x4b, 0x42, 0xf0, 0x74, 0xc2, 0xba, 0x50, 0x43, 0x4b, 0xa8, 0x31, 0xdf,
	0xb6, 0x6b, 0xd2, 0xc0, 0xa7, 0x98, 0x10, 0x0a, 0xf4, 0x03, 0xd6, 0x05, 0x25, 0x58, 0x08, 0xb5,
	0x29, 0x7b, 0xed, 0x1e, 0xfb, 0xfb, 0x78, 0xb1, 0xe8, 0x77, 0x23, 0x56, 0xb9, 0x63, 0x0f, 0xcf,
	0x19, 0x66, 0x08, 0xb5, 0xaa, 0xa1, 0xa5, 0x4a, 0x63, 0xbe, 0x7d, 0xb8, 0x37, 0x77, 0x0a, 0x3a,
	0x10, 0x6a, 0x2e, 0x73, 0xcf, 0x87, 0xfb, 0x61, 0xc1, 0x2b, 0xc3, 0x83, 0x33, 0x7c, 0xb1, 0x18,
	0xbc, 0x0d, 0x8a, 0xf7, 0x64, 0x08, 0xf7, 0x52, 0x48, 0xb4, 0x9a, 0x44, 0x7e, 0x5f, 0x11, 0xae,
	0x15, 0x63, 0x3c, 0x66, 0x3a, 0xdc, 0x1d, 0xed, 0xfa, 0x68, 0xd6, 0x53, 0x25, 0x59, 0x57, 0xc6,
	0x67, 0x3d, 0x3d, 0x14, 0xc9, 0x58, 0xca, 0x3c, 0xcf, 0x2d, 0x90, 0x2a, 0xe6, 0x49, 0x6d, 0x26,
	0xb3, 0x74, 0x8e, 0xfd, 0x8f, 0xc8, 0x7d, 0xf5, 0x36, 0x28, 0x61, 0x1a, 0x94, 0xd4, 0xf0, 0x6c,
	0x8e, 0x95, 0xd3, 0xf7, 0xb7, 0x44, 0x63, 0xa7, 0x97, 0x6d, 0x69, 0x4e, 0xb4, 0x36, 0xe8, 0xa0,
	0x21, 0x69, 0xbf, 0x21, 0xed, 0xe2, 0x59, 0xb8, 0x43, 0xd3, 0x16, 0x15, 0x7b, 0x11, 0x35, 0x0d,
	0x49, 0x8f, 0xfc, 0x9c, 0xf6, 0x1b, 0x92, 0x3a, 0x1c, 0x4e, 0x0c, 0xff, 0x13, 0xc2, 0x67, 0x8b,
	0x26, 0x77, 0x24, 0x30, 0x0d, 0x6d, 0x78, 0xd1, 0x03, 0x35, 0x8c, 0x0a, 0xfd, 0x7f, 0x2a, 0xb2,
	0x80, 0xab, 0x3d, 0xa1, 0x40, 0x66, 0x35, 0x98, 0x6b, 0xe7, 0x3b, 0xff, 0xa9, 0x0b, 0x7b, 0x17,
	0x3a, 0x30, 0x80, 0xfd, 0xa7, 0x96, 0x6b, 0xfd, 0x9e, 0xc5, 0xa7, 0x8b, 0xde, 0x37, 0x41, 0xa6,
	0x71, 0x08, 0xe4, 0x03, 0xc2, 0x95, 0x75, 0xd0, 0x64, 0x99, 0x3a, 0x1a, 0x34, 0x7c, 0xb4, 0xbd,
	0x89, 0x16, 0xc7, 0x5f, 0x7e, 0xfd, 0xe3, 0xd7, 0xdb, 0xa9, 0x25, 0x52, 0xb7, 0xb2, 0x95, 0x36,
	0x1d, 0x21, 0x54, 0xc1, 0xbe, 0x49, 0xf4, 0x15, 0x79, 0x8f, 0xf0, 0xb4, 0x51, 0x01, 0xb2, 0x52,
	0x8e, 0x79, 0xa8, 0x14, 0xde, 0xc3, 0x49, 0x72, 0x1a, 0xb7, 0xfe, 0x05, 0xcb, 0x7a, 0x86, 0x2c,
	0x8e, 0x60, 0x25, 0xef, 0x10, 0x26, 0xc6, 0xb2, 0xa8, 0x18, 0xa4, 0x59, 0x8e, 0x3c, 0x44, 0x5f,
	0xbc, 0xf3, 0x34, 0x13, 0x73, 0x03, 0x48, 0x8d, 0x98, 0xd3, 0xb4, 0x49, 0xad, 0x81, 0x25, 0x59,
	0xb3, 0x24, 0x2b, 0xe4, 0x52, 0x79, 0xd5, 0x02, 0xc8, 0x00, 0x3e, 0x23, 0x3c, 0x63, 0x15, 0x86,
	0x34, 0xca, 0x51, 0x06, 0x32, 0xe4, 0x6d, 0x4d, 0xb2, 0x7c, 0xd6, 0xaf, 0xc5, 0x3f, 0xfe, 0xe0,
	0x4a, 0x4b, 0x60, 0x5d, 0x37, 0x83, 0xab, 0x88, 0x7c, 0x41, 0xb8, 0x9a, 0xcd, 0x2b, 0xb9, 0x52,
	0x8e, 0x5d, 0x98, 0xea, 0x09, 0x37, 0x68, 0x60, 0x79, 0x2f, 0xfb, 0xa3, 0x1e, 0xfd, 0x86, 0x3b,
	0xde, 0x6f, 0x10, 0xae, 0x66, 0x93, 0x3b, 0x0e, 0xbb, 0x30, 0xdf, 0xde, 0xf2, 0xd8, 0x2e, 0xb1,
	0x22, 0xdb, 0x2f, 0xe0, 0xea, 0x98, 0x89, 0xb9, 0x7d, 0xff, 0xdb, 0x41, 0x1d, 0x7d, 0x3f, 0xa8,
	0xa3, 0x9f, 0x07, 0x75, 0xf4, 0xe4, 0xe6, 0xdf, 0x7d, 0xf8, 0xc3, 0x4e, 0x0c, 0x89, 0xfb, 0x6f,
	0x64, 0xbb, 0x6a, 0x3f, 0xf7, 0xd7, 0xfe, 0x04, 0x00, 0x00, 0xff, 0xff, 0x1b, 0x22, 0x4c, 0x05,
	0xbc, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ApplicationSetServiceClient is the client API for ApplicationSetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ApplicationSetServiceClient interface {
	// Get returns an applicationset by name
	Get(ctx context.Context, in *ApplicationSetGetQuery, opts ...grpc.CallOption) (*v1alpha1.ApplicationSet, error)
	//List returns list of applicationset
	List(ctx context.Context, in *ApplicationSetListQuery, opts ...grpc.CallOption) (*v1alpha1.ApplicationSetList, error)
	// ListResourceEvents returns a list of event resources
	ListResourceEvents(ctx context.Context, in *ApplicationSetResourceEventsQuery, opts ...grpc.CallOption) (*v1.EventList, error)
	// Watch returns stream of applicationset change events
	Watch(ctx context.Context, in *ApplicationSetWatchQuery, opts ...grpc.CallOption) (ApplicationSetService_WatchClient, error)
	//Create creates an applicationset
	Create(ctx context.Context, in *ApplicationSetCreateRequest, opts ...grpc.CallOption) (*v1alpha1.ApplicationSet, error)
	// Delete deletes an application set
	Delete(ctx context.Context, in *ApplicationSetDeleteRequest, opts ...grpc.CallOption) (*ApplicationSetResponse, error)
}

type applicationSetServiceClient struct {
	cc *grpc.ClientConn
}

func NewApplicationSetServiceClient(cc *grpc.ClientConn) ApplicationSetServiceClient {
	return &applicationSetServiceClient{cc}
}

func (c *applicationSetServiceClient) Get(ctx context.Context, in *ApplicationSetGetQuery, opts ...grpc.CallOption) (*v1alpha1.ApplicationSet, error) {
	out := new(v1alpha1.ApplicationSet)
	err := c.cc.Invoke(ctx, "/applicationset.ApplicationSetService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationSetServiceClient) List(ctx context.Context, in *ApplicationSetListQuery, opts ...grpc.CallOption) (*v1alpha1.ApplicationSetList, error) {
	out := new(v1alpha1.ApplicationSetList)
	err := c.cc.Invoke(ctx, "/applicationset.ApplicationSetService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationSetServiceClient) ListResourceEvents(ctx context.Context, in *ApplicationSetResourceEventsQuery, opts ...grpc.CallOption) (*v1.EventList, error) {
	out := new(v1.EventList)
	err := c.cc.Invoke(ctx, "/applicationset.ApplicationSetService/ListResourceEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationSetServiceClient) Watch(ctx context.Context, in *ApplicationSetWatchQuery, opts ...grpc.CallOption) (ApplicationSetService_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ApplicationSetService_serviceDesc.Streams[0], "/applicationset.ApplicationSetService/Watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &applicationSetServiceWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ApplicationSetService_WatchClient interface {
	Recv() (*v1alpha1.ApplicationSetWatchEvent, error)
	grpc.ClientStream
}

type applicationSetServiceWatchClient struct {
	grpc.ClientStream
}

func (x *applicationSetServiceWatchClient) Recv() (*v1alpha1.ApplicationSetWatchEvent, error) {
	m := new(v1alpha1.ApplicationSetWatchEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *applicationSetServiceClient) Create(ctx context.Context, in *ApplicationSetCreateRequest, opts ...grpc.CallOption) (*v1alpha1.ApplicationSet, error) {
	out := new(v1alpha1.ApplicationSet)
	err := c.cc.Invoke(ctx, "/applicationset.ApplicationSetService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationSetServiceClient) Delete(ctx context.Context, in *ApplicationSetDeleteRequest, opts ...grpc.CallOption) (*ApplicationSetResponse, error) {
	out := new(ApplicationSetResponse)
	err := c.cc.Invoke(ctx, "/applicationset.ApplicationSetService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApplicationSetServiceServer is the server API for ApplicationSetService service.
type ApplicationSetServiceServer interface {
	// Get returns an applicationset by name
	Get(context.Context, *ApplicationSetGetQuery) (*v1alpha1.ApplicationSet, error)
	//List returns list of applicationset
	List(context.Context, *ApplicationSetListQuery) (*v1alpha1.ApplicationSetList, error)
	// ListResourceEvents returns a list of event resources
	ListResourceEvents(context.Context, *ApplicationSetResourceEventsQuery) (*v1.EventList, error)
	// Watch returns stream of applicationset change events
	Watch(*ApplicationSetWatchQuery, ApplicationSetService_WatchServer) error
	//Create creates an applicationset
	Create(context.Context, *ApplicationSetCreateRequest) (*v1alpha1.ApplicationSet, error)
	// Delete deletes an application set
	Delete(context.Context, *ApplicationSetDeleteRequest) (*ApplicationSetResponse, error)
}

// UnimplementedApplicationSetServiceServer can be embedded to have forward compatible implementations.
type UnimplementedApplicationSetServiceServer struct {
}

func (*UnimplementedApplicationSetServiceServer) Get(ctx context.Context, req *ApplicationSetGetQuery) (*v1alpha1.ApplicationSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedApplicationSetServiceServer) List(ctx context.Context, req *ApplicationSetListQuery) (*v1alpha1.ApplicationSetList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedApplicationSetServiceServer) ListResourceEvents(ctx context.Context, req *ApplicationSetResourceEventsQuery) (*v1.EventList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListResourceEvents not implemented")
}
func (*UnimplementedApplicationSetServiceServer) Watch(req *ApplicationSetWatchQuery, srv ApplicationSetService_WatchServer) error {
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}
func (*UnimplementedApplicationSetServiceServer) Create(ctx context.Context, req *ApplicationSetCreateRequest) (*v1alpha1.ApplicationSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedApplicationSetServiceServer) Delete(ctx context.Context, req *ApplicationSetDeleteRequest) (*ApplicationSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterApplicationSetServiceServer(s *grpc.Server, srv ApplicationSetServiceServer) {
	s.RegisterService(&_ApplicationSetService_serviceDesc, srv)
}

func _ApplicationSetService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationSetGetQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationSetServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/applicationset.ApplicationSetService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationSetServiceServer).Get(ctx, req.(*ApplicationSetGetQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationSetService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationSetListQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationSetServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/applicationset.ApplicationSetService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationSetServiceServer).List(ctx, req.(*ApplicationSetListQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationSetService_ListResourceEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationSetResourceEventsQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationSetServiceServer).ListResourceEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/applicationset.ApplicationSetService/ListResourceEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationSetServiceServer).ListResourceEvents(ctx, req.(*ApplicationSetResourceEventsQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationSetService_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ApplicationSetWatchQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ApplicationSetServiceServer).Watch(m, &applicationSetServiceWatchServer{stream})
}

type ApplicationSetService_WatchServer interface {
	Send(*v1alpha1.ApplicationSetWatchEvent) error
	grpc.ServerStream
}

type applicationSetServiceWatchServer struct {
	grpc.ServerStream
}

func (x *applicationSetServiceWatchServer) Send(m *v1alpha1.ApplicationSetWatchEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _ApplicationSetService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationSetCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationSetServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/applicationset.ApplicationSetService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationSetServiceServer).Create(ctx, req.(*ApplicationSetCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationSetService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationSetDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationSetServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/applicationset.ApplicationSetService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationSetServiceServer).Delete(ctx, req.(*ApplicationSetDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ApplicationSetService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "applicationset.ApplicationSetService",
	HandlerType: (*ApplicationSetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _ApplicationSetService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ApplicationSetService_List_Handler,
		},
		{
			MethodName: "ListResourceEvents",
			Handler:    _ApplicationSetService_ListResourceEvents_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _ApplicationSetService_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ApplicationSetService_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Watch",
			Handler:       _ApplicationSetService_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "server/applicationset/applicationset.proto",
}

func (m *ApplicationSetGetQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationSetGetQuery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplicationSetGetQuery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AppsetNamespace) > 0 {
		i -= len(m.AppsetNamespace)
		copy(dAtA[i:], m.AppsetNamespace)
		i = encodeVarintApplicationset(dAtA, i, uint64(len(m.AppsetNamespace)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApplicationset(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ApplicationSetListQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationSetListQuery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplicationSetListQuery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AppsetNamespace) > 0 {
		i -= len(m.AppsetNamespace)
		copy(dAtA[i:], m.AppsetNamespace)
		i = encodeVarintApplicationset(dAtA, i, uint64(len(m.AppsetNamespace)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Selector) > 0 {
		i -= len(m.Selector)
		copy(dAtA[i:], m.Selector)
		i = encodeVarintApplicationset(dAtA, i, uint64(len(m.Selector)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Projects) > 0 {
		for iNdEx := len(m.Projects) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Projects[iNdEx])
			copy(dAtA[i:], m.Projects[iNdEx])
			i = encodeVarintApplicationset(dAtA, i, uint64(len(m.Projects[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ApplicationSetResourceEventsQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationSetResourceEventsQuery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplicationSetResourceEventsQuery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AppsetNamespace) > 0 {
		i -= len(m.AppsetNamespace)
		copy(dAtA[i:], m.AppsetNamespace)
		i = encodeVarintApplicationset(dAtA, i, uint64(len(m.AppsetNamespace)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApplicationset(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ApplicationSetWatchQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationSetWatchQuery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplicationSetWatchQuery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ResourceVersion) > 0 {
		i -= len(m.ResourceVersion)
		copy(dAtA[i:], m.ResourceVersion)
		i = encodeVarintApplicationset(dAtA, i, uint64(len(m.ResourceVersion)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.AppsetNamespace) > 0 {
		i -= len(m.AppsetNamespace)
		copy(dAtA[i:], m.AppsetNamespace)
		i = encodeVarintApplicationset(dAtA, i, uint64(len(m.AppsetNamespace)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Selector) > 0 {
		i -= len(m.Selector)
		copy(dAtA[i:], m.Selector)
		i = encodeVarintApplicationset(dAtA, i, uint64(len(m.Selector)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Projects) > 0 {
		for iNdEx := len(m.Projects) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Projects[iNdEx])
			copy(dAtA[i:], m.Projects[iNdEx])
			i = encodeVarintApplicationset(dAtA, i, uint64(len(m.Projects[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApplicationset(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ApplicationSetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationSetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplicationSetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Applicationset != nil {
		{
			size, err := m.Applicationset.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApplicationset(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Project) > 0 {
		i -= len(m.Project)
		copy(dAtA[i:], m.Project)
		i = encodeVarintApplicationset(dAtA, i, uint64(len(m.Project)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ApplicationSetCreateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationSetCreateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplicationSetCreateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Upsert {
		i--
		if m.Upsert {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Applicationset != nil {
		{
			size, err := m.Applicationset.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApplicationset(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ApplicationSetDeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationSetDeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplicationSetDeleteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AppsetNamespace) > 0 {
		i -= len(m.AppsetNamespace)
		copy(dAtA[i:], m.AppsetNamespace)
		i = encodeVarintApplicationset(dAtA, i, uint64(len(m.AppsetNamespace)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApplicationset(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintApplicationset(dAtA []byte, offset int, v uint64) int {
	offset -= sovApplicationset(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ApplicationSetGetQuery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApplicationset(uint64(l))
	}
	l = len(m.AppsetNamespace)
	if l > 0 {
		n += 1 + l + sovApplicationset(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ApplicationSetListQuery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Projects) > 0 {
		for _, s := range m.Projects {
			l = len(s)
			n += 1 + l + sovApplicationset(uint64(l))
		}
	}
	l = len(m.Selector)
	if l > 0 {
		n += 1 + l + sovApplicationset(uint64(l))
	}
	l = len(m.AppsetNamespace)
	if l > 0 {
		n += 1 + l + sovApplicationset(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ApplicationSetResourceEventsQuery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApplicationset(uint64(l))
	}
	l = len(m.AppsetNamespace)
	if l > 0 {
		n += 1 + l + sovApplicationset(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ApplicationSetWatchQuery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApplicationset(uint64(l))
	}
	if len(m.Projects) > 0 {
		for _, s := range m.Projects {
			l = len(s)
			n += 1 + l + sovApplicationset(uint64(l))
		}
	}
	l = len(m.Selector)
	if l > 0 {
		n += 1 + l + sovApplicationset(uint64(l))
	}
	l = len(m.AppsetNamespace)
	if l > 0 {
		n += 1 + l + sovApplicationset(uint64(l))
	}
	l = len(m.ResourceVersion)
	if l > 0 {
		n += 1 + l + sovApplicationset(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ApplicationSetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Project)
	if l > 0 {
		n += 1 + l + sovApplicationset(uint64(l))
	}
	if m.Applicationset != nil {
		l = m.Applicationset.Size()
		n += 1 + l + sovApplicationset(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ApplicationSetCreateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Applicationset != nil {
		l = m.Applicationset.Size()
		n += 1 + l + sovApplicationset(uint64(l))
	}
	if m.Upsert {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ApplicationSetDeleteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApplicationset(uint64(l))
	}
	l = len(m.AppsetNamespace)
	if l > 0 {
		n += 1 + l + sovApplicationset(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApplicationset(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApplicationset(x uint64) (n int) {
	return sovApplicationset(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ApplicationSetGetQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplicationset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplicationSetGetQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplicationSetGetQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplicationset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppsetNamespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplicationset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppsetNamespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApplicationset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApplicationset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplicationSetListQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplicationset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplicationSetListQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplicationSetListQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Projects", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplicationset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Projects = append(m.Projects, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Selector", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplicationset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Selector = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppsetNamespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplicationset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppsetNamespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApplicationset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApplicationset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplicationSetResourceEventsQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplicationset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplicationSetResourceEventsQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplicationSetResourceEventsQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplicationset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppsetNamespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplicationset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppsetNamespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApplicationset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApplicationset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplicationSetWatchQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplicationset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplicationSetWatchQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplicationSetWatchQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplicationset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Projects", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplicationset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Projects = append(m.Projects, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Selector", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplicationset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Selector = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppsetNamespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplicationset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppsetNamespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplicationset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApplicationset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApplicationset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplicationSetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplicationset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplicationSetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplicationSetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Project", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplicationset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Project = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Applicationset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplicationset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Applicationset == nil {
				m.Applicationset = &v1alpha1.ApplicationSet{}
			}
			if err := m.Applicationset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApplicationset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApplicationset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplicationSetCreateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplicationset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplicationSetCreateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplicationSetCreateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Applicationset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplicationset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Applicationset == nil {
				m.Applicationset = &v1alpha1.ApplicationSet{}
			}
			if err := m.Applicationset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Upsert", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Upsert = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApplicationset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApplicationset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplicationSetDeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplicationset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplicationSetDeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplicationSetDeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplicationset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppsetNamespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplicationset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplicationset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApplicationset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppsetNamespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApplicationset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApplicationset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApplicationset(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApplicationset
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApplicationset
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApplicationset
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApplicationset
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApplicationset
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApplicationset
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApplicationset        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApplicationset          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApplicationset = fmt.Errorf("proto: unexpected end of group")
)
