syntax = "proto3";

// Application Service
//
// Application Service API performs CRUD actions against application resources
package apiclient.application;

import "apiclient/reposerver/repository/repository.proto";
import "apis/application/v1alpha1/generated.proto";
import "google/api/annotations.proto";
import "k8s.io/api/core/v1/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";

// ApplicationQuery is a query for application resources
message ApplicationQuery {
  // the application's name
  string name = 1;
  // forces application reconciliation if set to true
  string refresh = 2;
  // the project names to restrict returned list applications
  repeated string projects = 3;
  // when specified with a watch call, shows changes that occur after that particular version of a resource.
  string resourceVersion = 4;
  // the selector to restrict returned list to applications only with matched labels
  string selector = 5;
  // the repoURL to restrict returned list applications
  string repo = 6;
}

message NodeQuery {
  // the application's name
  string name = 1;
}

message RevisionMetadataQuery {
  // the application's name
  string name = 1;
  // the revision of the app
  string revision = 2;
}

// ApplicationEventsQuery is a query for application resource events
message ApplicationResourceEventsQuery {
  string name = 1;
  string resourceNamespace = 2;
  string resourceName = 3;
  string resourceUID = 4;
}

// ManifestQuery is a query for manifest resources
message ApplicationManifestQuery {
  string name = 1;
  string revision = 2;
}

message ApplicationResponse {}

message ApplicationCreateRequest {
  apis.application.v1alpha1.Application application = 1;
  bool upsert = 2;
  optional bool validate = 3;
}

message ApplicationUpdateRequest {
  apis.application.v1alpha1.Application application = 1;
  optional bool validate = 2;
}

message ApplicationDeleteRequest {
  string name = 1;
  optional bool cascade = 2;
  string propagationPolicy = 3;
}

message SyncOptions {
  repeated string items = 1;
}

// ApplicationSyncRequest is a request to apply the config state to live state
message ApplicationSyncRequest {
  string name = 1;
  string revision = 2;
  bool dryRun = 3;
  bool prune = 4;
  apis.application.v1alpha1.SyncStrategy strategy = 5;
  repeated apis.application.v1alpha1.SyncOperationResource resources = 7;
  repeated string manifests = 8;
  repeated apis.application.v1alpha1.Info infos = 9;
  apis.application.v1alpha1.RetryStrategy retryStrategy = 10;
  SyncOptions syncOptions = 11;
}

// ApplicationUpdateSpecRequest is a request to update application spec
message ApplicationUpdateSpecRequest {
  string name = 1;
  apis.application.v1alpha1.ApplicationSpec spec = 2;
  optional bool validate = 3;
}

// ApplicationPatchRequest is a request to patch an application
message ApplicationPatchRequest {
  string name = 1;
  string patch = 2;
  string patchType = 3;
}

message ApplicationRollbackRequest {
  string name = 1;
  int64 id = 2;
  bool dryRun = 3;
  bool prune = 4;
}

message ApplicationResourceRequest {
  string name = 1;
  string namespace = 2;
  string resourceName = 3;
  string version = 4;
  string group = 5;
  string kind = 6;
}

message ApplicationResourcePatchRequest {
  string name = 1;
  string namespace = 2;
  string resourceName = 3;
  string version = 4;
  string group = 5;
  string kind = 6;
  string patch = 7;
  string patchType = 8;
}

message ApplicationResourceDeleteRequest {
  string name = 1;
  string namespace = 2;
  string resourceName = 3;
  string version = 4;
  string group = 5;
  string kind = 6;
  bool force = 7;
  bool orphan = 8;
}

message ResourceActionRunRequest {
  string name = 1;
  string namespace = 2;
  string resourceName = 3;
  string version = 4;
  string group = 5;
  string kind = 6;
  string action = 7;
}

message ResourceActionsListResponse {
  repeated apis.application.v1alpha1.ResourceAction actions = 1;
}

message ApplicationResourceResponse {
  string manifest = 1;
}

message ApplicationPodLogsQuery {
  string name = 1;
  string namespace = 2;
  string podName = 3;
  string container = 4;
  int64 sinceSeconds = 5;
  k8s.io.apimachinery.pkg.apis.meta.v1.Time sinceTime = 6;
  int64 tailLines = 7;
  bool follow = 8;
  string untilTime = 9;
  string filter = 10;
  string kind = 11;
  string group = 12;
  string resourceName = 13;
  bool previous = 14;
}

message LogEntry {
  string content = 1;
  // deprecated in favor of timeStampStr since meta.v1.Time don't support nano time
  k8s.io.apimachinery.pkg.apis.meta.v1.Time timeStamp = 2;
  bool last = 3;
  string timeStampStr = 4;
  string podName = 5;
}

message OperationTerminateRequest {
  string name = 1;
}

message ApplicationSyncWindowsQuery {
  string name = 1;
}

message ApplicationSyncWindowsResponse {
  repeated ApplicationSyncWindow activeWindows = 1;
  repeated ApplicationSyncWindow assignedWindows = 2;
  bool canSync = 3;
}

message ApplicationSyncWindow {
  string kind = 1;
  string schedule = 2;
  string duration = 3;
  bool manualSync = 4;
}

message OperationTerminateResponse {}

message ResourcesQuery {
  string applicationName = 1;

  string namespace = 2;
  string name = 3;
  string version = 4;
  string group = 5;
  string kind = 6;
}

message ManagedResourcesResponse {
  repeated apis.application.v1alpha1.ResourceDiff items = 1;
}

// ApplicationService
service ApplicationService {
  // List returns list of applications
  rpc List(ApplicationQuery) returns (apis.application.v1alpha1.ApplicationList) {
    option (google.api.http).get = "/api/v1/applications";
  }

  // ListResourceEvents returns a list of event resources
  rpc ListResourceEvents(ApplicationResourceEventsQuery) returns (k8s.io.api.core.v1.EventList) {
    option (google.api.http).get = "/api/v1/applications/{name}/events";
  }

  // Watch returns stream of application change events
  rpc Watch(ApplicationQuery) returns (stream apis.application.v1alpha1.ApplicationWatchEvent) {
    option (google.api.http).get = "/api/v1/stream/applications";
  }

  // Create creates an application
  rpc Create(ApplicationCreateRequest) returns (apis.application.v1alpha1.Application) {
    option (google.api.http) = {
      post: "/api/v1/applications"
      body: "application"
    };
  }

  // Get returns an application by name
  rpc Get(ApplicationQuery) returns (apis.application.v1alpha1.Application) {
    option (google.api.http).get = "/api/v1/applications/{name}";
  }

  // Get returns sync windows of the application
  rpc GetApplicationSyncWindows(ApplicationSyncWindowsQuery) returns (ApplicationSyncWindowsResponse) {
    option (google.api.http).get = "/api/v1/applications/{name}/syncwindows";
  }

  // Get the meta-data (author, date, tags, message) for a specific revision of the application
  rpc RevisionMetadata(RevisionMetadataQuery) returns (apis.application.v1alpha1.RevisionMetadata) {
    option (google.api.http).get = "/api/v1/applications/{name}/revisions/{revision}/metadata";
  }

  // GetManifests returns application manifests
  rpc GetManifests(ApplicationManifestQuery) returns (apiclient.reposerver.repository.ManifestResponse) {
    option (google.api.http).get = "/api/v1/applications/{name}/manifests";
  }

  // Update updates an application
  rpc Update(ApplicationUpdateRequest) returns (apis.application.v1alpha1.Application) {
    option (google.api.http) = {
      put: "/api/v1/applications/{application.metadata.name}"
      body: "application"
    };
  }

  // UpdateSpec updates an application spec
  rpc UpdateSpec(ApplicationUpdateSpecRequest) returns (apis.application.v1alpha1.ApplicationSpec) {
    option (google.api.http) = {
      put: "/api/v1/applications/{name}/spec"
      body: "spec"
    };
  }

  // Patch patch an application
  rpc Patch(ApplicationPatchRequest) returns (apis.application.v1alpha1.Application) {
    option (google.api.http) = {
      patch: "/api/v1/applications/{name}"
      body: "*"
    };
  }

  // Delete deletes an application
  rpc Delete(ApplicationDeleteRequest) returns (ApplicationResponse) {
    option (google.api.http).delete = "/api/v1/applications/{name}";
  }

  // Sync syncs an application to its target state
  rpc Sync(ApplicationSyncRequest) returns (apis.application.v1alpha1.Application) {
    option (google.api.http) = {
      post: "/api/v1/applications/{name}/sync"
      body: "*"
    };
  }

  // ManagedResources returns list of managed resources
  rpc ManagedResources(ResourcesQuery) returns (ManagedResourcesResponse) {
    option (google.api.http).get = "/api/v1/applications/{applicationName}/managed-resources";
  }

  // ResourceTree returns resource tree
  rpc ResourceTree(ResourcesQuery) returns (apis.application.v1alpha1.ApplicationTree) {
    option (google.api.http).get = "/api/v1/applications/{applicationName}/resource-tree";
  }

  // Watch returns stream of application resource tree
  rpc WatchResourceTree(ResourcesQuery) returns (stream apis.application.v1alpha1.ApplicationTree) {
    option (google.api.http).get = "/api/v1/stream/applications/{applicationName}/resource-tree";
  }

  // Rollback syncs an application to its target state
  rpc Rollback(ApplicationRollbackRequest) returns (apis.application.v1alpha1.Application) {
    option (google.api.http) = {
      post: "/api/v1/applications/{name}/rollback"
      body: "*"
    };
  }

  // TerminateOperation terminates the currently running operation
  rpc TerminateOperation(OperationTerminateRequest) returns (OperationTerminateResponse) {
    option (google.api.http) = {
      delete: "/api/v1/applications/{name}/operation";
    };
  }

  // GetResource returns single application resource
  rpc GetResource(ApplicationResourceRequest) returns (ApplicationResourceResponse) {
    option (google.api.http).get = "/api/v1/applications/{name}/resource";
  }

  // PatchResource patch single application resource
  rpc PatchResource(ApplicationResourcePatchRequest) returns (ApplicationResourceResponse) {
    option (google.api.http) = {
      post: "/api/v1/applications/{name}/resource"
      body: "patch"
    };
  }

  // ListResourceActions returns list of resource actions
  rpc ListResourceActions(ApplicationResourceRequest) returns (ResourceActionsListResponse) {
    option (google.api.http).get = "/api/v1/applications/{name}/resource/actions";
  }

  // RunResourceAction run resource action
  rpc RunResourceAction(ResourceActionRunRequest) returns (ApplicationResponse) {
    option (google.api.http) = {
      post: "/api/v1/applications/{name}/resource/actions"
      body: "action"
    };
  }

  // DeleteResource deletes a single application resource
  rpc DeleteResource(ApplicationResourceDeleteRequest) returns (ApplicationResponse) {
    option (google.api.http).delete = "/api/v1/applications/{name}/resource";
  }

  // PodLogs returns stream of log entries for the specified pod. Pod
  rpc PodLogs(ApplicationPodLogsQuery) returns (stream LogEntry) {
    option (google.api.http) = {
      get: "/api/v1/applications/{name}/pods/{podName}/logs"
      additional_bindings {
        get: "/api/v1/applications/{name}/logs"
      }
    };
  }
}
