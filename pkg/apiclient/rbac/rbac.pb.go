// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: server/rbac/rbac.proto

// RBAC Service
//
// RBAC Service API performs CRUD actions against RBAC resources

package rbac

import (
	context "context"
	fmt "fmt"
	v1alpha1 "github.com/argoproj/argo-cd/v2/pkg/apis/application/v1alpha1"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Message to query the server for a list of policies
type RBACPolicyQuery struct {
	// Policy Key is the key of the policy to query
	PolicyKey            string   `protobuf:"bytes,1,opt,name=policyKey,proto3" json:"policyKey,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RBACPolicyQuery) Reset()         { *m = RBACPolicyQuery{} }
func (m *RBACPolicyQuery) String() string { return proto.CompactTextString(m) }
func (*RBACPolicyQuery) ProtoMessage()    {}
func (*RBACPolicyQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_067f2a36e7395fd3, []int{0}
}
func (m *RBACPolicyQuery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RBACPolicyQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RBACPolicyQuery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RBACPolicyQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RBACPolicyQuery.Merge(m, src)
}
func (m *RBACPolicyQuery) XXX_Size() int {
	return m.Size()
}
func (m *RBACPolicyQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_RBACPolicyQuery.DiscardUnknown(m)
}

var xxx_messageInfo_RBACPolicyQuery proto.InternalMessageInfo

func (m *RBACPolicyQuery) GetPolicyKey() string {
	if m != nil {
		return m.PolicyKey
	}
	return ""
}

// Request to create a new policy
type RBACPolicyUpdateRequest struct {
	// Policy definition
	Policy               *v1alpha1.RBACPolicyRule `protobuf:"bytes,1,opt,name=policy,proto3" json:"policy,omitempty"`
	PolicyKey            string                   `protobuf:"bytes,2,opt,name=policyKey,proto3" json:"policyKey,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *RBACPolicyUpdateRequest) Reset()         { *m = RBACPolicyUpdateRequest{} }
func (m *RBACPolicyUpdateRequest) String() string { return proto.CompactTextString(m) }
func (*RBACPolicyUpdateRequest) ProtoMessage()    {}
func (*RBACPolicyUpdateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_067f2a36e7395fd3, []int{1}
}
func (m *RBACPolicyUpdateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RBACPolicyUpdateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RBACPolicyUpdateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RBACPolicyUpdateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RBACPolicyUpdateRequest.Merge(m, src)
}
func (m *RBACPolicyUpdateRequest) XXX_Size() int {
	return m.Size()
}
func (m *RBACPolicyUpdateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RBACPolicyUpdateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RBACPolicyUpdateRequest proto.InternalMessageInfo

func (m *RBACPolicyUpdateRequest) GetPolicy() *v1alpha1.RBACPolicyRule {
	if m != nil {
		return m.Policy
	}
	return nil
}

func (m *RBACPolicyUpdateRequest) GetPolicyKey() string {
	if m != nil {
		return m.PolicyKey
	}
	return ""
}

type RBACPolicyUpdateResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RBACPolicyUpdateResponse) Reset()         { *m = RBACPolicyUpdateResponse{} }
func (m *RBACPolicyUpdateResponse) String() string { return proto.CompactTextString(m) }
func (*RBACPolicyUpdateResponse) ProtoMessage()    {}
func (*RBACPolicyUpdateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_067f2a36e7395fd3, []int{2}
}
func (m *RBACPolicyUpdateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RBACPolicyUpdateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RBACPolicyUpdateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RBACPolicyUpdateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RBACPolicyUpdateResponse.Merge(m, src)
}
func (m *RBACPolicyUpdateResponse) XXX_Size() int {
	return m.Size()
}
func (m *RBACPolicyUpdateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RBACPolicyUpdateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RBACPolicyUpdateResponse proto.InternalMessageInfo

type RBACPolicyListRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RBACPolicyListRequest) Reset()         { *m = RBACPolicyListRequest{} }
func (m *RBACPolicyListRequest) String() string { return proto.CompactTextString(m) }
func (*RBACPolicyListRequest) ProtoMessage()    {}
func (*RBACPolicyListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_067f2a36e7395fd3, []int{3}
}
func (m *RBACPolicyListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RBACPolicyListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RBACPolicyListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RBACPolicyListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RBACPolicyListRequest.Merge(m, src)
}
func (m *RBACPolicyListRequest) XXX_Size() int {
	return m.Size()
}
func (m *RBACPolicyListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RBACPolicyListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RBACPolicyListRequest proto.InternalMessageInfo

func init() {
	proto.RegisterType((*RBACPolicyQuery)(nil), "rbac.RBACPolicyQuery")
	proto.RegisterType((*RBACPolicyUpdateRequest)(nil), "rbac.RBACPolicyUpdateRequest")
	proto.RegisterType((*RBACPolicyUpdateResponse)(nil), "rbac.RBACPolicyUpdateResponse")
	proto.RegisterType((*RBACPolicyListRequest)(nil), "rbac.RBACPolicyListRequest")
}

func init() { proto.RegisterFile("server/rbac/rbac.proto", fileDescriptor_067f2a36e7395fd3) }

var fileDescriptor_067f2a36e7395fd3 = []byte{
	// 442 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0xd3, 0x4f, 0x8b, 0xd4, 0x30,
	0x14, 0x00, 0x70, 0xb2, 0xe8, 0x42, 0xb3, 0x0b, 0x42, 0x60, 0x9c, 0xa5, 0xee, 0x0e, 0x5a, 0x2f,
	0xfe, 0xc1, 0x84, 0xd6, 0x9b, 0x17, 0xd9, 0xf5, 0xa0, 0xe0, 0x1c, 0xb4, 0xe2, 0xc5, 0x8b, 0x64,
	0xd2, 0x47, 0x37, 0x6e, 0xb7, 0x89, 0x49, 0x5a, 0x28, 0xe2, 0xc5, 0x9b, 0x67, 0x0f, 0x8a, 0xe0,
	0xd9, 0xaf, 0xe2, 0x51, 0xf0, 0x0b, 0xc8, 0xe0, 0x07, 0x91, 0xa6, 0x53, 0xeb, 0x8e, 0x03, 0xe3,
	0x61, 0xd8, 0xcb, 0x90, 0x69, 0xde, 0x7b, 0xfd, 0x35, 0xef, 0x05, 0x5f, 0xb6, 0x60, 0x6a, 0x30,
	0xcc, 0xcc, 0xb8, 0xf0, 0x3f, 0x54, 0x1b, 0xe5, 0x14, 0xb9, 0xd0, 0xae, 0xc3, 0xfd, 0x5c, 0xa9,
	0xbc, 0x00, 0xc6, 0xb5, 0x64, 0xbc, 0x2c, 0x95, 0xe3, 0x4e, 0xaa, 0xd2, 0x76, 0x31, 0xe1, 0x34,
	0x97, 0xee, 0xb8, 0x9a, 0x51, 0xa1, 0x4e, 0x19, 0x37, 0xb9, 0xd2, 0x46, 0xbd, 0xf2, 0x8b, 0x3b,
	0x22, 0x63, 0x75, 0xc2, 0xf4, 0x49, 0xde, 0x66, 0x5a, 0xc6, 0xb5, 0x2e, 0xa4, 0xf0, 0xb9, 0xac,
	0x8e, 0x79, 0xa1, 0x8f, 0x79, 0xcc, 0x72, 0x28, 0xc1, 0x70, 0x07, 0x59, 0x57, 0x2d, 0x62, 0xf8,
	0x52, 0x7a, 0x74, 0xf8, 0xe0, 0x89, 0x2a, 0xa4, 0x68, 0x9e, 0x56, 0x60, 0x1a, 0xb2, 0x8f, 0x03,
	0xed, 0xff, 0x3e, 0x86, 0x66, 0x0f, 0x5d, 0x45, 0x37, 0x82, 0x74, 0x78, 0x10, 0x7d, 0x41, 0x78,
	0x3c, 0x64, 0x3c, 0xd7, 0x19, 0x77, 0x90, 0xc2, 0xeb, 0x0a, 0xac, 0x23, 0x19, 0xde, 0xee, 0x02,
	0x7d, 0xda, 0x4e, 0x32, 0xa5, 0x83, 0x95, 0xf6, 0x56, 0xbf, 0x78, 0x29, 0x32, 0x5a, 0x27, 0x54,
	0x9f, 0xe4, 0xb4, 0xb5, 0xd2, 0xbf, 0xac, 0xb4, 0xb7, 0xd2, 0xe1, 0x35, 0x69, 0x55, 0x40, 0xba,
	0xa8, 0x7d, 0xd6, 0xb7, 0xb5, 0xec, 0x0b, 0xf1, 0xde, 0xbf, 0x3c, 0xab, 0x55, 0x69, 0x21, 0x1a,
	0xe3, 0xd1, 0xb0, 0x37, 0x95, 0xd6, 0x2d, 0xe0, 0xc9, 0xfb, 0x8b, 0x78, 0xa7, 0xdd, 0x79, 0x06,
	0xa6, 0x96, 0x02, 0xc8, 0x27, 0x84, 0x77, 0xdb, 0x7d, 0x1f, 0x29, 0xc1, 0x92, 0x2b, 0xd4, 0x77,
	0x69, 0x65, 0x76, 0xb8, 0xb1, 0xcf, 0x6c, 0x8b, 0x46, 0x07, 0xef, 0x7e, 0xfc, 0xfa, 0xb0, 0x35,
	0x26, 0x23, 0xdf, 0xff, 0x3a, 0xee, 0x86, 0x44, 0xf7, 0x92, 0x8f, 0x08, 0x07, 0x0f, 0xa1, 0x93,
	0x35, 0x64, 0xb4, 0xec, 0xf2, 0x2d, 0x0c, 0x1f, 0x6d, 0x4a, 0x14, 0xdd, 0xf4, 0x9a, 0xeb, 0xe4,
	0xda, 0x4a, 0x0d, 0x7b, 0xf3, 0xe7, 0xe0, 0xdf, 0x92, 0xaf, 0x08, 0x07, 0x87, 0x59, 0xb6, 0x90,
	0x1d, 0x2c, 0xcb, 0xce, 0x8c, 0xca, 0x06, 0x85, 0xb1, 0x17, 0xde, 0x0e, 0xd7, 0x0b, 0xef, 0xf5,
	0x13, 0xf4, 0x19, 0xe1, 0xdd, 0x14, 0x4e, 0x55, 0x0d, 0xe7, 0x7c, 0x8c, 0xb7, 0xd6, 0x23, 0x8f,
	0xee, 0x7f, 0x9b, 0x4f, 0xd0, 0xf7, 0xf9, 0x04, 0xfd, 0x9c, 0x4f, 0xd0, 0x8b, 0xf8, 0xff, 0x6e,
	0xbb, 0x28, 0x24, 0x94, 0xce, 0x57, 0x9d, 0x6d, 0xfb, 0x9b, 0x7d, 0xf7, 0x77, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x10, 0x55, 0x47, 0xc1, 0x65, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RBACServiceClient is the client API for RBACService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RBACServiceClient interface {
	// List returns a list of policies
	ListPolicies(ctx context.Context, in *RBACPolicyListRequest, opts ...grpc.CallOption) (*v1alpha1.RBACPolicyList, error)
	// Get returns a policy by name
	GetPolicy(ctx context.Context, in *RBACPolicyQuery, opts ...grpc.CallOption) (*v1alpha1.RBACPolicy, error)
	// Update updates a policy
	AddPolicy(ctx context.Context, in *RBACPolicyUpdateRequest, opts ...grpc.CallOption) (*v1alpha1.RBACPolicy, error)
	// Delete deletes a policy
	RemovePolicy(ctx context.Context, in *RBACPolicyQuery, opts ...grpc.CallOption) (*v1alpha1.RBACPolicy, error)
}

type rBACServiceClient struct {
	cc *grpc.ClientConn
}

func NewRBACServiceClient(cc *grpc.ClientConn) RBACServiceClient {
	return &rBACServiceClient{cc}
}

func (c *rBACServiceClient) ListPolicies(ctx context.Context, in *RBACPolicyListRequest, opts ...grpc.CallOption) (*v1alpha1.RBACPolicyList, error) {
	out := new(v1alpha1.RBACPolicyList)
	err := c.cc.Invoke(ctx, "/rbac.RBACService/ListPolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) GetPolicy(ctx context.Context, in *RBACPolicyQuery, opts ...grpc.CallOption) (*v1alpha1.RBACPolicy, error) {
	out := new(v1alpha1.RBACPolicy)
	err := c.cc.Invoke(ctx, "/rbac.RBACService/GetPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) AddPolicy(ctx context.Context, in *RBACPolicyUpdateRequest, opts ...grpc.CallOption) (*v1alpha1.RBACPolicy, error) {
	out := new(v1alpha1.RBACPolicy)
	err := c.cc.Invoke(ctx, "/rbac.RBACService/AddPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) RemovePolicy(ctx context.Context, in *RBACPolicyQuery, opts ...grpc.CallOption) (*v1alpha1.RBACPolicy, error) {
	out := new(v1alpha1.RBACPolicy)
	err := c.cc.Invoke(ctx, "/rbac.RBACService/RemovePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RBACServiceServer is the server API for RBACService service.
type RBACServiceServer interface {
	// List returns a list of policies
	ListPolicies(context.Context, *RBACPolicyListRequest) (*v1alpha1.RBACPolicyList, error)
	// Get returns a policy by name
	GetPolicy(context.Context, *RBACPolicyQuery) (*v1alpha1.RBACPolicy, error)
	// Update updates a policy
	AddPolicy(context.Context, *RBACPolicyUpdateRequest) (*v1alpha1.RBACPolicy, error)
	// Delete deletes a policy
	RemovePolicy(context.Context, *RBACPolicyQuery) (*v1alpha1.RBACPolicy, error)
}

// UnimplementedRBACServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRBACServiceServer struct {
}

func (*UnimplementedRBACServiceServer) ListPolicies(ctx context.Context, req *RBACPolicyListRequest) (*v1alpha1.RBACPolicyList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPolicies not implemented")
}
func (*UnimplementedRBACServiceServer) GetPolicy(ctx context.Context, req *RBACPolicyQuery) (*v1alpha1.RBACPolicy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPolicy not implemented")
}
func (*UnimplementedRBACServiceServer) AddPolicy(ctx context.Context, req *RBACPolicyUpdateRequest) (*v1alpha1.RBACPolicy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPolicy not implemented")
}
func (*UnimplementedRBACServiceServer) RemovePolicy(ctx context.Context, req *RBACPolicyQuery) (*v1alpha1.RBACPolicy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePolicy not implemented")
}

func RegisterRBACServiceServer(s *grpc.Server, srv RBACServiceServer) {
	s.RegisterService(&_RBACService_serviceDesc, srv)
}

func _RBACService_ListPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RBACPolicyListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).ListPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbac.RBACService/ListPolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).ListPolicies(ctx, req.(*RBACPolicyListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_GetPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RBACPolicyQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).GetPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbac.RBACService/GetPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).GetPolicy(ctx, req.(*RBACPolicyQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_AddPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RBACPolicyUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).AddPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbac.RBACService/AddPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).AddPolicy(ctx, req.(*RBACPolicyUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_RemovePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RBACPolicyQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).RemovePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbac.RBACService/RemovePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).RemovePolicy(ctx, req.(*RBACPolicyQuery))
	}
	return interceptor(ctx, in, info, handler)
}

var _RBACService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rbac.RBACService",
	HandlerType: (*RBACServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListPolicies",
			Handler:    _RBACService_ListPolicies_Handler,
		},
		{
			MethodName: "GetPolicy",
			Handler:    _RBACService_GetPolicy_Handler,
		},
		{
			MethodName: "AddPolicy",
			Handler:    _RBACService_AddPolicy_Handler,
		},
		{
			MethodName: "RemovePolicy",
			Handler:    _RBACService_RemovePolicy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server/rbac/rbac.proto",
}

func (m *RBACPolicyQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RBACPolicyQuery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RBACPolicyQuery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PolicyKey) > 0 {
		i -= len(m.PolicyKey)
		copy(dAtA[i:], m.PolicyKey)
		i = encodeVarintRbac(dAtA, i, uint64(len(m.PolicyKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RBACPolicyUpdateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RBACPolicyUpdateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RBACPolicyUpdateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PolicyKey) > 0 {
		i -= len(m.PolicyKey)
		copy(dAtA[i:], m.PolicyKey)
		i = encodeVarintRbac(dAtA, i, uint64(len(m.PolicyKey)))
		i--
		dAtA[i] = 0x12
	}
	if m.Policy != nil {
		{
			size, err := m.Policy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRbac(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RBACPolicyUpdateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RBACPolicyUpdateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RBACPolicyUpdateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *RBACPolicyListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RBACPolicyListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RBACPolicyListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func encodeVarintRbac(dAtA []byte, offset int, v uint64) int {
	offset -= sovRbac(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RBACPolicyQuery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PolicyKey)
	if l > 0 {
		n += 1 + l + sovRbac(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RBACPolicyUpdateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Policy != nil {
		l = m.Policy.Size()
		n += 1 + l + sovRbac(uint64(l))
	}
	l = len(m.PolicyKey)
	if l > 0 {
		n += 1 + l + sovRbac(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RBACPolicyUpdateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RBACPolicyListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovRbac(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRbac(x uint64) (n int) {
	return sovRbac(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RBACPolicyQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRbac
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RBACPolicyQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RBACPolicyQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRbac
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRbac
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PolicyKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRbac(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRbac
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RBACPolicyUpdateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRbac
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RBACPolicyUpdateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RBACPolicyUpdateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Policy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRbac
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRbac
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Policy == nil {
				m.Policy = &v1alpha1.RBACPolicyRule{}
			}
			if err := m.Policy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRbac
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRbac
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PolicyKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRbac(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRbac
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RBACPolicyUpdateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRbac
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RBACPolicyUpdateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RBACPolicyUpdateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRbac(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRbac
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RBACPolicyListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRbac
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RBACPolicyListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RBACPolicyListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRbac(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRbac
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRbac(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRbac
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRbac
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRbac
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRbac
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRbac        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRbac          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRbac = fmt.Errorf("proto: unexpected end of group")
)
