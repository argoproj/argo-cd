// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: apiclient/reposerver/repository/repository.proto

package repository

import (
	context "context"
	v1alpha1 "github.com/argoproj/argo-cd/v2/pkg/apis/application/v1alpha1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RepoServerServiceClient is the client API for RepoServerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RepoServerServiceClient interface {
	// GenerateManifest generates manifest for application in specified repo name and revision
	GenerateManifest(ctx context.Context, in *ManifestRequest, opts ...grpc.CallOption) (*ManifestResponse, error)
	// Returns a bool val if the repository is valid and has proper access
	TestRepository(ctx context.Context, in *TestRepositoryRequest, opts ...grpc.CallOption) (*TestRepositoryResponse, error)
	// Returns a valid revision
	ResolveRevision(ctx context.Context, in *ResolveRevisionRequest, opts ...grpc.CallOption) (*ResolveRevisionResponse, error)
	// Returns a list of refs (e.g. branches and tags) in the repo
	ListRefs(ctx context.Context, in *ListRefsRequest, opts ...grpc.CallOption) (*Refs, error)
	// ListApps returns a list of apps in the repo
	ListApps(ctx context.Context, in *ListAppsRequest, opts ...grpc.CallOption) (*AppList, error)
	// Generate manifest for application in specified repo name and revision
	GetAppDetails(ctx context.Context, in *RepoServerAppDetailsQuery, opts ...grpc.CallOption) (*RepoAppDetailsResponse, error)
	// Get the meta-data (author, date, tags, message) for a specific revision of the repo
	GetRevisionMetadata(ctx context.Context, in *RepoServerRevisionMetadataRequest, opts ...grpc.CallOption) (*v1alpha1.RevisionMetadata, error)
	// GetHelmCharts returns list of helm charts in the specified repository
	GetHelmCharts(ctx context.Context, in *HelmChartsRequest, opts ...grpc.CallOption) (*HelmChartsResponse, error)
}

type repoServerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRepoServerServiceClient(cc grpc.ClientConnInterface) RepoServerServiceClient {
	return &repoServerServiceClient{cc}
}

func (c *repoServerServiceClient) GenerateManifest(ctx context.Context, in *ManifestRequest, opts ...grpc.CallOption) (*ManifestResponse, error) {
	out := new(ManifestResponse)
	err := c.cc.Invoke(ctx, "/apiclient.reposerver.repository.RepoServerService/GenerateManifest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repoServerServiceClient) TestRepository(ctx context.Context, in *TestRepositoryRequest, opts ...grpc.CallOption) (*TestRepositoryResponse, error) {
	out := new(TestRepositoryResponse)
	err := c.cc.Invoke(ctx, "/apiclient.reposerver.repository.RepoServerService/TestRepository", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repoServerServiceClient) ResolveRevision(ctx context.Context, in *ResolveRevisionRequest, opts ...grpc.CallOption) (*ResolveRevisionResponse, error) {
	out := new(ResolveRevisionResponse)
	err := c.cc.Invoke(ctx, "/apiclient.reposerver.repository.RepoServerService/ResolveRevision", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repoServerServiceClient) ListRefs(ctx context.Context, in *ListRefsRequest, opts ...grpc.CallOption) (*Refs, error) {
	out := new(Refs)
	err := c.cc.Invoke(ctx, "/apiclient.reposerver.repository.RepoServerService/ListRefs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repoServerServiceClient) ListApps(ctx context.Context, in *ListAppsRequest, opts ...grpc.CallOption) (*AppList, error) {
	out := new(AppList)
	err := c.cc.Invoke(ctx, "/apiclient.reposerver.repository.RepoServerService/ListApps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repoServerServiceClient) GetAppDetails(ctx context.Context, in *RepoServerAppDetailsQuery, opts ...grpc.CallOption) (*RepoAppDetailsResponse, error) {
	out := new(RepoAppDetailsResponse)
	err := c.cc.Invoke(ctx, "/apiclient.reposerver.repository.RepoServerService/GetAppDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repoServerServiceClient) GetRevisionMetadata(ctx context.Context, in *RepoServerRevisionMetadataRequest, opts ...grpc.CallOption) (*v1alpha1.RevisionMetadata, error) {
	out := new(v1alpha1.RevisionMetadata)
	err := c.cc.Invoke(ctx, "/apiclient.reposerver.repository.RepoServerService/GetRevisionMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repoServerServiceClient) GetHelmCharts(ctx context.Context, in *HelmChartsRequest, opts ...grpc.CallOption) (*HelmChartsResponse, error) {
	out := new(HelmChartsResponse)
	err := c.cc.Invoke(ctx, "/apiclient.reposerver.repository.RepoServerService/GetHelmCharts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RepoServerServiceServer is the server API for RepoServerService service.
// All implementations should embed UnimplementedRepoServerServiceServer
// for forward compatibility
type RepoServerServiceServer interface {
	// GenerateManifest generates manifest for application in specified repo name and revision
	GenerateManifest(context.Context, *ManifestRequest) (*ManifestResponse, error)
	// Returns a bool val if the repository is valid and has proper access
	TestRepository(context.Context, *TestRepositoryRequest) (*TestRepositoryResponse, error)
	// Returns a valid revision
	ResolveRevision(context.Context, *ResolveRevisionRequest) (*ResolveRevisionResponse, error)
	// Returns a list of refs (e.g. branches and tags) in the repo
	ListRefs(context.Context, *ListRefsRequest) (*Refs, error)
	// ListApps returns a list of apps in the repo
	ListApps(context.Context, *ListAppsRequest) (*AppList, error)
	// Generate manifest for application in specified repo name and revision
	GetAppDetails(context.Context, *RepoServerAppDetailsQuery) (*RepoAppDetailsResponse, error)
	// Get the meta-data (author, date, tags, message) for a specific revision of the repo
	GetRevisionMetadata(context.Context, *RepoServerRevisionMetadataRequest) (*v1alpha1.RevisionMetadata, error)
	// GetHelmCharts returns list of helm charts in the specified repository
	GetHelmCharts(context.Context, *HelmChartsRequest) (*HelmChartsResponse, error)
}

// UnimplementedRepoServerServiceServer should be embedded to have forward compatible implementations.
type UnimplementedRepoServerServiceServer struct {
}

func (UnimplementedRepoServerServiceServer) GenerateManifest(context.Context, *ManifestRequest) (*ManifestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateManifest not implemented")
}
func (UnimplementedRepoServerServiceServer) TestRepository(context.Context, *TestRepositoryRequest) (*TestRepositoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestRepository not implemented")
}
func (UnimplementedRepoServerServiceServer) ResolveRevision(context.Context, *ResolveRevisionRequest) (*ResolveRevisionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveRevision not implemented")
}
func (UnimplementedRepoServerServiceServer) ListRefs(context.Context, *ListRefsRequest) (*Refs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRefs not implemented")
}
func (UnimplementedRepoServerServiceServer) ListApps(context.Context, *ListAppsRequest) (*AppList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListApps not implemented")
}
func (UnimplementedRepoServerServiceServer) GetAppDetails(context.Context, *RepoServerAppDetailsQuery) (*RepoAppDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppDetails not implemented")
}
func (UnimplementedRepoServerServiceServer) GetRevisionMetadata(context.Context, *RepoServerRevisionMetadataRequest) (*v1alpha1.RevisionMetadata, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRevisionMetadata not implemented")
}
func (UnimplementedRepoServerServiceServer) GetHelmCharts(context.Context, *HelmChartsRequest) (*HelmChartsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHelmCharts not implemented")
}

// UnsafeRepoServerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RepoServerServiceServer will
// result in compilation errors.
type UnsafeRepoServerServiceServer interface {
	mustEmbedUnimplementedRepoServerServiceServer()
}

func RegisterRepoServerServiceServer(s grpc.ServiceRegistrar, srv RepoServerServiceServer) {
	s.RegisterService(&RepoServerService_ServiceDesc, srv)
}

func _RepoServerService_GenerateManifest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManifestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepoServerServiceServer).GenerateManifest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiclient.reposerver.repository.RepoServerService/GenerateManifest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepoServerServiceServer).GenerateManifest(ctx, req.(*ManifestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepoServerService_TestRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestRepositoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepoServerServiceServer).TestRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiclient.reposerver.repository.RepoServerService/TestRepository",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepoServerServiceServer).TestRepository(ctx, req.(*TestRepositoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepoServerService_ResolveRevision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveRevisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepoServerServiceServer).ResolveRevision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiclient.reposerver.repository.RepoServerService/ResolveRevision",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepoServerServiceServer).ResolveRevision(ctx, req.(*ResolveRevisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepoServerService_ListRefs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRefsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepoServerServiceServer).ListRefs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiclient.reposerver.repository.RepoServerService/ListRefs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepoServerServiceServer).ListRefs(ctx, req.(*ListRefsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepoServerService_ListApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepoServerServiceServer).ListApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiclient.reposerver.repository.RepoServerService/ListApps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepoServerServiceServer).ListApps(ctx, req.(*ListAppsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepoServerService_GetAppDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoServerAppDetailsQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepoServerServiceServer).GetAppDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiclient.reposerver.repository.RepoServerService/GetAppDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepoServerServiceServer).GetAppDetails(ctx, req.(*RepoServerAppDetailsQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepoServerService_GetRevisionMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoServerRevisionMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepoServerServiceServer).GetRevisionMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiclient.reposerver.repository.RepoServerService/GetRevisionMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepoServerServiceServer).GetRevisionMetadata(ctx, req.(*RepoServerRevisionMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepoServerService_GetHelmCharts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelmChartsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepoServerServiceServer).GetHelmCharts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiclient.reposerver.repository.RepoServerService/GetHelmCharts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepoServerServiceServer).GetHelmCharts(ctx, req.(*HelmChartsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RepoServerService_ServiceDesc is the grpc.ServiceDesc for RepoServerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RepoServerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "apiclient.reposerver.repository.RepoServerService",
	HandlerType: (*RepoServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateManifest",
			Handler:    _RepoServerService_GenerateManifest_Handler,
		},
		{
			MethodName: "TestRepository",
			Handler:    _RepoServerService_TestRepository_Handler,
		},
		{
			MethodName: "ResolveRevision",
			Handler:    _RepoServerService_ResolveRevision_Handler,
		},
		{
			MethodName: "ListRefs",
			Handler:    _RepoServerService_ListRefs_Handler,
		},
		{
			MethodName: "ListApps",
			Handler:    _RepoServerService_ListApps_Handler,
		},
		{
			MethodName: "GetAppDetails",
			Handler:    _RepoServerService_GetAppDetails_Handler,
		},
		{
			MethodName: "GetRevisionMetadata",
			Handler:    _RepoServerService_GetRevisionMetadata_Handler,
		},
		{
			MethodName: "GetHelmCharts",
			Handler:    _RepoServerService_GetHelmCharts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apiclient/reposerver/repository/repository.proto",
}
