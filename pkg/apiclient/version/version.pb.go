// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: apiclient/version/version.proto

// Version Service
//
// Version Service API returns the version of the API server.

package version

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	_ "google.golang.org/protobuf/types/known/emptypb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// VersionMessage represents version of the Argo CD API server
type VersionMessage struct {
	Version              string   `protobuf:"bytes,1,opt,name=Version,proto3" json:"Version,omitempty"`
	BuildDate            string   `protobuf:"bytes,2,opt,name=BuildDate,proto3" json:"BuildDate,omitempty"`
	GitCommit            string   `protobuf:"bytes,3,opt,name=GitCommit,proto3" json:"GitCommit,omitempty"`
	GitTag               string   `protobuf:"bytes,4,opt,name=GitTag,proto3" json:"GitTag,omitempty"`
	GitTreeState         string   `protobuf:"bytes,5,opt,name=GitTreeState,proto3" json:"GitTreeState,omitempty"`
	GoVersion            string   `protobuf:"bytes,6,opt,name=GoVersion,proto3" json:"GoVersion,omitempty"`
	Compiler             string   `protobuf:"bytes,7,opt,name=Compiler,proto3" json:"Compiler,omitempty"`
	Platform             string   `protobuf:"bytes,8,opt,name=Platform,proto3" json:"Platform,omitempty"`
	KustomizeVersion     string   `protobuf:"bytes,10,opt,name=KustomizeVersion,proto3" json:"KustomizeVersion,omitempty"`
	HelmVersion          string   `protobuf:"bytes,11,opt,name=HelmVersion,proto3" json:"HelmVersion,omitempty"`
	KubectlVersion       string   `protobuf:"bytes,12,opt,name=KubectlVersion,proto3" json:"KubectlVersion,omitempty"`
	JsonnetVersion       string   `protobuf:"bytes,13,opt,name=JsonnetVersion,proto3" json:"JsonnetVersion,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VersionMessage) Reset()         { *m = VersionMessage{} }
func (m *VersionMessage) String() string { return proto.CompactTextString(m) }
func (*VersionMessage) ProtoMessage()    {}
func (*VersionMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e4f16ac63977785, []int{0}
}
func (m *VersionMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VersionMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VersionMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VersionMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VersionMessage.Merge(m, src)
}
func (m *VersionMessage) XXX_Size() int {
	return m.Size()
}
func (m *VersionMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_VersionMessage.DiscardUnknown(m)
}

var xxx_messageInfo_VersionMessage proto.InternalMessageInfo

func (m *VersionMessage) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *VersionMessage) GetBuildDate() string {
	if m != nil {
		return m.BuildDate
	}
	return ""
}

func (m *VersionMessage) GetGitCommit() string {
	if m != nil {
		return m.GitCommit
	}
	return ""
}

func (m *VersionMessage) GetGitTag() string {
	if m != nil {
		return m.GitTag
	}
	return ""
}

func (m *VersionMessage) GetGitTreeState() string {
	if m != nil {
		return m.GitTreeState
	}
	return ""
}

func (m *VersionMessage) GetGoVersion() string {
	if m != nil {
		return m.GoVersion
	}
	return ""
}

func (m *VersionMessage) GetCompiler() string {
	if m != nil {
		return m.Compiler
	}
	return ""
}

func (m *VersionMessage) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *VersionMessage) GetKustomizeVersion() string {
	if m != nil {
		return m.KustomizeVersion
	}
	return ""
}

func (m *VersionMessage) GetHelmVersion() string {
	if m != nil {
		return m.HelmVersion
	}
	return ""
}

func (m *VersionMessage) GetKubectlVersion() string {
	if m != nil {
		return m.KubectlVersion
	}
	return ""
}

func (m *VersionMessage) GetJsonnetVersion() string {
	if m != nil {
		return m.JsonnetVersion
	}
	return ""
}

func init() {
	proto.RegisterType((*VersionMessage)(nil), "apiclient.version.VersionMessage")
}

func init() { proto.RegisterFile("apiclient/version/version.proto", fileDescriptor_1e4f16ac63977785) }

var fileDescriptor_1e4f16ac63977785 = []byte{
	// 465 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x92, 0xc1, 0x6a, 0xd4, 0x40,
	0x18, 0xc7, 0x49, 0x56, 0xb7, 0xed, 0x74, 0x5d, 0xec, 0xa0, 0x25, 0xac, 0x75, 0xad, 0x7b, 0x10,
	0x11, 0x4c, 0xa0, 0x7a, 0xea, 0xad, 0x5b, 0x65, 0xc5, 0x52, 0x58, 0xac, 0x14, 0x29, 0xbd, 0xcc,
	0x66, 0xbf, 0xc6, 0xd1, 0x4c, 0xbe, 0x30, 0xf9, 0xb2, 0xa0, 0x47, 0x5f, 0x41, 0xf0, 0x01, 0x3c,
	0xfa, 0x24, 0x22, 0x1e, 0x04, 0x5f, 0x40, 0x16, 0x4f, 0x3e, 0x85, 0x64, 0x32, 0x13, 0xbb, 0xe6,
	0xb4, 0xf3, 0xfd, 0x7e, 0xff, 0xfd, 0x27, 0xe4, 0x1b, 0x76, 0x47, 0xe4, 0x32, 0x4e, 0x25, 0x64,
	0x14, 0x2d, 0x40, 0x17, 0x12, 0x33, 0xf7, 0x1b, 0xe6, 0x1a, 0x09, 0xf9, 0x56, 0x13, 0x08, 0xad,
	0x18, 0xec, 0x24, 0x88, 0x49, 0x0a, 0x91, 0xc8, 0x65, 0x24, 0xb2, 0x0c, 0x49, 0x90, 0xc4, 0xac,
	0xa8, 0xff, 0x30, 0xb8, 0x65, 0xad, 0x99, 0x66, 0xe5, 0x45, 0x04, 0x2a, 0xa7, 0x77, 0xb5, 0x1c,
	0x7d, 0xea, 0xb0, 0xfe, 0x69, 0x5d, 0x73, 0x0c, 0x45, 0x21, 0x12, 0xe0, 0x01, 0x5b, 0xb3, 0x24,
	0xf0, 0x76, 0xbd, 0xfb, 0x1b, 0x2f, 0xdc, 0xc8, 0x77, 0xd8, 0xc6, 0xb8, 0x94, 0xe9, 0xfc, 0x89,
	0x20, 0x08, 0x7c, 0xe3, 0xfe, 0x81, 0xca, 0x4e, 0x24, 0x1d, 0xa2, 0x52, 0x92, 0x82, 0x4e, 0x6d,
	0x1b, 0xc0, 0xb7, 0x59, 0x77, 0x22, 0xe9, 0xa5, 0x48, 0x82, 0x2b, 0x46, 0xd9, 0x89, 0x8f, 0x58,
	0xaf, 0x3a, 0x69, 0x80, 0x13, 0xaa, 0x6a, 0xaf, 0x1a, 0xbb, 0xc2, 0x4c, 0x33, 0xba, 0x77, 0xea,
	0xda, 0x66, 0x07, 0xf8, 0x80, 0xad, 0x1f, 0xa2, 0xca, 0x65, 0x0a, 0x3a, 0x58, 0x33, 0xb2, 0x99,
	0x2b, 0x37, 0x4d, 0x05, 0x5d, 0xa0, 0x56, 0xc1, 0x7a, 0xed, 0xdc, 0xcc, 0x1f, 0xb0, 0xeb, 0x47,
	0x65, 0x41, 0xa8, 0xe4, 0x7b, 0x70, 0xe5, 0xcc, 0x64, 0x5a, 0x9c, 0xef, 0xb2, 0xcd, 0x67, 0x90,
	0x2a, 0x17, 0xdb, 0x34, 0xb1, 0xcb, 0x88, 0xdf, 0x63, 0xfd, 0xa3, 0x72, 0x06, 0x31, 0xa5, 0x2e,
	0xd4, 0x33, 0xa1, 0xff, 0x68, 0x95, 0x7b, 0x5e, 0x60, 0x96, 0x01, 0xb9, 0xdc, 0xb5, 0x3a, 0xb7,
	0x4a, 0xf7, 0xd2, 0x66, 0x2f, 0x27, 0xa0, 0x17, 0x32, 0x06, 0x7e, 0xd6, 0xec, 0x85, 0x6f, 0x87,
	0xf5, 0x4e, 0x43, 0xb7, 0xd3, 0xf0, 0x69, 0xb5, 0xd3, 0xc1, 0xdd, 0xb0, 0x75, 0x39, 0xc2, 0xd5,
	0xed, 0x8e, 0x6e, 0x7c, 0xf8, 0xf9, 0xfb, 0xa3, 0xdf, 0xe7, 0x3d, 0x73, 0x5b, 0x6c, 0x68, 0xfc,
	0xdd, 0xfb, 0xba, 0x1c, 0x7a, 0x3f, 0x96, 0x43, 0xef, 0xd7, 0x72, 0xe8, 0xb1, 0x9b, 0x31, 0xaa,
	0x76, 0xd5, 0xb8, 0x67, 0xbb, 0xa6, 0xd5, 0x53, 0xa7, 0xde, 0xd9, 0xe3, 0x44, 0xd2, 0xeb, 0x72,
	0x16, 0xc6, 0xa8, 0x22, 0xa1, 0x13, 0xcc, 0x35, 0xbe, 0x31, 0x87, 0x87, 0xf1, 0x3c, 0x5a, 0xec,
	0x45, 0xf9, 0xdb, 0x24, 0x6a, 0x5d, 0xe7, 0xcf, 0x7e, 0xe7, 0xe0, 0xf4, 0xd5, 0x17, 0x7f, 0xeb,
	0xa0, 0xe9, 0xb7, 0xb5, 0xdf, 0x2e, 0xb1, 0x73, 0xcb, 0x96, 0xfe, 0xed, 0x16, 0x3b, 0x9f, 0x4c,
	0xc7, 0xc7, 0x40, 0x62, 0x2e, 0x48, 0xfc, 0xf1, 0x79, 0xe3, 0xf7, 0xf7, 0x6d, 0x60, 0xd6, 0x35,
	0xdf, 0xe5, 0xd1, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xfe, 0xb4, 0x50, 0x36, 0x4d, 0x03, 0x00,
	0x00,
}

func (m *VersionMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VersionMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VersionMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.JsonnetVersion) > 0 {
		i -= len(m.JsonnetVersion)
		copy(dAtA[i:], m.JsonnetVersion)
		i = encodeVarintVersion(dAtA, i, uint64(len(m.JsonnetVersion)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.KubectlVersion) > 0 {
		i -= len(m.KubectlVersion)
		copy(dAtA[i:], m.KubectlVersion)
		i = encodeVarintVersion(dAtA, i, uint64(len(m.KubectlVersion)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.HelmVersion) > 0 {
		i -= len(m.HelmVersion)
		copy(dAtA[i:], m.HelmVersion)
		i = encodeVarintVersion(dAtA, i, uint64(len(m.HelmVersion)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.KustomizeVersion) > 0 {
		i -= len(m.KustomizeVersion)
		copy(dAtA[i:], m.KustomizeVersion)
		i = encodeVarintVersion(dAtA, i, uint64(len(m.KustomizeVersion)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Platform) > 0 {
		i -= len(m.Platform)
		copy(dAtA[i:], m.Platform)
		i = encodeVarintVersion(dAtA, i, uint64(len(m.Platform)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Compiler) > 0 {
		i -= len(m.Compiler)
		copy(dAtA[i:], m.Compiler)
		i = encodeVarintVersion(dAtA, i, uint64(len(m.Compiler)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.GoVersion) > 0 {
		i -= len(m.GoVersion)
		copy(dAtA[i:], m.GoVersion)
		i = encodeVarintVersion(dAtA, i, uint64(len(m.GoVersion)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.GitTreeState) > 0 {
		i -= len(m.GitTreeState)
		copy(dAtA[i:], m.GitTreeState)
		i = encodeVarintVersion(dAtA, i, uint64(len(m.GitTreeState)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.GitTag) > 0 {
		i -= len(m.GitTag)
		copy(dAtA[i:], m.GitTag)
		i = encodeVarintVersion(dAtA, i, uint64(len(m.GitTag)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.GitCommit) > 0 {
		i -= len(m.GitCommit)
		copy(dAtA[i:], m.GitCommit)
		i = encodeVarintVersion(dAtA, i, uint64(len(m.GitCommit)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BuildDate) > 0 {
		i -= len(m.BuildDate)
		copy(dAtA[i:], m.BuildDate)
		i = encodeVarintVersion(dAtA, i, uint64(len(m.BuildDate)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintVersion(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintVersion(dAtA []byte, offset int, v uint64) int {
	offset -= sovVersion(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *VersionMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovVersion(uint64(l))
	}
	l = len(m.BuildDate)
	if l > 0 {
		n += 1 + l + sovVersion(uint64(l))
	}
	l = len(m.GitCommit)
	if l > 0 {
		n += 1 + l + sovVersion(uint64(l))
	}
	l = len(m.GitTag)
	if l > 0 {
		n += 1 + l + sovVersion(uint64(l))
	}
	l = len(m.GitTreeState)
	if l > 0 {
		n += 1 + l + sovVersion(uint64(l))
	}
	l = len(m.GoVersion)
	if l > 0 {
		n += 1 + l + sovVersion(uint64(l))
	}
	l = len(m.Compiler)
	if l > 0 {
		n += 1 + l + sovVersion(uint64(l))
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovVersion(uint64(l))
	}
	l = len(m.KustomizeVersion)
	if l > 0 {
		n += 1 + l + sovVersion(uint64(l))
	}
	l = len(m.HelmVersion)
	if l > 0 {
		n += 1 + l + sovVersion(uint64(l))
	}
	l = len(m.KubectlVersion)
	if l > 0 {
		n += 1 + l + sovVersion(uint64(l))
	}
	l = len(m.JsonnetVersion)
	if l > 0 {
		n += 1 + l + sovVersion(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovVersion(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozVersion(x uint64) (n int) {
	return sovVersion(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *VersionMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVersion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VersionMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VersionMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVersion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVersion
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVersion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVersion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVersion
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVersion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuildDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GitCommit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVersion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVersion
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVersion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GitCommit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GitTag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVersion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVersion
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVersion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GitTag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GitTreeState", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVersion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVersion
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVersion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GitTreeState = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVersion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVersion
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVersion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GoVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Compiler", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVersion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVersion
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVersion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Compiler = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVersion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVersion
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVersion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KustomizeVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVersion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVersion
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVersion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KustomizeVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HelmVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVersion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVersion
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVersion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HelmVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KubectlVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVersion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVersion
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVersion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KubectlVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsonnetVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVersion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVersion
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVersion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JsonnetVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVersion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVersion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVersion(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVersion
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVersion
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVersion
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVersion
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupVersion
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthVersion
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthVersion        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVersion          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupVersion = fmt.Errorf("proto: unexpected end of group")
)
