// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/argoproj/argo-cd/v3/pkg/apiclient/cluster"
	"github.com/argoproj/argo-cd/v3/pkg/apis/application/v1alpha1"
	mock "github.com/stretchr/testify/mock"
)

// NewClusterServiceServer creates a new instance of ClusterServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClusterServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClusterServiceServer {
	mock := &ClusterServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ClusterServiceServer is an autogenerated mock type for the ClusterServiceServer type
type ClusterServiceServer struct {
	mock.Mock
}

type ClusterServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *ClusterServiceServer) EXPECT() *ClusterServiceServer_Expecter {
	return &ClusterServiceServer_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type ClusterServiceServer
func (_mock *ClusterServiceServer) Create(context1 context.Context, clusterCreateRequest *cluster.ClusterCreateRequest) (*v1alpha1.Cluster, error) {
	ret := _mock.Called(context1, clusterCreateRequest)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *v1alpha1.Cluster
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *cluster.ClusterCreateRequest) (*v1alpha1.Cluster, error)); ok {
		return returnFunc(context1, clusterCreateRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *cluster.ClusterCreateRequest) *v1alpha1.Cluster); ok {
		r0 = returnFunc(context1, clusterCreateRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.Cluster)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *cluster.ClusterCreateRequest) error); ok {
		r1 = returnFunc(context1, clusterCreateRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ClusterServiceServer_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type ClusterServiceServer_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - context1
//   - clusterCreateRequest
func (_e *ClusterServiceServer_Expecter) Create(context1 interface{}, clusterCreateRequest interface{}) *ClusterServiceServer_Create_Call {
	return &ClusterServiceServer_Create_Call{Call: _e.mock.On("Create", context1, clusterCreateRequest)}
}

func (_c *ClusterServiceServer_Create_Call) Run(run func(context1 context.Context, clusterCreateRequest *cluster.ClusterCreateRequest)) *ClusterServiceServer_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*cluster.ClusterCreateRequest))
	})
	return _c
}

func (_c *ClusterServiceServer_Create_Call) Return(cluster1 *v1alpha1.Cluster, err error) *ClusterServiceServer_Create_Call {
	_c.Call.Return(cluster1, err)
	return _c
}

func (_c *ClusterServiceServer_Create_Call) RunAndReturn(run func(context1 context.Context, clusterCreateRequest *cluster.ClusterCreateRequest) (*v1alpha1.Cluster, error)) *ClusterServiceServer_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type ClusterServiceServer
func (_mock *ClusterServiceServer) Delete(context1 context.Context, clusterQuery *cluster.ClusterQuery) (*cluster.ClusterResponse, error) {
	ret := _mock.Called(context1, clusterQuery)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *cluster.ClusterResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *cluster.ClusterQuery) (*cluster.ClusterResponse, error)); ok {
		return returnFunc(context1, clusterQuery)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *cluster.ClusterQuery) *cluster.ClusterResponse); ok {
		r0 = returnFunc(context1, clusterQuery)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cluster.ClusterResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *cluster.ClusterQuery) error); ok {
		r1 = returnFunc(context1, clusterQuery)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ClusterServiceServer_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type ClusterServiceServer_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - context1
//   - clusterQuery
func (_e *ClusterServiceServer_Expecter) Delete(context1 interface{}, clusterQuery interface{}) *ClusterServiceServer_Delete_Call {
	return &ClusterServiceServer_Delete_Call{Call: _e.mock.On("Delete", context1, clusterQuery)}
}

func (_c *ClusterServiceServer_Delete_Call) Run(run func(context1 context.Context, clusterQuery *cluster.ClusterQuery)) *ClusterServiceServer_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*cluster.ClusterQuery))
	})
	return _c
}

func (_c *ClusterServiceServer_Delete_Call) Return(clusterResponse *cluster.ClusterResponse, err error) *ClusterServiceServer_Delete_Call {
	_c.Call.Return(clusterResponse, err)
	return _c
}

func (_c *ClusterServiceServer_Delete_Call) RunAndReturn(run func(context1 context.Context, clusterQuery *cluster.ClusterQuery) (*cluster.ClusterResponse, error)) *ClusterServiceServer_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type ClusterServiceServer
func (_mock *ClusterServiceServer) Get(context1 context.Context, clusterQuery *cluster.ClusterQuery) (*v1alpha1.Cluster, error) {
	ret := _mock.Called(context1, clusterQuery)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *v1alpha1.Cluster
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *cluster.ClusterQuery) (*v1alpha1.Cluster, error)); ok {
		return returnFunc(context1, clusterQuery)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *cluster.ClusterQuery) *v1alpha1.Cluster); ok {
		r0 = returnFunc(context1, clusterQuery)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.Cluster)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *cluster.ClusterQuery) error); ok {
		r1 = returnFunc(context1, clusterQuery)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ClusterServiceServer_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type ClusterServiceServer_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - context1
//   - clusterQuery
func (_e *ClusterServiceServer_Expecter) Get(context1 interface{}, clusterQuery interface{}) *ClusterServiceServer_Get_Call {
	return &ClusterServiceServer_Get_Call{Call: _e.mock.On("Get", context1, clusterQuery)}
}

func (_c *ClusterServiceServer_Get_Call) Run(run func(context1 context.Context, clusterQuery *cluster.ClusterQuery)) *ClusterServiceServer_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*cluster.ClusterQuery))
	})
	return _c
}

func (_c *ClusterServiceServer_Get_Call) Return(cluster1 *v1alpha1.Cluster, err error) *ClusterServiceServer_Get_Call {
	_c.Call.Return(cluster1, err)
	return _c
}

func (_c *ClusterServiceServer_Get_Call) RunAndReturn(run func(context1 context.Context, clusterQuery *cluster.ClusterQuery) (*v1alpha1.Cluster, error)) *ClusterServiceServer_Get_Call {
	_c.Call.Return(run)
	return _c
}

// InvalidateCache provides a mock function for the type ClusterServiceServer
func (_mock *ClusterServiceServer) InvalidateCache(context1 context.Context, clusterQuery *cluster.ClusterQuery) (*v1alpha1.Cluster, error) {
	ret := _mock.Called(context1, clusterQuery)

	if len(ret) == 0 {
		panic("no return value specified for InvalidateCache")
	}

	var r0 *v1alpha1.Cluster
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *cluster.ClusterQuery) (*v1alpha1.Cluster, error)); ok {
		return returnFunc(context1, clusterQuery)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *cluster.ClusterQuery) *v1alpha1.Cluster); ok {
		r0 = returnFunc(context1, clusterQuery)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.Cluster)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *cluster.ClusterQuery) error); ok {
		r1 = returnFunc(context1, clusterQuery)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ClusterServiceServer_InvalidateCache_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InvalidateCache'
type ClusterServiceServer_InvalidateCache_Call struct {
	*mock.Call
}

// InvalidateCache is a helper method to define mock.On call
//   - context1
//   - clusterQuery
func (_e *ClusterServiceServer_Expecter) InvalidateCache(context1 interface{}, clusterQuery interface{}) *ClusterServiceServer_InvalidateCache_Call {
	return &ClusterServiceServer_InvalidateCache_Call{Call: _e.mock.On("InvalidateCache", context1, clusterQuery)}
}

func (_c *ClusterServiceServer_InvalidateCache_Call) Run(run func(context1 context.Context, clusterQuery *cluster.ClusterQuery)) *ClusterServiceServer_InvalidateCache_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*cluster.ClusterQuery))
	})
	return _c
}

func (_c *ClusterServiceServer_InvalidateCache_Call) Return(cluster1 *v1alpha1.Cluster, err error) *ClusterServiceServer_InvalidateCache_Call {
	_c.Call.Return(cluster1, err)
	return _c
}

func (_c *ClusterServiceServer_InvalidateCache_Call) RunAndReturn(run func(context1 context.Context, clusterQuery *cluster.ClusterQuery) (*v1alpha1.Cluster, error)) *ClusterServiceServer_InvalidateCache_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type ClusterServiceServer
func (_mock *ClusterServiceServer) List(context1 context.Context, clusterQuery *cluster.ClusterQuery) (*v1alpha1.ClusterList, error) {
	ret := _mock.Called(context1, clusterQuery)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *v1alpha1.ClusterList
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *cluster.ClusterQuery) (*v1alpha1.ClusterList, error)); ok {
		return returnFunc(context1, clusterQuery)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *cluster.ClusterQuery) *v1alpha1.ClusterList); ok {
		r0 = returnFunc(context1, clusterQuery)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.ClusterList)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *cluster.ClusterQuery) error); ok {
		r1 = returnFunc(context1, clusterQuery)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ClusterServiceServer_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type ClusterServiceServer_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - context1
//   - clusterQuery
func (_e *ClusterServiceServer_Expecter) List(context1 interface{}, clusterQuery interface{}) *ClusterServiceServer_List_Call {
	return &ClusterServiceServer_List_Call{Call: _e.mock.On("List", context1, clusterQuery)}
}

func (_c *ClusterServiceServer_List_Call) Run(run func(context1 context.Context, clusterQuery *cluster.ClusterQuery)) *ClusterServiceServer_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*cluster.ClusterQuery))
	})
	return _c
}

func (_c *ClusterServiceServer_List_Call) Return(clusterList *v1alpha1.ClusterList, err error) *ClusterServiceServer_List_Call {
	_c.Call.Return(clusterList, err)
	return _c
}

func (_c *ClusterServiceServer_List_Call) RunAndReturn(run func(context1 context.Context, clusterQuery *cluster.ClusterQuery) (*v1alpha1.ClusterList, error)) *ClusterServiceServer_List_Call {
	_c.Call.Return(run)
	return _c
}

// RotateAuth provides a mock function for the type ClusterServiceServer
func (_mock *ClusterServiceServer) RotateAuth(context1 context.Context, clusterQuery *cluster.ClusterQuery) (*cluster.ClusterResponse, error) {
	ret := _mock.Called(context1, clusterQuery)

	if len(ret) == 0 {
		panic("no return value specified for RotateAuth")
	}

	var r0 *cluster.ClusterResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *cluster.ClusterQuery) (*cluster.ClusterResponse, error)); ok {
		return returnFunc(context1, clusterQuery)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *cluster.ClusterQuery) *cluster.ClusterResponse); ok {
		r0 = returnFunc(context1, clusterQuery)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cluster.ClusterResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *cluster.ClusterQuery) error); ok {
		r1 = returnFunc(context1, clusterQuery)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ClusterServiceServer_RotateAuth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RotateAuth'
type ClusterServiceServer_RotateAuth_Call struct {
	*mock.Call
}

// RotateAuth is a helper method to define mock.On call
//   - context1
//   - clusterQuery
func (_e *ClusterServiceServer_Expecter) RotateAuth(context1 interface{}, clusterQuery interface{}) *ClusterServiceServer_RotateAuth_Call {
	return &ClusterServiceServer_RotateAuth_Call{Call: _e.mock.On("RotateAuth", context1, clusterQuery)}
}

func (_c *ClusterServiceServer_RotateAuth_Call) Run(run func(context1 context.Context, clusterQuery *cluster.ClusterQuery)) *ClusterServiceServer_RotateAuth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*cluster.ClusterQuery))
	})
	return _c
}

func (_c *ClusterServiceServer_RotateAuth_Call) Return(clusterResponse *cluster.ClusterResponse, err error) *ClusterServiceServer_RotateAuth_Call {
	_c.Call.Return(clusterResponse, err)
	return _c
}

func (_c *ClusterServiceServer_RotateAuth_Call) RunAndReturn(run func(context1 context.Context, clusterQuery *cluster.ClusterQuery) (*cluster.ClusterResponse, error)) *ClusterServiceServer_RotateAuth_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type ClusterServiceServer
func (_mock *ClusterServiceServer) Update(context1 context.Context, clusterUpdateRequest *cluster.ClusterUpdateRequest) (*v1alpha1.Cluster, error) {
	ret := _mock.Called(context1, clusterUpdateRequest)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *v1alpha1.Cluster
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *cluster.ClusterUpdateRequest) (*v1alpha1.Cluster, error)); ok {
		return returnFunc(context1, clusterUpdateRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *cluster.ClusterUpdateRequest) *v1alpha1.Cluster); ok {
		r0 = returnFunc(context1, clusterUpdateRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.Cluster)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *cluster.ClusterUpdateRequest) error); ok {
		r1 = returnFunc(context1, clusterUpdateRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ClusterServiceServer_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type ClusterServiceServer_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - context1
//   - clusterUpdateRequest
func (_e *ClusterServiceServer_Expecter) Update(context1 interface{}, clusterUpdateRequest interface{}) *ClusterServiceServer_Update_Call {
	return &ClusterServiceServer_Update_Call{Call: _e.mock.On("Update", context1, clusterUpdateRequest)}
}

func (_c *ClusterServiceServer_Update_Call) Run(run func(context1 context.Context, clusterUpdateRequest *cluster.ClusterUpdateRequest)) *ClusterServiceServer_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*cluster.ClusterUpdateRequest))
	})
	return _c
}

func (_c *ClusterServiceServer_Update_Call) Return(cluster1 *v1alpha1.Cluster, err error) *ClusterServiceServer_Update_Call {
	_c.Call.Return(cluster1, err)
	return _c
}

func (_c *ClusterServiceServer_Update_Call) RunAndReturn(run func(context1 context.Context, clusterUpdateRequest *cluster.ClusterUpdateRequest) (*v1alpha1.Cluster, error)) *ClusterServiceServer_Update_Call {
	_c.Call.Return(run)
	return _c
}
