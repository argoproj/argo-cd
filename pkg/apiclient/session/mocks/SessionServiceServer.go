// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/argoproj/argo-cd/v3/pkg/apiclient/session"
	mock "github.com/stretchr/testify/mock"
)

// NewSessionServiceServer creates a new instance of SessionServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSessionServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *SessionServiceServer {
	mock := &SessionServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// SessionServiceServer is an autogenerated mock type for the SessionServiceServer type
type SessionServiceServer struct {
	mock.Mock
}

type SessionServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *SessionServiceServer) EXPECT() *SessionServiceServer_Expecter {
	return &SessionServiceServer_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type SessionServiceServer
func (_mock *SessionServiceServer) Create(context1 context.Context, sessionCreateRequest *session.SessionCreateRequest) (*session.SessionResponse, error) {
	ret := _mock.Called(context1, sessionCreateRequest)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *session.SessionResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *session.SessionCreateRequest) (*session.SessionResponse, error)); ok {
		return returnFunc(context1, sessionCreateRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *session.SessionCreateRequest) *session.SessionResponse); ok {
		r0 = returnFunc(context1, sessionCreateRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*session.SessionResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *session.SessionCreateRequest) error); ok {
		r1 = returnFunc(context1, sessionCreateRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// SessionServiceServer_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type SessionServiceServer_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - context1
//   - sessionCreateRequest
func (_e *SessionServiceServer_Expecter) Create(context1 interface{}, sessionCreateRequest interface{}) *SessionServiceServer_Create_Call {
	return &SessionServiceServer_Create_Call{Call: _e.mock.On("Create", context1, sessionCreateRequest)}
}

func (_c *SessionServiceServer_Create_Call) Run(run func(context1 context.Context, sessionCreateRequest *session.SessionCreateRequest)) *SessionServiceServer_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*session.SessionCreateRequest))
	})
	return _c
}

func (_c *SessionServiceServer_Create_Call) Return(sessionResponse *session.SessionResponse, err error) *SessionServiceServer_Create_Call {
	_c.Call.Return(sessionResponse, err)
	return _c
}

func (_c *SessionServiceServer_Create_Call) RunAndReturn(run func(context1 context.Context, sessionCreateRequest *session.SessionCreateRequest) (*session.SessionResponse, error)) *SessionServiceServer_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type SessionServiceServer
func (_mock *SessionServiceServer) Delete(context1 context.Context, sessionDeleteRequest *session.SessionDeleteRequest) (*session.SessionResponse, error) {
	ret := _mock.Called(context1, sessionDeleteRequest)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *session.SessionResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *session.SessionDeleteRequest) (*session.SessionResponse, error)); ok {
		return returnFunc(context1, sessionDeleteRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *session.SessionDeleteRequest) *session.SessionResponse); ok {
		r0 = returnFunc(context1, sessionDeleteRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*session.SessionResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *session.SessionDeleteRequest) error); ok {
		r1 = returnFunc(context1, sessionDeleteRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// SessionServiceServer_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type SessionServiceServer_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - context1
//   - sessionDeleteRequest
func (_e *SessionServiceServer_Expecter) Delete(context1 interface{}, sessionDeleteRequest interface{}) *SessionServiceServer_Delete_Call {
	return &SessionServiceServer_Delete_Call{Call: _e.mock.On("Delete", context1, sessionDeleteRequest)}
}

func (_c *SessionServiceServer_Delete_Call) Run(run func(context1 context.Context, sessionDeleteRequest *session.SessionDeleteRequest)) *SessionServiceServer_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*session.SessionDeleteRequest))
	})
	return _c
}

func (_c *SessionServiceServer_Delete_Call) Return(sessionResponse *session.SessionResponse, err error) *SessionServiceServer_Delete_Call {
	_c.Call.Return(sessionResponse, err)
	return _c
}

func (_c *SessionServiceServer_Delete_Call) RunAndReturn(run func(context1 context.Context, sessionDeleteRequest *session.SessionDeleteRequest) (*session.SessionResponse, error)) *SessionServiceServer_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserInfo provides a mock function for the type SessionServiceServer
func (_mock *SessionServiceServer) GetUserInfo(context1 context.Context, getUserInfoRequest *session.GetUserInfoRequest) (*session.GetUserInfoResponse, error) {
	ret := _mock.Called(context1, getUserInfoRequest)

	if len(ret) == 0 {
		panic("no return value specified for GetUserInfo")
	}

	var r0 *session.GetUserInfoResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *session.GetUserInfoRequest) (*session.GetUserInfoResponse, error)); ok {
		return returnFunc(context1, getUserInfoRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *session.GetUserInfoRequest) *session.GetUserInfoResponse); ok {
		r0 = returnFunc(context1, getUserInfoRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*session.GetUserInfoResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *session.GetUserInfoRequest) error); ok {
		r1 = returnFunc(context1, getUserInfoRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// SessionServiceServer_GetUserInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserInfo'
type SessionServiceServer_GetUserInfo_Call struct {
	*mock.Call
}

// GetUserInfo is a helper method to define mock.On call
//   - context1
//   - getUserInfoRequest
func (_e *SessionServiceServer_Expecter) GetUserInfo(context1 interface{}, getUserInfoRequest interface{}) *SessionServiceServer_GetUserInfo_Call {
	return &SessionServiceServer_GetUserInfo_Call{Call: _e.mock.On("GetUserInfo", context1, getUserInfoRequest)}
}

func (_c *SessionServiceServer_GetUserInfo_Call) Run(run func(context1 context.Context, getUserInfoRequest *session.GetUserInfoRequest)) *SessionServiceServer_GetUserInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*session.GetUserInfoRequest))
	})
	return _c
}

func (_c *SessionServiceServer_GetUserInfo_Call) Return(getUserInfoResponse *session.GetUserInfoResponse, err error) *SessionServiceServer_GetUserInfo_Call {
	_c.Call.Return(getUserInfoResponse, err)
	return _c
}

func (_c *SessionServiceServer_GetUserInfo_Call) RunAndReturn(run func(context1 context.Context, getUserInfoRequest *session.GetUserInfoRequest) (*session.GetUserInfoResponse, error)) *SessionServiceServer_GetUserInfo_Call {
	_c.Call.Return(run)
	return _c
}
