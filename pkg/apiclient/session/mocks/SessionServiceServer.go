// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	session "github.com/argoproj/argo-cd/v3/pkg/apiclient/session"
	mock "github.com/stretchr/testify/mock"
)

// SessionServiceServer is an autogenerated mock type for the SessionServiceServer type
type SessionServiceServer struct {
	mock.Mock
}

type SessionServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *SessionServiceServer) EXPECT() *SessionServiceServer_Expecter {
	return &SessionServiceServer_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *SessionServiceServer) Create(_a0 context.Context, _a1 *session.SessionCreateRequest) (*session.SessionResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *session.SessionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *session.SessionCreateRequest) (*session.SessionResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *session.SessionCreateRequest) *session.SessionResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*session.SessionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *session.SessionCreateRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SessionServiceServer_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type SessionServiceServer_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *session.SessionCreateRequest
func (_e *SessionServiceServer_Expecter) Create(_a0 interface{}, _a1 interface{}) *SessionServiceServer_Create_Call {
	return &SessionServiceServer_Create_Call{Call: _e.mock.On("Create", _a0, _a1)}
}

func (_c *SessionServiceServer_Create_Call) Run(run func(_a0 context.Context, _a1 *session.SessionCreateRequest)) *SessionServiceServer_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*session.SessionCreateRequest))
	})
	return _c
}

func (_c *SessionServiceServer_Create_Call) Return(_a0 *session.SessionResponse, _a1 error) *SessionServiceServer_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SessionServiceServer_Create_Call) RunAndReturn(run func(context.Context, *session.SessionCreateRequest) (*session.SessionResponse, error)) *SessionServiceServer_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: _a0, _a1
func (_m *SessionServiceServer) Delete(_a0 context.Context, _a1 *session.SessionDeleteRequest) (*session.SessionResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *session.SessionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *session.SessionDeleteRequest) (*session.SessionResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *session.SessionDeleteRequest) *session.SessionResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*session.SessionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *session.SessionDeleteRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SessionServiceServer_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type SessionServiceServer_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *session.SessionDeleteRequest
func (_e *SessionServiceServer_Expecter) Delete(_a0 interface{}, _a1 interface{}) *SessionServiceServer_Delete_Call {
	return &SessionServiceServer_Delete_Call{Call: _e.mock.On("Delete", _a0, _a1)}
}

func (_c *SessionServiceServer_Delete_Call) Run(run func(_a0 context.Context, _a1 *session.SessionDeleteRequest)) *SessionServiceServer_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*session.SessionDeleteRequest))
	})
	return _c
}

func (_c *SessionServiceServer_Delete_Call) Return(_a0 *session.SessionResponse, _a1 error) *SessionServiceServer_Delete_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SessionServiceServer_Delete_Call) RunAndReturn(run func(context.Context, *session.SessionDeleteRequest) (*session.SessionResponse, error)) *SessionServiceServer_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserInfo provides a mock function with given fields: _a0, _a1
func (_m *SessionServiceServer) GetUserInfo(_a0 context.Context, _a1 *session.GetUserInfoRequest) (*session.GetUserInfoResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetUserInfo")
	}

	var r0 *session.GetUserInfoResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *session.GetUserInfoRequest) (*session.GetUserInfoResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *session.GetUserInfoRequest) *session.GetUserInfoResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*session.GetUserInfoResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *session.GetUserInfoRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SessionServiceServer_GetUserInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserInfo'
type SessionServiceServer_GetUserInfo_Call struct {
	*mock.Call
}

// GetUserInfo is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *session.GetUserInfoRequest
func (_e *SessionServiceServer_Expecter) GetUserInfo(_a0 interface{}, _a1 interface{}) *SessionServiceServer_GetUserInfo_Call {
	return &SessionServiceServer_GetUserInfo_Call{Call: _e.mock.On("GetUserInfo", _a0, _a1)}
}

func (_c *SessionServiceServer_GetUserInfo_Call) Run(run func(_a0 context.Context, _a1 *session.GetUserInfoRequest)) *SessionServiceServer_GetUserInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*session.GetUserInfoRequest))
	})
	return _c
}

func (_c *SessionServiceServer_GetUserInfo_Call) Return(_a0 *session.GetUserInfoResponse, _a1 error) *SessionServiceServer_GetUserInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SessionServiceServer_GetUserInfo_Call) RunAndReturn(run func(context.Context, *session.GetUserInfoRequest) (*session.GetUserInfoResponse, error)) *SessionServiceServer_GetUserInfo_Call {
	_c.Call.Return(run)
	return _c
}

// NewSessionServiceServer creates a new instance of SessionServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSessionServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *SessionServiceServer {
	mock := &SessionServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
