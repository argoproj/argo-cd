
// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = 'proto2';

package github.com.argoproj.argo_cd.pkg.apis.application.v1alpha1;

import "k8s.io/api/core/v1/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "v1alpha1";

// AWSAuthConfig is an AWS IAM authentication configuration
message AWSAuthConfig {
  // ClusterName contains AWS cluster name
  optional string clusterName = 1;

  // RoleARN contains optional role ARN. If set then AWS IAM Authenticator assume a role to perform cluster operations instead of the default AWS credential provider chain.
  optional string roleARN = 2;
}

// AppProject provides a logical grouping of applications, providing controls for:
// * where the apps may deploy to (cluster whitelist)
// * what may be deployed (repository whitelist, resource whitelist/blacklist)
// * who can access these applications (roles, OIDC group claims bindings)
// * and what they can do (RBAC policies)
// * automation access to these roles (JWT tokens)
// +genclient
// +genclient:noStatus
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message AppProject {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional AppProjectSpec spec = 2;
}

// AppProjectList is list of AppProject resources
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message AppProjectList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated AppProject items = 2;
}

// AppProjectSpec is the specification of an AppProject
message AppProjectSpec {
  // SourceRepos contains list of git repository URLs which can be used for deployment
  repeated string sourceRepos = 1;

  // Destinations contains list of destinations available for deployment
  repeated ApplicationDestination destinations = 2;

  // Description contains optional project description
  optional string description = 3;

  // Roles are user defined RBAC roles associated with this project
  repeated ProjectRole roles = 4;

  // ClusterResourceWhitelist contains list of whitelisted cluster level resources
  repeated k8s.io.apimachinery.pkg.apis.meta.v1.GroupKind clusterResourceWhitelist = 5;

  // NamespaceResourceBlacklist contains list of blacklisted namespace level resources
  repeated k8s.io.apimachinery.pkg.apis.meta.v1.GroupKind namespaceResourceBlacklist = 6;
}

// Application is a definition of Application resource.
// +genclient
// +genclient:noStatus
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message Application {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional ApplicationSpec spec = 2;

  optional ApplicationStatus status = 3;

  optional Operation operation = 4;
}

// ApplicationCondition contains details about current application condition
message ApplicationCondition {
  // Type is an application condition type
  optional string type = 1;

  // Message contains human-readable message indicating details about condition
  optional string message = 2;
}

// ApplicationDestination contains deployment destination information
message ApplicationDestination {
  // Server overrides the environment server value in the ksonnet app.yaml
  optional string server = 1;

  // Namespace overrides the environment namespace value in the ksonnet app.yaml
  optional string namespace = 2;
}

// ApplicationList is list of Application resources
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message ApplicationList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Application items = 2;
}

// ApplicationSource contains information about github repository, path within repository and target application environment.
message ApplicationSource {
  // RepoURL is the git repository URL of the application manifests
  optional string repoURL = 1;

  // Path is a directory path within the repository containing a
  optional string path = 2;

  // Environment is a ksonnet application environment name
  // TargetRevision defines the commit, tag, or branch in which to sync the application to.
  // If omitted, will sync to HEAD
  optional string targetRevision = 4;

  // Helm holds helm specific options
  optional ApplicationSourceHelm helm = 7;

  // Kustomize holds kustomize specific options
  optional ApplicationSourceKustomize kustomize = 8;

  // Ksonnet holds ksonnet specific options
  optional ApplicationSourceKsonnet ksonnet = 9;

  // Directory holds path/directory specific options
  optional ApplicationSourceDirectory directory = 10;

  // ConfigManagementPlugin holds config management plugin specific options
  optional ApplicationSourcePlugin plugin = 11;
}

message ApplicationSourceDirectory {
  optional bool recurse = 1;

  optional ApplicationSourceJsonnet jsonnet = 2;
}

// ApplicationSourceHelm holds helm specific options
message ApplicationSourceHelm {
  // ValuesFiles is a list of Helm value files to use when generating a template
  repeated string valueFiles = 1;

  // Parameters are parameters to the helm template
  repeated HelmParameter parameters = 2;
}

// ApplicationSourceJsonnet holds jsonnet specific options
message ApplicationSourceJsonnet {
  // ExtVars is a list of Jsonnet External Variables
  repeated JsonnetVar extVars = 1;

  // TLAS is a list of Jsonnet Top-level Arguments
  repeated JsonnetVar tlas = 2;
}

// ApplicationSourceKsonnet holds ksonnet specific options
message ApplicationSourceKsonnet {
  // Environment is a ksonnet application environment name
  optional string environment = 1;

  // Parameters are a list of ksonnet component parameter override values
  repeated KsonnetParameter parameters = 2;
}

// ApplicationSourceKustomize holds kustomize specific options
message ApplicationSourceKustomize {
  // NamePrefix is a prefix appended to resources for kustomize apps
  optional string namePrefix = 1;

  // ImageTags are kustomize 1.0 image tag overrides
  repeated KustomizeImageTag imageTags = 2;

  // Images are kustomize 2.0 image overrides
  repeated string images = 3;
}

// ApplicationSourcePlugin holds config management plugin specific options
message ApplicationSourcePlugin {
  optional string name = 1;
}

// ApplicationSpec represents desired application state. Contains link to repository with application definition and additional parameters link definition revision.
message ApplicationSpec {
  // Source is a reference to the location ksonnet application definition
  optional ApplicationSource source = 1;

  // Destination overrides the kubernetes server and namespace defined in the environment ksonnet app.yaml
  optional ApplicationDestination destination = 2;

  // Project is a application project name. Empty name means that application belongs to 'default' project.
  optional string project = 3;

  // SyncPolicy controls when a sync will be performed
  optional SyncPolicy syncPolicy = 4;

  // IgnoreDifferences controls resources fields which should be ignored during comparison
  repeated ResourceIgnoreDifferences ignoreDifferences = 5;
}

// ApplicationStatus contains information about application sync, health status
message ApplicationStatus {
  repeated ResourceStatus resources = 1;

  optional SyncStatus sync = 2;

  optional HealthStatus health = 3;

  repeated RevisionHistory history = 4;

  repeated ApplicationCondition conditions = 5;

  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time reconciledAt = 6;

  optional OperationState operationState = 7;

  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time observedAt = 8;

  optional string sourceType = 9;

  // ExternalURLs holds all external URLs of application child resources.
  repeated string externalURLs = 10;
}

// ApplicationTree holds nodes which belongs to the application
message ApplicationTree {
  repeated ResourceNode nodes = 1;
}

// ApplicationWatchEvent contains information about application change.
message ApplicationWatchEvent {
  optional string type = 1;

  // Application is:
  //  * If Type is Added or Modified: the new state of the object.
  //  * If Type is Deleted: the state of the object immediately before deletion.
  //  * If Type is Error: *api.Status is recommended; other types may make sense
  //    depending on context.
  optional Application application = 2;
}

// Cluster is the definition of a cluster resource
message Cluster {
  // Server is the API server URL of the Kubernetes cluster
  optional string server = 1;

  // Name of the cluster. If omitted, will use the server address
  optional string name = 2;

  // Config holds cluster information for connecting to a cluster
  optional ClusterConfig config = 3;

  // ConnectionState contains information about cluster connection state
  optional ConnectionState connectionState = 4;
}

// ClusterConfig is the configuration attributes. This structure is subset of the go-client
// rest.Config with annotations added for marshalling.
message ClusterConfig {
  // Server requires Basic authentication
  optional string username = 1;

  optional string password = 2;

  // Server requires Bearer authentication. This client will not attempt to use
  // refresh tokens for an OAuth2 flow.
  // TODO: demonstrate an OAuth2 compatible client.
  optional string bearerToken = 3;

  // TLSClientConfig contains settings to enable transport layer security
  optional TLSClientConfig tlsClientConfig = 4;

  // AWSAuthConfig contains IAM authentication configuration
  optional AWSAuthConfig awsAuthConfig = 5;
}

// ClusterList is a collection of Clusters.
message ClusterList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Cluster items = 2;
}

// Command holds binary path and arguments list
message Command {
  repeated string command = 1;

  repeated string args = 2;
}

// ComparedTo contains application source and target which was used for resources comparison
message ComparedTo {
  optional ApplicationSource source = 1;

  optional ApplicationDestination destination = 2;
}

// ComponentParameter contains information about component parameter value
message ComponentParameter {
  optional string component = 1;

  optional string name = 2;

  optional string value = 3;
}

// ConfigManagementPlugin contains config management plugin configuration
message ConfigManagementPlugin {
  optional string name = 1;

  optional Command init = 2;

  optional Command generate = 3;
}

// ConnectionState contains information about remote resource connection state
message ConnectionState {
  optional string status = 1;

  optional string message = 2;

  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time attemptedAt = 3;
}

message HealthStatus {
  optional string status = 1;

  optional string message = 2;
}

// HelmParameter is a parameter to a helm template
message HelmParameter {
  // Name is the name of the helm parameter
  optional string name = 1;

  // Value is the value for the helm parameter
  optional string value = 2;
}

message HelmRepository {
  optional string url = 1;

  optional string name = 2;

  optional bytes caData = 3;

  optional bytes certData = 4;

  optional bytes keyData = 5;

  optional string username = 6;

  optional string password = 7;
}

// InfoItem contains human readable information about object
message InfoItem {
  // Name is a human readable title for this piece of information.
  optional string name = 1;

  // Value is human readable content.
  optional string value = 2;
}

// JWTToken holds the issuedAt and expiresAt values of a token
message JWTToken {
  optional int64 iat = 1;

  optional int64 exp = 2;
}

// JsonnetVar is a jsonnet variable
message JsonnetVar {
  optional string name = 1;

  optional string value = 2;

  optional bool code = 3;
}

// KsonnetParameter is a ksonnet component parameter
message KsonnetParameter {
  optional string component = 1;

  optional string name = 2;

  optional string value = 3;
}

// KustomizeImageTag is a kustomize image tag
message KustomizeImageTag {
  // Name is the name of the image (e.g. nginx)
  optional string name = 1;

  // Value is the value for the new tag (e.g. 1.8.0)
  optional string value = 2;
}

// Operation contains requested operation parameters.
message Operation {
  optional SyncOperation sync = 1;
}

// OperationState contains information about state of currently performing operation on application.
message OperationState {
  // Operation is the original requested operation
  optional Operation operation = 1;

  // Phase is the current phase of the operation
  optional string phase = 2;

  // Message hold any pertinent messages when attempting to perform operation (typically errors).
  optional string message = 3;

  // SyncResult is the result of a Sync operation
  optional SyncOperationResult syncResult = 4;

  // StartedAt contains time of operation start
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time startedAt = 6;

  // FinishedAt contains time of operation completion
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time finishedAt = 7;
}

// ProjectRole represents a role that has access to a project
message ProjectRole {
  // Name is a name for this role
  optional string name = 1;

  // Description is a description of the role
  optional string description = 2;

  // Policies Stores a list of casbin formated strings that define access policies for the role in the project
  repeated string policies = 3;

  // JWTTokens are a list of generated JWT tokens bound to this role
  repeated JWTToken jwtTokens = 4;

  // Groups are a list of OIDC group claims bound to this role
  repeated string groups = 5;
}

// Repository is a Git repository holding application configurations
message Repository {
  optional string repo = 1;

  optional string username = 2;

  optional string password = 3;

  optional string sshPrivateKey = 4;

  optional ConnectionState connectionState = 5;

  optional bool insecureIgnoreHostKey = 6;
}

// RepositoryList is a collection of Repositories.
message RepositoryList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Repository items = 2;
}

message ResourceAction {
  optional string name = 1;

  repeated ResourceActionParam params = 2;
}

message ResourceActionDefinition {
  optional string name = 1;

  optional string actionLua = 2;
}

message ResourceActionParam {
  optional string name = 1;

  optional string value = 2;

  optional string type = 3;

  optional string default = 4;
}

message ResourceActions {
  optional string actionDiscoveryLua = 1;

  repeated ResourceActionDefinition definitions = 2;
}

// ResourceDiff holds the diff of a live and target resource object
message ResourceDiff {
  optional string group = 1;

  optional string kind = 2;

  optional string namespace = 3;

  optional string name = 4;

  optional string targetState = 5;

  optional string liveState = 6;

  optional string diff = 7;
}

// ResourceIgnoreDifferences contains resource filter and list of json paths which should be ignored during comparison with live state.
message ResourceIgnoreDifferences {
  optional string group = 1;

  optional string kind = 2;

  optional string name = 3;

  optional string namespace = 4;

  repeated string jsonPointers = 5;
}

// ResourceNetworkingInfo holds networking resource related information
message ResourceNetworkingInfo {
  map<string, string> targetLabels = 1;

  repeated ResourceRef targetRefs = 2;

  map<string, string> labels = 3;

  repeated k8s.io.api.core.v1.LoadBalancerIngress ingress = 4;

  // ExternalURLs holds list of URLs which should be available externally. List is populated for ingress resources using rules hostnames.
  repeated string externalURLs = 5;
}

// ResourceNode contains information about live resource and its children
message ResourceNode {
  optional ResourceRef resourceRef = 1;

  repeated ResourceRef parentRefs = 2;

  repeated InfoItem info = 3;

  optional ResourceNetworkingInfo networkingInfo = 4;

  optional string resourceVersion = 5;

  repeated string images = 6;

  optional HealthStatus health = 7;
}

// ResourceOverride holds configuration to customize resource diffing and health assessment
message ResourceOverride {
  optional string healthLua = 1;

  optional string actions = 3;

  optional string ignoreDifferences = 2;
}

// ResourceRef includes fields which unique identify resource
message ResourceRef {
  optional string group = 1;

  optional string version = 2;

  optional string kind = 3;

  optional string namespace = 4;

  optional string name = 5;
}

// ResourceResult holds the operation result details of a specific resource
message ResourceResult {
  optional string group = 1;

  optional string version = 2;

  optional string kind = 3;

  optional string namespace = 4;

  optional string name = 5;

  optional string status = 6;

  optional string message = 7;

  optional string hookType = 8;

  optional string hookPhase = 9;
}

// ResourceStatus holds the current sync and health status of a resource
message ResourceStatus {
  optional string group = 1;

  optional string version = 2;

  optional string kind = 3;

  optional string namespace = 4;

  optional string name = 5;

  optional string status = 6;

  optional HealthStatus health = 7;

  optional bool hook = 8;
}

// RevisionHistory contains information relevant to an application deployment
message RevisionHistory {
  optional string revision = 2;

  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time deployedAt = 4;

  optional int64 id = 5;

  optional ApplicationSource source = 6;
}

// SyncOperation contains sync operation details.
message SyncOperation {
  // Revision is the git revision in which to sync the application to.
  // If omitted, will use the revision specified in app spec.
  optional string revision = 1;

  // Prune deletes resources that are no longer tracked in git
  optional bool prune = 2;

  // DryRun will perform a `kubectl apply --dry-run` without actually performing the sync
  optional bool dryRun = 3;

  // SyncStrategy describes how to perform the sync
  optional SyncStrategy syncStrategy = 4;

  // Resources describes which resources to sync
  repeated SyncOperationResource resources = 6;

  // Source overrides the source definition set in the application.
  // This is typically set in a Rollback operation and nil during a Sync operation
  optional ApplicationSource source = 7;
}

// SyncOperationResource contains resources to sync.
message SyncOperationResource {
  optional string group = 1;

  optional string kind = 2;

  optional string name = 3;
}

// SyncOperationResult represent result of sync operation
message SyncOperationResult {
  // Resources holds the sync result of each individual resource
  repeated ResourceResult resources = 1;

  // Revision holds the git commit SHA of the sync
  optional string revision = 2;

  // Source records the application source information of the sync, used for comparing auto-sync
  optional ApplicationSource source = 3;
}

// SyncPolicy controls when a sync will be performed in response to updates in git
message SyncPolicy {
  // Automated will keep an application synced to the target revision
  optional SyncPolicyAutomated automated = 1;
}

// SyncPolicyAutomated controls the behavior of an automated sync
message SyncPolicyAutomated {
  // Prune will prune resources automatically as part of automated sync (default: false)
  optional bool prune = 1;
}

// SyncStatus is a comparison result of application spec and deployed application.
message SyncStatus {
  optional string status = 1;

  optional ComparedTo comparedTo = 2;

  optional string revision = 3;
}

// SyncStrategy controls the manner in which a sync is performed
message SyncStrategy {
  // Apply wil perform a `kubectl apply` to perform the sync.
  optional SyncStrategyApply apply = 1;

  // Hook will submit any referenced resources to perform the sync. This is the default strategy
  optional SyncStrategyHook hook = 2;
}

// SyncStrategyApply uses `kubectl apply` to perform the apply
message SyncStrategyApply {
  // Force indicates whether or not to supply the --force flag to `kubectl apply`.
  // The --force flag deletes and re-create the resource, when PATCH encounters conflict and has
  // retried for 5 times.
  optional bool force = 1;
}

// SyncStrategyHook will perform a sync using hooks annotations.
// If no hook annotation is specified falls back to `kubectl apply`.
message SyncStrategyHook {
  // Embed SyncStrategyApply type to inherit any `apply` options
  // +optional
  optional SyncStrategyApply syncStrategyApply = 1;
}

// TLSClientConfig contains settings to enable transport layer security
message TLSClientConfig {
  // Server should be accessed without verifying the TLS certificate. For testing only.
  optional bool insecure = 1;

  // ServerName is passed to the server for SNI and is used in the client to check server
  // certificates against. If ServerName is empty, the hostname used to contact the
  // server is used.
  optional string serverName = 2;

  // CertData holds PEM-encoded bytes (typically read from a client certificate file).
  // CertData takes precedence over CertFile
  optional bytes certData = 3;

  // KeyData holds PEM-encoded bytes (typically read from a client certificate key file).
  // KeyData takes precedence over KeyFile
  optional bytes keyData = 4;

  // CAData holds PEM-encoded bytes (typically read from a root certificates bundle).
  // CAData takes precedence over CAFile
  optional bytes caData = 5;
}

