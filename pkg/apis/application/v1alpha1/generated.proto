
// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = 'proto2';

package github.com.argoproj.argo_cd.pkg.apis.application.v1alpha1;

import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";
import "k8s.io/apimachinery/pkg/util/intstr/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "v1alpha1";

// Application is a definition of Application resource.
// +genclient
// +genclient:noStatus
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message Application {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional ApplicationSpec spec = 2;

  optional ApplicationStatus status = 3;

  optional Operation operation = 4;
}

// ApplicationCondition contains details about current application condition
message ApplicationCondition {
  // Type is an application condition type
  optional string type = 1;

  // Message contains human-readable message indicating details about condition
  optional string message = 2;
}

// ApplicationDestination contains deployment destination information
message ApplicationDestination {
  // Server overrides the environment server value in the ksonnet app.yaml
  optional string server = 1;

  // Namespace overrides the environment namespace value in the ksonnet app.yaml
  optional string namespace = 2;
}

// ApplicationList is list of Application resources
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message ApplicationList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Application items = 2;
}

// ApplicationSource contains information about github repository, path within repository and target application environment.
message ApplicationSource {
  // RepoURL is the repository URL containing the ksonnet application.
  optional string repoURL = 1;

  // Path is a directory path within repository which contains ksonnet application.
  optional string path = 2;

  // Environment is a ksonnet application environment name.
  optional string environment = 3;

  // TargetRevision defines the commit, tag, or branch in which to sync the application to.
  // If omitted, will sync to HEAD
  optional string targetRevision = 4;

  // Environment parameter override values
  repeated ComponentParameter componentParameterOverrides = 5;
}

// ApplicationSpec represents desired application state. Contains link to repository with application definition and additional parameters link definition revision.
message ApplicationSpec {
  // Source is a reference to the location ksonnet application definition
  optional ApplicationSource source = 1;

  // Destination overrides the kubernetes server and namespace defined in the environment ksonnet app.yaml
  optional ApplicationDestination destination = 2;
}

// ApplicationStatus contains information about application status in target environment.
message ApplicationStatus {
  optional ComparisonResult comparisonResult = 1;

  repeated DeploymentInfo history = 2;

  repeated ComponentParameter parameters = 3;

  optional HealthStatus health = 4;

  optional OperationState operationState = 5;

  repeated ApplicationCondition conditions = 6;
}

// ApplicationWatchEvent contains information about application change.
message ApplicationWatchEvent {
  optional string type = 1;

  // Application is:
  //  * If Type is Added or Modified: the new state of the object.
  //  * If Type is Deleted: the state of the object immediately before deletion.
  //  * If Type is Error: *api.Status is recommended; other types may make sense
  //    depending on context.
  optional Application application = 2;
}

// Cluster is the definition of a cluster resource
message Cluster {
  // Server is the API server URL of the Kubernetes cluster
  optional string server = 1;

  // Name of the cluster. If omitted, will use the server address
  optional string name = 2;

  // Config holds cluster information for connecting to a cluster
  optional ClusterConfig config = 3;

  // ConnectionState contains information about cluster connection state
  optional ConnectionState connectionState = 4;
}

// ClusterConfig is the configuration attributes. This structure is subset of the go-client
// rest.Config with annotations added for marshalling.
message ClusterConfig {
  // Server requires Basic authentication
  optional string username = 1;

  optional string password = 2;

  // Server requires Bearer authentication. This client will not attempt to use
  // refresh tokens for an OAuth2 flow.
  // TODO: demonstrate an OAuth2 compatible client.
  optional string bearerToken = 3;

  // TLSClientConfig contains settings to enable transport layer security
  optional TLSClientConfig tlsClientConfig = 4;
}

// ClusterList is a collection of Clusters.
message ClusterList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Cluster items = 2;
}

// ComparisonResult is a comparison result of application spec and deployed application.
message ComparisonResult {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time comparedAt = 1;

  optional ApplicationSource comparedTo = 2;

  optional string status = 5;

  repeated ResourceState resources = 6;

  optional string error = 7;
}

// ComponentParameter contains information about component parameter value
message ComponentParameter {
  optional string component = 1;

  optional string name = 2;

  optional string value = 3;
}

// ConnectionState contains information about remote resource connection state
message ConnectionState {
  optional string status = 1;

  optional string message = 2;

  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time attemptedAt = 3;
}

// DeploymentInfo contains information relevant to an application deployment
message DeploymentInfo {
  repeated ComponentParameter params = 1;

  optional string revision = 2;

  repeated ComponentParameter componentParameterOverrides = 3;

  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time deployedAt = 4;

  optional int64 id = 5;
}

message HealthStatus {
  optional string status = 1;

  optional string statusDetails = 2;
}

// Operation contains requested operation parameters.
message Operation {
  optional SyncOperation sync = 1;

  optional RollbackOperation rollback = 2;
}

// OperationState contains information about state of currently performing operation on application.
message OperationState {
  // Operation is the original requested operation
  optional Operation operation = 1;

  // Phase is the current phase of the operation
  optional string phase = 2;

  // Message hold any pertinent messages when attempting to perform operation (typically errors).
  optional string message = 3;

  // SyncResult is the result of a Sync operation
  optional SyncOperationResult syncResult = 4;

  // RollbackResult is the result of a Rollback operation
  optional SyncOperationResult rollbackResult = 5;

  // StartedAt contains time of operation start
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time startedAt = 6;

  // FinishedAt contains time of operation completion
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time finishedAt = 7;
}

// Repository is a Git repository holding application configurations
message Repository {
  optional string repo = 1;

  optional string username = 2;

  optional string password = 3;

  optional string sshPrivateKey = 4;

  optional ConnectionState connectionState = 5;
}

// RepositoryList is a collection of Repositories.
message RepositoryList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Repository items = 2;
}

message ResourceDetails {
  optional string name = 1;

  optional string kind = 2;

  optional string namespace = 3;

  optional string message = 4;
}

// ResourceNode contains information about live resource and its children
message ResourceNode {
  optional string state = 1;

  repeated ResourceNode children = 2;
}

// ResourceState holds the target state of a resource and live state of a resource
message ResourceState {
  optional string targetState = 1;

  optional string liveState = 2;

  optional string status = 3;

  repeated ResourceNode childLiveResources = 4;

  optional HealthStatus health = 5;
}

message RollbackOperation {
  optional int64 id = 1;

  optional bool prune = 2;

  optional bool dryRun = 3;
}

// SyncOperation contains sync operation details.
message SyncOperation {
  optional string revision = 1;

  optional bool prune = 2;

  optional bool dryRun = 3;
}

// SyncOperationResult represent result of sync operation
message SyncOperationResult {
  repeated ResourceDetails resources = 1;
}

// TLSClientConfig contains settings to enable transport layer security
message TLSClientConfig {
  // Server should be accessed without verifying the TLS certificate. For testing only.
  optional bool insecure = 1;

  // ServerName is passed to the server for SNI and is used in the client to check server
  // ceritificates against. If ServerName is empty, the hostname used to contact the
  // server is used.
  optional string serverName = 2;

  // CertData holds PEM-encoded bytes (typically read from a client certificate file).
  // CertData takes precedence over CertFile
  optional bytes certData = 3;

  // KeyData holds PEM-encoded bytes (typically read from a client certificate key file).
  // KeyData takes precedence over KeyFile
  optional bytes keyData = 4;

  // CAData holds PEM-encoded bytes (typically read from a root certificates bundle).
  // CAData takes precedence over CAFile
  optional bytes caData = 5;
}

