// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	"context"

	"github.com/argoproj/argo-cd/pkg/repoapiclient"
)
import "google.golang.org/grpc"
import "github.com/stretchr/testify/mock"
import "github.com/argoproj/argo-cd/pkg/apis/application/v1alpha1"

// RepoServerServiceClient is an autogenerated mock type for the RepoServerServiceClient type
type RepoServerServiceClient struct {
	mock.Mock
}

// GenerateManifest provides a mock function with given fields: ctx, in, opts
func (_m *RepoServerServiceClient) GenerateManifest(ctx context.Context, in *repoapiclient.ManifestRequest, opts ...grpc.CallOption) (*repoapiclient.ManifestResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *repoapiclient.ManifestResponse
	if rf, ok := ret.Get(0).(func(context.Context, *repoapiclient.ManifestRequest, ...grpc.CallOption) *repoapiclient.ManifestResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repoapiclient.ManifestResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *repoapiclient.ManifestRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAppDetails provides a mock function with given fields: ctx, in, opts
func (_m *RepoServerServiceClient) GetAppDetails(ctx context.Context, in *repoapiclient.RepoServerAppDetailsQuery, opts ...grpc.CallOption) (*repoapiclient.RepoAppDetailsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *repoapiclient.RepoAppDetailsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *repoapiclient.RepoServerAppDetailsQuery, ...grpc.CallOption) *repoapiclient.RepoAppDetailsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repoapiclient.RepoAppDetailsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *repoapiclient.RepoServerAppDetailsQuery, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFile provides a mock function with given fields: ctx, in, opts
func (_m *RepoServerServiceClient) GetFile(ctx context.Context, in *repoapiclient.GetFileRequest, opts ...grpc.CallOption) (*repoapiclient.GetFileResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *repoapiclient.GetFileResponse
	if rf, ok := ret.Get(0).(func(context.Context, *repoapiclient.GetFileRequest, ...grpc.CallOption) *repoapiclient.GetFileResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repoapiclient.GetFileResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *repoapiclient.GetFileRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRevisionMetadata provides a mock function with given fields: ctx, in, opts
func (_m *RepoServerServiceClient) GetRevisionMetadata(ctx context.Context, in *repoapiclient.RepoServerRevisionMetadataRequest, opts ...grpc.CallOption) (*v1alpha1.RevisionMetadata, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v1alpha1.RevisionMetadata
	if rf, ok := ret.Get(0).(func(context.Context, *repoapiclient.RepoServerRevisionMetadataRequest, ...grpc.CallOption) *v1alpha1.RevisionMetadata); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.RevisionMetadata)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *repoapiclient.RepoServerRevisionMetadataRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDir provides a mock function with given fields: ctx, in, opts
func (_m *RepoServerServiceClient) ListDir(ctx context.Context, in *repoapiclient.ListDirRequest, opts ...grpc.CallOption) (*repoapiclient.FileList, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *repoapiclient.FileList
	if rf, ok := ret.Get(0).(func(context.Context, *repoapiclient.ListDirRequest, ...grpc.CallOption) *repoapiclient.FileList); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repoapiclient.FileList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *repoapiclient.ListDirRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
