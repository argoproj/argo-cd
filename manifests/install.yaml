# This is an auto-generated file. DO NOT EDIT
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: applications.argoproj.io
spec:
  group: argoproj.io
  names:
    kind: Application
    plural: applications
    shortNames:
    - app
  scope: Namespaced
  version: v1alpha1
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: appprojects.argoproj.io
spec:
  group: argoproj.io
  names:
    kind: AppProject
    plural: appprojects
    shortNames:
    - appproj
    - appprojs
  scope: Namespaced
  version: v1alpha1
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: argocd-cm
#data:
  # ArgoCD's externally facing URL
  # url: https://argo-cd-demo.argoproj.io

  # A dex connector configuration.
  # Visit https://github.com/argoproj/argo-cd/blob/master/docs/sso.md#2-configure-argocd-for-sso 
  # for instructions on configuring SSO.
  # dex.config: |
  #   connectors:
  #     # GitHub example
  #     - type: github
  #       id: github
  #       name: GitHub
  #       config:
  #         clientID: aabbccddeeff00112233
  #         clientSecret: $dex.github.clientSecret
  #         orgs:
  #         - name: your-github-org
  #           teams:
  #           - red-team
---
# NOTE: some values in this secret will be populated by the initial startup of the API server
apiVersion: v1
kind: Secret
metadata:
  name: argocd-secret
type: Opaque
#data:
  # TLS certificate and private key for API server
  # server.crt: 
  # server.key:

  # The following keys hold the shared secret for authenticating GitHub/GitLab/BitBucket webhook
  # events. To enable webhooks, configure one or more of the following keys with the shared git
  # provider webhook secret. The payload URL configured in the git provider should use the 
  # /api/webhook endpoint of your ArgoCD instance (e.g. https://argocd.example.com/api/webhook)
  # github.webhook.secret: 
  # gitlab.webhook.secret:
  # bitbucket.webhook.uuid: 

  # bcrypt hash of the admin password (autogenerated on initial startup).
  # To reset a forgotten password, delete this key and restart the argocd-server
  # admin.password: 

  # random server signature key for session validation (autogenerated on initial startup)
  # server.secretkey:
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: argocd-rbac-cm
#data:
  # An RBAC policy .csv file containing additional policy and role definitions.
  # See https://github.com/argoproj/argo-cd/blob/master/docs/rbac.md on how to write RBAC policies.
  # policy.csv: |
  #   # Give all members of "my-org:team-alpha" the ability to sync apps in "my-project"
  #   p, my-org:team-alpha, applications, sync, my-project/*, allow
  #   # Make all members of "my-org:team-beta" admins
  #   g, my-org:team-beta, role:admin

  # The default role ArgoCD will fall back to, when authorizing API requests
  # policy.default: role:readonly
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: application-controller
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: application-controller-role
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - watch
  - list
  - patch
  - update
- apiGroups:
  - argoproj.io
  resources:
  - applications
  - appprojects
  verbs:
  - create
  - get
  - list
  - watch
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - list
  
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: application-controller-role-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: application-controller-role
subjects:
- kind: ServiceAccount
  name: application-controller
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: application-controller
spec:
  selector:
    matchLabels:
      app: application-controller
  template:
    metadata:
      labels:
        app: application-controller
    spec:
      containers:
      - command: [/argocd-application-controller, --repo-server, 'argocd-repo-server:8081']
        image: argoproj/argocd-application-controller:latest
        name: application-controller
      serviceAccountName: application-controller
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: argocd-server
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: argocd-server-role
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  - configmaps
  verbs:
  - create
  - get
  - list
  - watch
  - update
  - patch
  - delete
- apiGroups:
  - argoproj.io
  resources:
  - applications
  - appprojects
  verbs:
  - create
  - get
  - list
  - watch
  - update
  - delete
  - patch
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - list
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: argocd-server-role-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: argocd-server-role
subjects:
- kind: ServiceAccount
  name: argocd-server
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: argocd-server
spec:
  selector:
    matchLabels:
      app: argocd-server
  template:
    metadata:
      labels:
        app: argocd-server
    spec:
      serviceAccountName: argocd-server
      initContainers:
      - name: copyutil
        image: argoproj/argocd-server:latest
        command: [cp, /argocd-util, /shared]
        volumeMounts:
        - mountPath: /shared
          name: static-files
      - name: ui
        image: argoproj/argocd-ui:latest
        command: [cp, -r, /app, /shared]
        volumeMounts:
        - mountPath: /shared
          name: static-files
      containers:
      - name: argocd-server
        image: argoproj/argocd-server:latest
        command: [/argocd-server, --staticassets, /shared/app, --repo-server, 'argocd-repo-server:8081']
        volumeMounts:
        - mountPath: /shared
          name: static-files
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 3
          periodSeconds: 30
      volumes:
      - emptyDir: {}
        name: static-files
---
apiVersion: v1
kind: Service
metadata:
  name: argocd-server
spec:
  ports:
  - name: http
    protocol: TCP
    port: 80
    targetPort: 8080
  - name: https
    protocol: TCP
    port: 443
    targetPort: 8080
  selector:
    app: argocd-server
---
apiVersion: v1
kind: Service
metadata:
  name: argocd-metrics
spec:
  ports:
  - name: http
    protocol: TCP
    port: 8082
    targetPort: 8082
  selector:
    app: argocd-server
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: argocd-repo-server
spec:
  selector:
    matchLabels:
      app: argocd-repo-server
  template:
    metadata:
      labels:
        app: argocd-repo-server
    spec:
      containers:
      - name: argocd-repo-server
        image: argoproj/argocd-repo-server:latest
        command: [/argocd-repo-server]
        ports:
          - containerPort: 8081
---
apiVersion: v1
kind: Service
metadata:
  name: argocd-repo-server
spec:
  ports:
  - port: 8081
    targetPort: 8081
  selector:
    app: argocd-repo-server
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: dex-server
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: dex-server-role
rules:
- apiGroups:
  - ""
  resourceNames:
  - argocd-cm
  - argocd-secret
  resources:
  - secrets
  - configmaps
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: dex-server-role-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: dex-server-role
subjects:
- kind: ServiceAccount
  name: dex-server
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dex-server
spec:
  selector:
    matchLabels:
      app: dex-server
  template:
    metadata:
      labels:
        app: dex-server
    spec:
      serviceAccountName: dex-server
      initContainers:
      - name: copyutil
        image: argoproj/argocd-server:latest
        command: [cp, /argocd-util, /shared]
        volumeMounts:
        - mountPath: /shared
          name: static-files
      containers:
      - name: dex
        image: quay.io/coreos/dex:v2.10.0
        command: [/shared/argocd-util, rundex]
        ports:
          - containerPort: 5556
          - containerPort: 5557
        volumeMounts:
        - mountPath: /shared
          name: static-files
      volumes:
      - emptyDir: {}
        name: static-files
---
apiVersion: v1
kind: Service
metadata:
  name: dex-server
spec:
  ports:
  - name: http
    protocol: TCP
    port: 5556
    targetPort: 5556
  - name: grpc
    protocol: TCP
    port: 5557
    targetPort: 5557
  selector:
    app: dex-server
